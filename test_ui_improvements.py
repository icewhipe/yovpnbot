#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π UI/UX
"""

import os
import sys
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –≤ sys.path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.services.animation_service import StickerService
from src.services.ui_service import UIService
from src.services.copy_service import CopyService
from src.services.interaction_service import InteractionService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def test_ui_services():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UI —Å–µ—Ä–≤–∏—Å–æ–≤"""
    logger.info("=== –¢–ï–°–¢ UI –°–ï–†–í–ò–°–û–í ===")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
    ui_service = UIService()
    copy_service = CopyService()
    interaction_service = InteractionService()
    sticker_service = StickerService()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    logger.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫...")
    
    # –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    user_stats = {
        'balance': 20,
        'days_remaining': 5,
        'referrals_count': 2,
        'referral_income': 24
    }
    
    keyboard = ui_service.create_main_menu_keyboard(user_stats, has_subscription=True)
    logger.info(f"‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–æ: {len(keyboard.keyboard)} —Ä—è–¥–æ–≤ –∫–Ω–æ–ø–æ–∫")
    
    # –¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥–ø–∏—Å–∫–∏
    subscription_info = {
        'status': 'active',
        'days_remaining': 5,
        'balance': 20
    }
    
    keyboard = ui_service.create_subscription_keyboard(subscription_info)
    logger.info(f"‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–∞: {len(keyboard.keyboard)} —Ä—è–¥–æ–≤ –∫–Ω–æ–ø–æ–∫")
    
    # –¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–∞–ª–∞–Ω—Å–∞
    keyboard = ui_service.create_balance_keyboard(20)
    logger.info(f"‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–∞–ª–∞–Ω—Å–∞ —Å–æ–∑–¥–∞–Ω–∞: {len(keyboard.keyboard)} —Ä—è–¥–æ–≤ –∫–Ω–æ–ø–æ–∫")
    
    # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    logger.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    balance_message = ui_service.format_balance_message(20, 5)
    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–ª–∞–Ω—Å–µ: {len(balance_message)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    subscription_message = ui_service.format_subscription_message(subscription_info)
    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ: {len(subscription_message)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤
    logger.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã...")
    
    progress_bar = ui_service.create_loading_message("–ó–∞–≥—Ä—É–∑–∫–∞...", 3, 5)
    logger.info(f"‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä: {progress_bar}")
    
    # –¢–µ—Å—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    test_text = "https://example.com/vless-link"
    qr_bio = copy_service.generate_qr_code(test_text)
    if qr_bio:
        logger.info(f"‚úÖ QR-–∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {len(qr_bio.getvalue())} –±–∞–π—Ç")
    else:
        logger.warning("‚ùå QR-–∫–æ–¥ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
    
    # –¢–µ—Å—Ç –∞–Ω–∏–º–∞—Ü–∏–π
    logger.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –∞–Ω–∏–º–∞—Ü–∏–π...")
    
    # –¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤
    progress_bar = sticker_service.create_progress_bar(3, 5)
    logger.info(f"‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∞–Ω–∏–º–∞—Ü–∏–∏: {progress_bar}")
    
    # –¢–µ—Å—Ç —Å—Ç–∏–∫–µ—Ä–æ–≤ (–±–µ–∑ –±–æ—Ç–∞)
    sticker_id = sticker_service.get_sticker('loading', 0)
    if sticker_id:
        logger.info(f"‚úÖ –°—Ç–∏–∫–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏: {sticker_id[:20]}...")
    else:
        logger.info("‚ÑπÔ∏è –°—Ç–∏–∫–µ—Ä—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞)")
    
    logger.info("=== –¢–ï–°–¢ UI –°–ï–†–í–ò–°–û–í –ó–ê–í–ï–†–®–ï–ù ===")

def test_animation_sequences():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π"""
    logger.info("=== –¢–ï–°–¢ –ê–ù–ò–ú–ê–¶–ò–û–ù–ù–´–• –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–ï–ô ===")
    
    sticker_service = StickerService()
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    steps = [
        {
            'sticker': 'loading',
            'text': '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
            'progress': {'current': 1, 'total': 5}
        },
        {
            'sticker': 'server',
            'text': '–ì–æ—Ç–æ–≤–∏–º –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É',
            'progress': {'current': 2, 'total': 5}
        },
        {
            'sticker': 'security',
            'text': '–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª',
            'progress': {'current': 3, 'total': 5}
        },
        {
            'sticker': 'network',
            'text': '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏',
            'progress': {'current': 4, 'total': 5}
        },
        {
            'sticker': 'success',
            'text': '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!',
            'progress': {'current': 5, 'total': 5}
        }
    ]
    
    logger.info(f"‚úÖ –ê–Ω–∏–º–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {len(steps)} —à–∞–≥–æ–≤")
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
    payment_steps = [
        {
            'sticker': 'loading',
            'text': '–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞',
            'progress': {'current': 1, 'total': 3}
        },
        {
            'sticker': 'security',
            'text': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
            'progress': {'current': 2, 'total': 3}
        },
        {
            'sticker': 'success',
            'text': '–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω!',
            'progress': {'current': 3, 'total': 3}
        }
    ]
    
    logger.info(f"‚úÖ –ê–Ω–∏–º–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞: {len(payment_steps)} —à–∞–≥–æ–≤")
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    activation_steps = [
        {
            'sticker': 'loading',
            'text': '–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏',
            'progress': {'current': 1, 'total': 3}
        },
        {
            'sticker': 'network',
            'text': '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞',
            'progress': {'current': 2, 'total': 3}
        },
        {
            'sticker': 'celebration',
            'text': '–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!',
            'progress': {'current': 3, 'total': 3}
        }
    ]
    
    logger.info(f"‚úÖ –ê–Ω–∏–º–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {len(activation_steps)} —à–∞–≥–æ–≤")
    
    logger.info("=== –¢–ï–°–¢ –ê–ù–ò–ú–ê–¶–ò–û–ù–ù–´–• –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–ï–ô –ó–ê–í–ï–†–®–ï–ù ===")

def test_button_grouping():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∫–Ω–æ–ø–æ–∫"""
    logger.info("=== –¢–ï–°–¢ –ì–†–£–ü–ü–ò–†–û–í–ö–ò –ö–ù–û–ü–û–ö ===")
    
    ui_service = UIService()
    
    # –¢–µ—Å—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∫–Ω–æ–ø–æ–∫
    button_groups = ui_service.button_groups
    
    for group_name, buttons in button_groups.items():
        logger.info(f"‚úÖ –ì—Ä—É–ø–ø–∞ '{group_name}': {len(buttons)} –∫–Ω–æ–ø–æ–∫")
        for button in buttons:
            emoji = ui_service.button_emojis.get(button, '‚ùì')
            logger.info(f"   - {emoji} {button}")
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —Å —ç–º–æ–¥–∑–∏
    test_button = ui_service.create_button(
        "–¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞", 
        "test_callback", 
        emoji="‚úÖ"
    )
    logger.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {test_button.text}")
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —Å —Ü–≤–µ—Ç–æ–≤—ã–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
    colored_button = ui_service.create_button(
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", 
        "confirm_action", 
        emoji="‚úÖ",
        color_indicator="üü¢"
    )
    logger.info(f"‚úÖ –¶–≤–µ—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {colored_button.text}")
    
    logger.info("=== –¢–ï–°–¢ –ì–†–£–ü–ü–ò–†–û–í–ö–ò –ö–ù–û–ü–û–ö –ó–ê–í–ï–†–®–ï–ù ===")

def test_interaction_feedback():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    logger.info("=== –¢–ï–°–¢ –û–ë–†–ê–¢–ù–û–ô –°–í–Ø–ó–ò ===")
    
    interaction_service = InteractionService()
    
    # –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    feedback_types = [
        ("loading", "–ó–∞–≥—Ä—É–∑–∫–∞..."),
        ("success", "–ì–æ—Ç–æ–≤–æ!"),
        ("error", "–û—à–∏–±–∫–∞!"),
        ("warning", "–í–Ω–∏–º–∞–Ω–∏–µ!"),
        ("info", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    ]
    
    for feedback_type, message in feedback_types:
        logger.info(f"‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å '{feedback_type}': {message}")
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤
    progress_messages = [
        ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", 1, 5),
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É", 2, 5),
        ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞", 3, 5),
        ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π", 4, 5),
        ("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ", 5, 5)
    ]
    
    for text, current, total in progress_messages:
        progress_message = interaction_service.create_loading_message(
            text, current, total
        )
        logger.info(f"‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ: {progress_message}")
    
    logger.info("=== –¢–ï–°–¢ –û–ë–†–ê–¢–ù–û–ô –°–≤—è–∑–∏ –ó–ê–í–ï–†–®–ï–ù ===")

if __name__ == "__main__":
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        test_ui_services()
        test_animation_sequences()
        test_button_grouping()
        test_interaction_feedback()
        
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()