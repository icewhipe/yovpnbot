# YoVPN Bot Docker Compose
# Полная настройка для продакшена

version: '3.8'

services:
  # Основной бот
  bot:
    environment:
      - BOT_TOKEN=8385845645:AAGiZhSwkRgndegtTsy573Smnul2wFNwLu0
      - MARZBAN_ADMIN_TOKEN=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJleWozc2R1bldCdUx0YVhiQzhrIiwiYWNjZXNzIjoic3VkbyIsImlhdCI6MTc2MDk4MDU5NCwiZXhwIjoxNzYxMDY2OTk0fQ.EOUkZB6iKeUIwGzn9N9U5YLFcj6NlbTQe0tK2l5qJ9Y
    build: .
    container_name: yovpn-bot
    env_file: .env
    ports:
      - "8000:8000"  # Prometheus метрики
      - "8080:8080"  # Health check
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - yovpn-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis для кэширования
  redis:
    image: redis:7-alpine
    container_name: yovpn-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - yovpn-network
    command: redis-server --appendonly yes

  # Prometheus для мониторинга
  prometheus:
    image: prom/prometheus:latest
    container_name: yovpn-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - yovpn-network

  # Grafana для визуализации
  grafana:
    image: grafana/grafana:latest
    container_name: yovpn-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    networks:
      - yovpn-network
    depends_on:
      - prometheus

  # Nginx для reverse proxy
  nginx:
    image: nginx:alpine
    container_name: yovpn-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - bot
    restart: unless-stopped
    networks:
      - yovpn-network

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  yovpn-network:
    driver: bridge
