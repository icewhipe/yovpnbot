#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Telegram Bot –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Marzban
"""

import os
import sys
import logging
import time
from io import BytesIO

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –≤ sys.path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

import telebot
from telebot import types

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–µ–≥–æ –ø–∞–∫–µ—Ç–∞
from src.config import config
from src.services.user_service import UserService
from src.services.marzban_service import MarzbanService
from src.models.user import User
from src.utils.error_handler import init_error_handler, get_error_handler
from src.utils.qr_generator import qr_generator

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤
try:
    import qrcode
    QR_AVAILABLE = True
except ImportError:
    QR_AVAILABLE = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
user_service = UserService()
marzban_service = MarzbanService()

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
bot = telebot.TeleBot(config.BOT_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
init_error_handler(bot)

# –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥
test_users = set()

# –≠–º–æ–¥–∑–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
EMOJI = {
    'user': 'üë§',
    'subscription': 'üì±',
    'balance': 'üí∞',
    'referral': 'üë•',
    'info': '‚ÑπÔ∏è',
    'add': '‚ûï',
    'back': '‚¨ÖÔ∏è',
    'home': 'üè†',
    'check': '‚úÖ',
    'cross': '‚ùå',
    'warning': '‚ö†Ô∏è',
    'lock': 'üîí',
    'unlock': 'üîì',
    'settings': '‚öôÔ∏è',
    'support': 'üÜò',
    'channel': 'üì¢',
    'link': 'üîó',
    'qr': 'üì±',
    'share': 'üì§',
    'history': 'üìä',
    'coupon': 'üé´',
    'payment': 'üí≥',
    'device': 'üì±',
    'wifi': 'üì∂',
    'vpn': 'üîí',
    'speed': '‚ö°',
    'security': 'üõ°Ô∏è',
    'no_logs': 'üîí',
    'active': 'üü¢',
    'expired': 'üî¥',
    'limited': 'üü°',
    'on_hold': 'üü†',
    'robot': 'ü§ñ',
    'rocket': 'üöÄ',
    'gift': 'üéÅ',
    'hourglass': '‚è≥',
    'loading': '‚è≥'
}

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
def handle_error(context: str = "", user_friendly_error: str = "general"):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    def decorator(func):
        def wrapper(*args, **kwargs):
            try:
                return func(*args, **kwargs)
            except Exception as e:
                error_handler = get_error_handler()
                user_id = None
                if args and hasattr(args[0], 'from_user'):
                    user_id = args[0].from_user.id
                elif args and hasattr(args[0], 'chat'):
                    user_id = args[0].chat.id
                
                error_handler.handle_error(e, context, user_id)
                if user_id:
                    error_handler.send_user_error(user_id, user_friendly_error)
                return None
        return wrapper
    return decorator

@bot.message_handler(commands=['start'])
@handle_error("start_command", "general")
def start_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    first_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    username = message.from_user.username
    
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start: ID={user_id}, Username=@{username}, FirstName={first_name}")
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = user_service.ensure_user_record(user_id, username, first_name)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
    try:
        param = None
        if message.text and ' ' in message.text:
            param = message.text.split(' ', 1)[1].strip()
        if param and param.startswith('ref_'):
            ref_key = param.replace('ref_', '', 1)
            referrer_id = int(ref_key) if ref_key.isdigit() else user_service.find_user_id_by_username(ref_key)
            if referrer_id:
                user_service.record_referral(referrer_id, user_id)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: {e}")
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å 20 ‚ÇΩ (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ)
    if not user.bonus_given:
        user_service.credit_balance(user_id, 20, reason='welcome_bonus')
        user_service.update_user_record(user_id, {"bonus_given": True})
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π /start ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    if not user.first_start_completed:
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(types.InlineKeyboardButton(f"{EMOJI['settings']} –ù–∞—Å—Ç—Ä–æ–∏—Ç—å VPN", callback_data='start_setup'))
        welcome_text = (
            f"{EMOJI['user']} <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name}!</b>\n\n"
            f"–í—ã –ø–æ–ø–∞–ª–∏ –≤ –±–æ—Ç–∞ <b>YoVPN</b>. –ú—ã –Ω–∞—á–∏—Å–ª–∏–ª–∏ –≤–∞–º <b>20 ‚ÇΩ</b> ‚Äî —ç—Ç–æ <b>5 –¥–Ω–µ–π</b> –¥–æ—Å—Ç—É–ø–∞ (4 ‚ÇΩ = 1 –¥–µ–Ω—å).\n\n"
            f"<b>–ü–æ—á–µ–º—É YoVPN:</b>\n"
            f"‚Ä¢ {EMOJI['speed']} –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å\n"
            f"‚Ä¢ {EMOJI['security']} –ù–∞–¥–µ–∂–Ω–∞—è –∑–∞—â–∏—Ç–∞\n"
            f"‚Ä¢ {EMOJI['no_logs']} –ë–µ–∑ –ª–æ–≥–æ–≤\n"
            f"‚Ä¢ {EMOJI['active']} –°—Ç–∞–±–∏–ª—å–Ω–æ 24/7\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞—Å—Ç—Ä–æ–∏—Ç—å VPN¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
        )
        bot.send_message(message.chat.id, welcome_text, parse_mode='HTML', reply_markup=keyboard)
        user_service.update_user_record(user_id, {"first_start_completed": True})
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    show_main_menu(message)

@bot.callback_query_handler(func=lambda call: True)
@handle_error("callback_handler", "general")
def handle_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    class FakeMessage:
        def __init__(self, call):
            self.chat = call.message.chat
            self.message_id = call.message.message_id
            self.from_user = call.from_user
    
    fake_message = FakeMessage(call)
    
    # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è callback'–æ–≤
    if call.data == "add_subscription":
        show_subscription_options(fake_message)
    elif call.data == "my_subscriptions":
        show_my_subscriptions(fake_message)
    elif call.data == "balance":
        show_balance_menu(fake_message)
    elif call.data.startswith("get_test_"):
        username = call.data.replace("get_test_", "")
        get_test_period(fake_message, username)
    elif call.data == "invite_friend":
        show_invite_menu(fake_message)
    elif call.data == "my_referrals":
        show_referrals_menu(fake_message)
    elif call.data == "about_service":
        show_about_service(fake_message)
    elif call.data == "back_to_main":
        show_main_menu(fake_message)
    elif call.data.startswith("subscribe_"):
        handle_subscription_purchase(fake_message, call.data)
    elif call.data == "top_up_balance":
        show_payment_options(fake_message)
    elif call.data == "payment_history":
        show_payment_history(fake_message)
    elif call.data == "activate_coupon":
        activate_coupon(fake_message)
    elif call.data == "share_link":
        share_referral_link(fake_message)
    elif call.data == "show_qr":
        show_qr_code(fake_message)
    elif call.data == "support_chat":
        show_support_chat(fake_message)
    elif call.data == "channel_link":
        show_channel_link(fake_message)
    elif call.data == 'start_setup':
        show_setup_step1(fake_message)
    elif call.data.startswith('choose_device_'):
        device_key = call.data.replace('choose_device_', '')
        show_setup_step2(fake_message, device_key)
    elif call.data == 'continue_setup':
        continue_setup_flow(fake_message)
    elif call.data == 'back_to_setup_1':
        show_setup_step1(fake_message)
    elif call.data == 'finish_setup':
        finish_setup(fake_message)
    elif call.data == 'show_qr_key':
        show_qr_key(fake_message)
    elif call.data.startswith("get_link_"):
        username = call.data.replace("get_link_", "")
        show_vpn_links(fake_message, username)
    elif call.data.startswith("show_vless_"):
        username = call.data.replace("show_vless_", "")
        show_vless_links(fake_message, username)
    elif call.data.startswith("show_sub_"):
        username = call.data.replace("show_sub_", "")
        show_subscription_link(fake_message, username)
    elif call.data.startswith("copy_link_"):
        copy_vless_link(fake_message, call.data)
    elif call.data.startswith("get_configs_"):
        username = call.data.replace("get_configs_", "")
        get_vless_configs(fake_message, username)
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
    try:
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback query: {e}")

@handle_error("show_main_menu", "general")
def show_main_menu(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    if not username:
        username = first_name.lower().replace(" ", "_")
    
    logger.info(f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: ID={user_id}, Username=@{username}, FirstName={first_name}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    user_info = marzban_service.get_user_info(username) if username else None
    is_new_user = user_id not in test_users
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_stats = user_service.get_user_stats(user_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    
    if user_info:
        keyboard.add(
            types.InlineKeyboardButton(f"{EMOJI['add']} –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="add_subscription"),
            types.InlineKeyboardButton(f"{EMOJI['subscription']} –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="my_subscriptions")
        )
    elif is_new_user:
        keyboard.add(
            types.InlineKeyboardButton(f"{EMOJI['gift']} –ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥", callback_data=f"get_test_{username}"),
            types.InlineKeyboardButton(f"{EMOJI['subscription']} –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="my_subscriptions")
        )
    else:
        keyboard.add(
            types.InlineKeyboardButton(f"{EMOJI['add']} –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="add_subscription"),
            types.InlineKeyboardButton(f"{EMOJI['subscription']} –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="my_subscriptions")
        )
    
    keyboard.add(types.InlineKeyboardButton(f"{EMOJI['balance']} –ë–∞–ª–∞–Ω—Å", callback_data="balance"))
    keyboard.add(
        types.InlineKeyboardButton(f"{EMOJI['referral']} –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", callback_data="invite_friend"),
        types.InlineKeyboardButton(f"{EMOJI['referral']} –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="my_referrals")
    )
    keyboard.add(types.InlineKeyboardButton(f"{EMOJI['info']} –û —Å–µ—Ä–≤–∏—Å–µ", callback_data="about_service"))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    balance = user_stats.get('balance_rub', 0)
    days = user_stats.get('days_remaining', 0)
    
    if user_info:
        welcome_text = f"""
{EMOJI['user']} <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name}!</b>

<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>
‚îú ID: {user_id}
‚îú Username: @{username}
‚îú –ë–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ (‚âà {days} –¥–Ω.)
‚îî –ü–æ–¥–ø–∏—Å–æ–∫: 1

{EMOJI['rocket']} <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>
"""
    elif is_new_user:
        welcome_text = f"""
{EMOJI['user']} <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name}!</b>

{EMOJI['gift']} <b>–ü–æ–¥–∞—Ä–æ–∫ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!</b>
–í—ã –ø–æ–ª—É—á–∏–ª–∏ 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ VPN

<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>
‚îú ID: {user_id}
‚îú Username: @{username}
‚îú –ë–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ (‚âà {days} –¥–Ω.)
‚îî –ü–æ–¥–ø–∏—Å–æ–∫: 0

{EMOJI['rocket']} <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>
"""
    else:
        welcome_text = f"""
{EMOJI['user']} <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name}!</b>

<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>
‚îú ID: {user_id}
‚îú Username: @{username}
‚îú –ë–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ (‚âà {days} –¥–Ω.)
‚îî –ü–æ–¥–ø–∏—Å–æ–∫: 0

{EMOJI['rocket']} <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>
"""
    
    try:
        bot.edit_message_text(
            welcome_text,
            message.chat.id,
            message.message_id,
            parse_mode='HTML',
            reply_markup=keyboard
        )
    except Exception:
        bot.send_message(
            message.chat.id,
            welcome_text,
            parse_mode='HTML',
            reply_markup=keyboard
        )

# –î–æ–±–∞–≤–ª—é –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏...

@handle_error("show_balance_menu", "general")
def show_balance_menu(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –±–∞–ª–∞–Ω—Å–∞"""
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    
    keyboard.add(
        types.InlineKeyboardButton(f"{EMOJI['payment']} –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="top_up_balance"),
        types.InlineKeyboardButton(f"{EMOJI['history']} –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", callback_data="payment_history"),
        types.InlineKeyboardButton(f"{EMOJI['coupon']} –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫—É–ø–æ–Ω", callback_data="activate_coupon"),
        types.InlineKeyboardButton(f"{EMOJI['back']} –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="back_to_main")
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    user_stats = user_service.get_user_stats(message.from_user.id)
    balance = user_stats.get('balance_rub', 0)
    days = user_stats.get('days_remaining', 0)
    
    text = f"""
{EMOJI['balance']} <b>–ë–∞–ª–∞–Ω—Å:</b> {balance} ‚ÇΩ  (‚âà {days} –¥–Ω.)

{EMOJI['info']} <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>

{EMOJI['payment']} <b>–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</b> ‚Äî –î–æ–±–∞–≤–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ —Å—á–µ—Ç
{EMOJI['history']} <b>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b> ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
{EMOJI['coupon']} <b>–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫—É–ø–æ–Ω</b> ‚Äî –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥
"""
    
    bot.edit_message_text(
        text,
        message.chat.id,
        message.message_id,
        parse_mode='HTML',
        reply_markup=keyboard
    )

@handle_error("show_invite_menu", "general")
def show_invite_menu(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π —Å QR-–∫–æ–¥–æ–º"""
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    
    ref_user_id = message.from_user.id
    share_link = f"https://t.me/{bot.get_me().username}?start=ref_{ref_user_id}"
    
    keyboard.add(
        types.InlineKeyboardButton(f"{EMOJI['share']} –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", url=f"https://t.me/share/url?url={share_link}&text=–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ YoVPN!"),
        types.InlineKeyboardButton(f"{EMOJI['qr']} –ü–æ–∫–∞–∑–∞—Ç—å QR-–∫–æ–¥", callback_data="show_qr"),
        types.InlineKeyboardButton(f"{EMOJI['back']} –ù–∞–∑–∞–¥", callback_data="back_to_main")
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    user_stats = user_service.get_user_stats(ref_user_id)
    ref_count = user_stats.get('referrals_count', 0)
    income = user_stats.get('referral_income', 0)
    
    text = f"""
{EMOJI['referral']} <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>

{EMOJI['info']} <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {ref_count} —á–µ–ª–æ–≤–µ–∫(–∞)
‚Ä¢ –î–æ—Ö–æ–¥ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {income} ‚ÇΩ (10 ‚ÇΩ + 2 ‚ÇΩ –±–æ–Ω—É—Å/—á–µ–ª)

{EMOJI['link']} <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>
{share_link}
"""
    
    bot.edit_message_text(
        text,
        message.chat.id,
        message.message_id,
        parse_mode='HTML',
        reply_markup=keyboard
    )

@handle_error("show_qr_code", "general")
def show_qr_code(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å QR-–∫–æ–¥ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(f"{EMOJI['back']} –ù–∞–∑–∞–¥", callback_data="invite_friend"))
    
    ref_user_id = message.from_user.id
    share_link = f"https://t.me/{bot.get_me().username}?start=ref_{ref_user_id}"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
    qr_code = qr_generator.generate_referral_qr(share_link)
    
    if qr_code:
        try:
            bot.send_photo(
                message.chat.id,
                photo=qr_code,
                caption=f"{EMOJI['qr']} <b>QR-–∫–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏</b>\n\n{EMOJI['info']} –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ",
                parse_mode='HTML',
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ QR-–∫–æ–¥–∞: {e}")
            bot.send_message(
                message.chat.id,
                f"{EMOJI['qr']} <b>QR-–∫–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏</b>\n\n{EMOJI['link']} <b>–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:</b>\n<code>{share_link}</code>",
                parse_mode='HTML',
                reply_markup=keyboard
            )
    else:
        bot.send_message(
            message.chat.id,
            f"{EMOJI['qr']} <b>QR-–∫–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏</b>\n\n{EMOJI['link']} <b>–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:</b>\n<code>{share_link}</code>",
            parse_mode='HTML',
            reply_markup=keyboard
        )

# –î–æ–±–∞–≤–ª—é –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏...

@handle_error("show_about_service", "general")
def show_about_service(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–µ"""
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    
    keyboard.add(
        types.InlineKeyboardButton(f"{EMOJI['support']} –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support_chat"),
        types.InlineKeyboardButton(f"{EMOJI['channel']} –ö–∞–Ω–∞–ª", callback_data="channel_link"),
        types.InlineKeyboardButton(f"{EMOJI['back']} –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="back_to_main")
    )
    
    text = f"""
{EMOJI['info']} <b>–û —Å–µ—Ä–≤–∏—Å–µ</b>

<b>–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>
‚Ä¢ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
‚Ä¢ –í–æ–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ü–æ–ª–Ω–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ª–æ–≥–æ–≤
‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ 24/7
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤

{EMOJI['device']} <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:</b>
‚Ä¢ Windows, macOS, Linux
‚Ä¢ iOS, Android
‚Ä¢ Router, Smart TV

{EMOJI['security']} <b>–ü—Ä–æ—Ç–æ–∫–æ–ª—ã:</b>
‚Ä¢ V2Ray, Clash, Sing-box
‚Ä¢ Outline, Shadowsocks
‚Ä¢ WireGuard, OpenVPN

{EMOJI['support']} <b>–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @icewhipe
{EMOJI['channel']} <b>–ö–∞–Ω–∞–ª:</b> @yodevelop
"""
    
    bot.edit_message_text(
        text,
        message.chat.id,
        message.message_id,
        parse_mode='HTML',
        reply_markup=keyboard
    )

# –î–æ–±–∞–≤–ª—é –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∑–∞–≥–ª—É—à–∫–∞–º–∏...

@handle_error("show_subscription_options", "general")
def show_subscription_options(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–æ–∫"""
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    
    keyboard.add(
        types.InlineKeyboardButton(f"{EMOJI['subscription']} 1 –º–µ—Å—è—Ü - 109 ‚ÇΩ", callback_data="subscribe_1"),
        types.InlineKeyboardButton(f"{EMOJI['subscription']} 3 –º–µ—Å—è—Ü–∞ - 319 ‚ÇΩ", callback_data="subscribe_3"),
        types.InlineKeyboardButton(f"{EMOJI['subscription']} 6 –º–µ—Å—è—Ü–µ–≤ - 628 ‚ÇΩ", callback_data="subscribe_6"),
        types.InlineKeyboardButton(f"{EMOJI['subscription']} 12 –º–µ—Å—è—Ü–µ–≤ - 999 ‚ÇΩ", callback_data="subscribe_12"),
        types.InlineKeyboardButton(f"{EMOJI['back']} –ù–∞–∑–∞–¥", callback_data="back_to_main")
    )
    
    text = f"""
{EMOJI['subscription']} <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:</b>

<b>1 –º–µ—Å—è—Ü</b> - 109 ‚ÇΩ
<b>3 –º–µ—Å—è—Ü–∞</b> - 319 ‚ÇΩ (—Å–∫–∏–¥–∫–∞ 3%)
<b>6 –º–µ—Å—è—Ü–µ–≤</b> - 628 ‚ÇΩ (—Å–∫–∏–¥–∫–∞ 4%)
<b>12 –º–µ—Å—è—Ü–µ–≤</b> - 999 ‚ÇΩ (—Å–∫–∏–¥–∫–∞ 24%)

{EMOJI['device']} <b>–õ–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤:</b> 3
{EMOJI['speed']} <b>–°–∫–æ—Ä–æ—Å—Ç—å:</b> –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
{EMOJI['security']} <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b> –í–æ–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
{EMOJI['no_logs']} <b>–õ–æ–≥–∏:</b> –ù–µ –≤–µ–¥–µ–º
"""
    
    bot.edit_message_text(
        text,
        message.chat.id,
        message.message_id,
        parse_mode='HTML',
        reply_markup=keyboard
    )

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
def show_my_subscriptions(message):
    bot.send_message(message.chat.id, f"{EMOJI['subscription']} <b>–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n{EMOJI['warning']} –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

def get_test_period(message, username):
    bot.send_message(message.chat.id, f"{EMOJI['gift']} <b>–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥</b>\n\n{EMOJI['warning']} –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

def show_referrals_menu(message):
    bot.send_message(message.chat.id, f"{EMOJI['referral']} <b>–ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã</b>\n\n{EMOJI['warning']} –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

def handle_subscription_purchase(message, callback_data):
    bot.send_message(message.chat.id, f"{EMOJI['payment']} <b>–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n{EMOJI['warning']} –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞")

def show_payment_options(message):
    bot.send_message(message.chat.id, f"{EMOJI['payment']} <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n{EMOJI['warning']} –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞")

def show_payment_history(message):
    bot.send_message(message.chat.id, f"{EMOJI['history']} <b>–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π</b>\n\n{EMOJI['warning']} –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

def activate_coupon(message):
    bot.send_message(message.chat.id, f"{EMOJI['coupon']} <b>–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫—É–ø–æ–Ω–∞</b>\n\n{EMOJI['warning']} –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

def share_referral_link(message):
    bot.send_message(message.chat.id, f"{EMOJI['share']} <b>–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π</b>\n\n{EMOJI['warning']} –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

def show_support_chat(message):
    bot.send_message(message.chat.id, f"{EMOJI['support']} <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n{EMOJI['info']} –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏: @icewhipe")

def show_channel_link(message):
    bot.send_message(message.chat.id, f"{EMOJI['channel']} <b>–ù–∞—à –∫–∞–Ω–∞–ª</b>\n\n{EMOJI['info']} –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å: @yodevelop")

def show_setup_step1(message):
    bot.send_message(message.chat.id, f"{EMOJI['settings']} <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ VPN</b>\n\n{EMOJI['warning']} –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

def show_setup_step2(message, device_key):
    bot.send_message(message.chat.id, f"{EMOJI['settings']} <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è {device_key}</b>\n\n{EMOJI['warning']} –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

def continue_setup_flow(message):
    bot.send_message(message.chat.id, f"{EMOJI['settings']} <b>–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n{EMOJI['warning']} –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

def finish_setup(message):
    bot.send_message(message.chat.id, f"{EMOJI['check']} <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n{EMOJI['info']} –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")

def show_qr_key(message):
    bot.send_message(message.chat.id, f"{EMOJI['qr']} <b>QR-–∫–æ–¥ –∫–ª—é—á–∞</b>\n\n{EMOJI['warning']} –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

def show_vpn_links(message, username):
    bot.send_message(message.chat.id, f"{EMOJI['link']} <b>VPN —Å—Å—ã–ª–∫–∏</b>\n\n{EMOJI['warning']} –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

def show_vless_links(message, username):
    bot.send_message(message.chat.id, f"{EMOJI['link']} <b>VLESS —Å—Å—ã–ª–∫–∏</b>\n\n{EMOJI['warning']} –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

def show_subscription_link(message, username):
    bot.send_message(message.chat.id, f"{EMOJI['link']} <b>–°—Å—ã–ª–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n{EMOJI['warning']} –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

def copy_vless_link(message, callback_data):
    bot.send_message(message.chat.id, f"{EMOJI['link']} <b>–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏</b>\n\n{EMOJI['warning']} –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

def get_vless_configs(message, username):
    bot.send_message(message.chat.id, f"{EMOJI['link']} <b>VLESS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</b>\n\n{EMOJI['warning']} –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Marzban API
    if not marzban_service.health_check():
        logger.warning("Marzban API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –±–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É")
    
    # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
    max_retries = 3
    retry_count = 0
    
    while retry_count < max_retries:
        try:
            bot.polling(none_stop=True)
            break
        except Exception as e:
            if "Conflict: terminated by other getUpdates request" in str(e):
                retry_count += 1
                logger.warning(f"–î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ü–æ–ø—ã—Ç–∫–∞ {retry_count}/{max_retries}")
                if retry_count < max_retries:
                    time.sleep(10)
                else:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")
                    sys.exit(1)
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
                sys.exit(1)