"""
Middleware –¥–ª—è rate limiting
–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import logging
from typing import Callable, Dict, Any, Awaitable
from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery

logger = logging.getLogger(__name__)

class RateLimitMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç SecurityService –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ rate limits
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è middleware"""
        super().__init__()
    
    async def __call__(
        self,
        handler: Callable[[Message | CallbackQuery, Dict[str, Any]], Awaitable[Any]],
        event: Message | CallbackQuery,
        data: Dict[str, Any]
    ) -> Any:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ middleware
        
        Args:
            handler: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
            event: –°–æ–±—ã—Ç–∏–µ (Message –∏–ª–∏ CallbackQuery)
            data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        
        Returns:
            Any: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        user_id = event.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        services = data.get("services")
        
        if not services:
            logger.warning("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ middleware")
            return await handler(event, data)
        
        # –ü–æ–ª—É—á–∞–µ–º SecurityService
        security_service = services.get_security_service()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
        allowed, error_message = security_service.check_rate_limit(user_id)
        
        if not allowed:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            if isinstance(event, Message):
                await event.reply(error_message)
            elif isinstance(event, CallbackQuery):
                await event.answer(error_message, show_alert=True)
            
            logger.warning(f"üö´ Rate limit –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {error_message}")
            return
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        return await handler(event, data)
