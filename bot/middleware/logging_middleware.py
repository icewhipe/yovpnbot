"""
Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
"""

import logging
import time
from typing import Callable, Dict, Any, Awaitable
from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery

logger = logging.getLogger(__name__)

class LoggingMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    
    –õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ callback –∑–∞–ø—Ä–æ—Å—ã
    """
    
    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message | CallbackQuery,
        data: Dict[str, Any]
    ) -> Any:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ middleware
        
        Args:
            handler: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
            event: –°–æ–±—ã—Ç–∏–µ (Message –∏–ª–∏ CallbackQuery)
            data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        
        Returns:
            Any: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        start_time = time.time()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_id = event.from_user.id
        username = event.from_user.username
        first_name = event.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
        if isinstance(event, Message):
            logger.info(
                f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {first_name} (@{username}): {event.text[:50]}..."
                if event.text else f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {first_name} (@{username}): [–º–µ–¥–∏–∞]"
            )
        elif isinstance(event, CallbackQuery):
            logger.info(
                f"üîò Callback –æ—Ç {first_name} (@{username}): {event.data}"
            )
        
        try:
            # –í—ã–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            result = await handler(event, data)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_time = time.time() - start_time
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            logger.info(
                f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ {processing_time:.3f}s: {first_name} (@{username})"
            )
            
            return result
            
        except Exception as e:
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏
            processing_time = time.time() - start_time
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –∑–∞ {processing_time:.3f}s: {first_name} (@{username}): {e}"
            )
            
            # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
            raise