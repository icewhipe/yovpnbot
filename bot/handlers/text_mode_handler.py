"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –±–æ—Ç–∞
–†–µ–∞–ª–∏–∑—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–µ–∑ WebApp
"""

import asyncio
import logging
from aiogram import Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import Optional

logger = logging.getLogger(__name__)


class ActivationStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    waiting_for_platform = State()
    waiting_for_app_install = State()
    waiting_for_config = State()


class TextModeHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    
    def __init__(self, services):
        self.services = services
        self.user_service = services.get_user_service()
        self.marzban_service = services.get_marzban_service()
        self.animation_service = services.get_animation_service()
        
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞
        self.support_username = "@yovpnsupbot"
        self.required_channel = "@yodevelop"
    
    async def check_channel_subscription(self, user_id: int, bot) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
        try:
            member = await bot.get_chat_member(chat_id=self.required_channel, user_id=user_id)
            return member.status in ['member', 'administrator', 'creator']
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False
    
    async def send_subscription_required(self, message: Message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{self.required_channel[1:]}")],
            [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")]
        ])
        
        text = (
            "‚ö†Ô∏è <b>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</b>\n\n"
            f"–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª {self.required_channel}\n\n"
            "üì¢ –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>\"–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è\"</b>"
        )
        
        await message.answer(text, reply_markup=keyboard)
    
    async def start_command(self, message: Message, state: FSMContext):
        """
        –ö–æ–º–∞–Ω–¥–∞ /start —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
        
        –õ–æ–≥–∏–∫–∞:
        1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
        2. –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        3. –í—ã–¥–∞—á–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ (3 –¥–Ω—è = 12 —Ä—É–±)
        4. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ MySQL
        5. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        """
        user_id = message.from_user.id
        username = message.from_user.username
        first_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
        is_subscribed = await self.check_channel_subscription(user_id, message.bot)
        
        if not is_subscribed:
            await self.send_subscription_required(message)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await self.user_service.get_user(user_id)
        is_new_user = user is None
        
        if is_new_user:
            # –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            loading_msg = await message.answer("üîÑ <b>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...</b>")
            
            for text in [
                "‚öôÔ∏è <b>–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞...</b>",
                "üíé <b>–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞...</b>",
                "üõ∞Ô∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...</b>",
                "‚ú® <b>–ì–æ—Ç–æ–≤–æ!</b>"
            ]:
                await asyncio.sleep(0.7)
                await loading_msg.edit_text(text)
            
            await asyncio.sleep(0.5)
            await loading_msg.delete()
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–æ–Ω—É—Å–æ–º
            user = await self.user_service.create_or_update_user(
                user_id=user_id,
                username=username,
                first_name=first_name
            )
            
            # –ù–∞—á–∏—Å–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å (3 –¥–Ω—è = 12 —Ä—É–±)
            await self.user_service.add_balance(
                user_id=user_id,
                amount=12.0,
                description="üéÅ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å"
            )
            
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_text = (
                f"üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name}!</b>\n\n"
                "üíé –í—ã –ø–æ–ª—É—á–∏–ª–∏ <b>–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å</b>:\n"
                "   ‚Ä¢ <b>12 —Ä—É–±–ª–µ–π</b> –Ω–∞ –±–∞–ª–∞–Ω—Å–µ\n"
                "   ‚Ä¢ <b>3 –¥–Ω—è</b> –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ VPN\n\n"
                "üöÄ <b>–ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>\n"
                "–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ 3 –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–∞:\n"
                "   1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É\n"
                "   2Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
                "   3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n\n"
                "üí° –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ <b>1 –¥–µ–Ω—å VPN</b> –∑–∞ –∫–∞–∂–¥–æ–≥–æ!"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üöÄ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å VPN", callback_data="activate_start")],
                [InlineKeyboardButton(text="üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", callback_data="referral")]
            ])
            
            await message.answer(welcome_text, reply_markup=keyboard)
            
            logger.info(f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {first_name} (ID: {user_id})")
        
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.user_service.update_user(
                user_id=user_id,
                username=username,
                first_name=first_name
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            balance = user.get('balance', 0.0)
            subscription_days = balance // 4  # 4 —Ä—É–± = 1 –¥–µ–Ω—å
            
            welcome_text = (
                f"üëã <b>–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {first_name}!</b>\n\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{balance:.2f} ‚ÇΩ</b>\n"
                f"üìÖ –î–æ—Å—Ç—É–ø–Ω–æ –¥–Ω–µ–π: <b>{subscription_days}</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìä –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data="my_subscription")],
                [InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="add_balance")],
                [InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referral")],
                [InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"https://t.me/{self.support_username[1:]}")],
            ])
            
            await message.answer(welcome_text, reply_markup=keyboard)
    
    async def activate_start_callback(self, callback: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ VPN - –≤—ã–±–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì± iOS (iPhone/iPad)", callback_data="platform_ios")],
            [InlineKeyboardButton(text="ü§ñ Android", callback_data="platform_android")],
            [InlineKeyboardButton(text="üíª Windows", callback_data="platform_windows")],
            [InlineKeyboardButton(text="üçé macOS", callback_data="platform_macos")],
            [InlineKeyboardButton(text="üêß Linux", callback_data="platform_linux")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ])
        
        text = (
            "<b>üì± –®–∞–≥ 1/3: –í—ã–±–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É:"
        )
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await state.set_state(ActivationStates.waiting_for_platform)
    
    async def platform_selected_callback(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        platform = callback.data.replace("platform_", "")
        await state.update_data(platform=platform)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –≤ –ë–î
        await self.user_service.update_user(
            user_id=callback.from_user.id,
            selected_platform=platform,
            activation_step=1
        )
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º
        apps = {
            "ios": {
                "name": "Shadowrocket",
                "url": "https://apps.apple.com/app/shadowrocket/id932747118",
                "alt": ["V2Box", "Quantumult X"]
            },
            "android": {
                "name": "v2rayNG",
                "url": "https://play.google.com/store/apps/details?id=com.v2ray.ang",
                "alt": ["SagerNet", "Clash for Android"]
            },
            "windows": {
                "name": "v2rayN",
                "url": "https://github.com/2dust/v2rayN/releases",
                "alt": ["Clash for Windows", "Qv2ray"]
            },
            "macos": {
                "name": "V2RayXS",
                "url": "https://github.com/Cenmrev/V2RayXS/releases",
                "alt": ["ClashX", "V2RayU"]
            },
            "linux": {
                "name": "v2ray-core",
                "url": "https://github.com/v2fly/v2ray-core/releases",
                "alt": ["Qv2ray", "v2rayA"]
            }
        }
        
        app_info = apps.get(platform, apps["android"])
        
        text = (
            f"<b>‚úÖ –®–∞–≥ 2/3: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</b>\n\n"
            f"–î–ª—è <b>{platform.upper()}</b> —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º:\n\n"
            f"üì≤ <b>{app_info['name']}</b>\n"
            f"üîó {app_info['url']}\n\n"
            f"<i>–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã: {', '.join(app_info['alt'])}</i>\n\n"
            f"–ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ <b>\"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å\"</b>"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="app_installed")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await state.set_state(ActivationStates.waiting_for_app_install)
    
    async def app_installed_callback(self, callback: CallbackQuery, state: FSMContext):
        """–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        user_id = callback.from_user.id
        username = callback.from_user.username or f"user_{user_id}"
        
        data = await state.get_data()
        platform = data.get('platform', 'android')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        await self.user_service.update_user(
            user_id=user_id,
            activation_step=2
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ Marzban API
        loading_msg = await callback.message.edit_text("‚öôÔ∏è <b>–°–æ–∑–¥–∞–Ω–∏–µ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...</b>")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 3 –¥–Ω—è (–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å)
            subscription = await self.marzban_service.create_subscription(
                username=username,
                telegram_id=user_id,
                days=3,
                data_limit=0  # –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫
            )
            
            if subscription:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –ë–î
                await self.user_service.create_subscription(
                    user_id=user_id,
                    marzban_username=username,
                    subscription_url=subscription.subscription_url,
                    days=3
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                await self.user_service.update_user(
                    user_id=user_id,
                    activation_step=3,
                    first_start_completed=True
                )
                
                text = (
                    "<b>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! VPN –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>\n\n"
                    f"‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞\n"
                    f"üìÖ –°—Ä–æ–∫: <b>3 –¥–Ω—è</b> (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)\n"
                    f"üåê –¢—Ä–∞—Ñ–∏–∫: <b>–ë–µ–∑–ª–∏–º–∏—Ç</b>\n\n"
                    f"<b>üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n"
                    f"1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ\n"
                    f"2. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ VPN\n"
                    f"3. –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É\n"
                    f"4. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å!\n\n"
                    f"<code>{subscription.subscription_url}</code>\n\n"
                    f"üí° <i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è</i>"
                )
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìä –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data="my_subscription")],
                    [InlineKeyboardButton(text="üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", callback_data="referral")],
                    [InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"https://t.me/{self.support_username[1:]}")],
                ])
                
                await loading_msg.edit_text(text, reply_markup=keyboard)
                await state.clear()
                
                logger.info(f"‚úÖ VPN –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è {username} (ID: {user_id})")
            
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ VPN: {e}")
            
            text = (
                "‚ùå <b>–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.\n"
                f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {self.support_username}"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="activate_start")],
                [InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"https://t.me/{self.support_username[1:]}")],
            ])
            
            await loading_msg.edit_text(text, reply_markup=keyboard)
            await state.clear()
    
    async def my_subscription_callback(self, callback: CallbackQuery):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
        subscription = await self.user_service.get_active_subscription(user_id)
        balance = await self.user_service.get_balance(user_id)
        
        if subscription:
            days_left = (subscription['end_date'] - datetime.now()).days if subscription.get('end_date') else 0
            
            text = (
                "<b>üìä –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
                f"‚úÖ –°—Ç–∞—Ç—É—Å: <b>–ê–∫—Ç–∏–≤–Ω–∞</b>\n"
                f"üìÖ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: <b>{days_left}</b>\n"
                f"üåê –¢—Ä–∞—Ñ–∏–∫: <b>–ë–µ–∑–ª–∏–º–∏—Ç</b>\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{balance:.2f} ‚ÇΩ</b>\n\n"
                f"<b>–í–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b>\n"
                f"<code>{subscription['subscription_url']}</code>"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å", callback_data="add_balance")],
                [InlineKeyboardButton(text="üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", callback_data="referral")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ])
        else:
            text = (
                "<b>üìä –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞</b>\n\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{balance:.2f} ‚ÇΩ</b>\n\n"
                "–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ VPN –∏–ª–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üöÄ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data="activate_start")],
                [InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="add_balance")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
    
    async def unknown_command_handler(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        text = (
            "‚ùì <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞</b>\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "‚Ä¢ /sub - –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞\n"
            "‚Ä¢ /invite - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n\n"
            f"–ò–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {self.support_username}"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")],
            [InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"https://t.me/{self.support_username[1:]}")],
        ])
        
        await message.answer(text, reply_markup=keyboard)
    
    def register_handlers(self, dp: Dispatcher):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –ö–æ–º–∞–Ω–¥—ã
        dp.message.register(self.start_command, CommandStart())
        dp.message.register(self.unknown_command_handler, F.text & ~F.text.startswith('/start'))
        
        # Callbacks
        dp.callback_query.register(self.activate_start_callback, F.data == "activate_start")
        dp.callback_query.register(self.platform_selected_callback, F.data.startswith("platform_"))
        dp.callback_query.register(self.app_installed_callback, F.data == "app_installed")
        dp.callback_query.register(self.my_subscription_callback, F.data == "my_subscription")
        
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
