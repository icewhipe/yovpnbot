"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –±–∞–ª–∞–Ω—Å–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
"""

import logging
from aiogram import Dispatcher
from aiogram.types import CallbackQuery, Message
from aiogram import F

from assets.emojis.interface import EMOJI, format_balance

logger = logging.getLogger(__name__)

async def handle_top_up(callback: CallbackQuery, **kwargs):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ø–æ–ª–Ω–∏—Ç—å"
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ü–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    """
    user_id = callback.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –∏–∑ middleware
        services = kwargs.get("services")
        if not services:
            await callback.answer("‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", show_alert=True)
            return
        
        user_service = services.get_user_service()
        ui_service = services.get_ui_service()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        balance = await user_service.get_user_balance(user_id)
        
        message_text = f"""
üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>

üí∞ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {format_balance(balance)}
üìÖ <b>–î–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞:</b> {int(balance / 4)} –¥–Ω–µ–π

<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º:</b> 120 ‚ÇΩ –∑–∞ 30 –¥–Ω–µ–π
üîÑ <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ:</b> –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ
‚ö° <b>–ê–∫—Ç–∏–≤–∞—Ü–∏—è:</b> –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è
        """
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å—É–º–º–∞–º–∏
        keyboard = ui_service.create_payment_keyboard([40, 80, 120, 200, 400])
        
        await callback.message.edit_text(
            message_text,
            reply_markup=keyboard
        )
        
        await callback.answer()
        logger.info(f"üí≥ –ü–æ–∫–∞–∑–∞–Ω—ã –æ–ø—Ü–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_top_up: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

async def handle_payment_amount(callback: CallbackQuery, **kwargs):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞
    
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback —Å —Å—É–º–º–æ–π –ø–ª–∞—Ç–µ–∂–∞ (pay_40, pay_80, etc.)
    """
    user_id = callback.from_user.id
    callback_data = callback.data
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –∏–∑ callback_data (pay_40 -> 40)
        amount = float(callback_data.replace("pay_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        services = kwargs.get("services")
        if not services:
            await callback.answer("‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", show_alert=True)
            return
        
        ui_service = services.get_ui_service()
        payment_service = services.get_payment_service()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø—Ü–∏—è–º–∏ –ø–ª–∞—Ç–µ–∂–∞
        message_text = ui_service.format_payment_options(amount)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
        keyboard = ui_service.create_payment_methods_keyboard()
        
        await callback.message.edit_text(
            message_text,
            reply_markup=keyboard
        )
        
        await callback.answer()
        logger.info(f"üí∞ –í—ã–±—Ä–∞–Ω–∞ —Å—É–º–º–∞ {amount} ‚ÇΩ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_payment_amount: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

async def handle_payment_method(callback: CallbackQuery, **kwargs):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã (pay_method_card, etc.)
    """
    user_id = callback.from_user.id
    callback_data = callback.data
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–∑ callback_data
        method = callback_data.replace("pay_method_", "")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        services = kwargs.get("services")
        if not services:
            await callback.answer("‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", show_alert=True)
            return
        
        payment_service = services.get_payment_service()
        animation_service = services.get_animation_service()
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-—Ä–µ–∂–∏–º
        if method == "demo":
            # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
            amount = 120.0  # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
            result = await payment_service.process_payment(
                user_id=user_id,
                amount=amount,
                payment_method="demo"
            )
            
            if result['success']:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º
                await animation_service.send_payment_success(
                    callback.message,
                    result['amount'],
                    result['days_added']
                )
                
                logger.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {result['amount']} ‚ÇΩ")
            else:
                await callback.answer(
                    f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {result['error']}",
                    show_alert=True
                )
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
            message_text = f"""
üöß <b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>

<b>–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–±:</b> {method.title()}
üìÖ <b>–°—Ç–∞—Ç—É—Å:</b> –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã:</b>
‚Ä¢ üí≥ –î–µ–º–æ-—Ä–µ–∂–∏–º (—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
‚Ä¢ üîÑ –ê–≤—Ç–æ–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (—Å–∫–æ—Ä–æ)

<b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ–º–æ-—Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
            """
            
            from bot.services.ui_service import UIService
            ui_service = UIService()
            keyboard = ui_service.create_back_keyboard("top_up")
            
            await callback.message.edit_text(
                message_text,
                reply_markup=keyboard
            )
            
            await callback.answer()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_payment_method: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

async def handle_my_balance(callback: CallbackQuery, **kwargs):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–π –±–∞–ª–∞–Ω—Å"
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ
    """
    user_id = callback.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        services = kwargs.get("services")
        if not services:
            await callback.answer("‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", show_alert=True)
            return
        
        user_service = services.get_user_service()
        ui_service = services.get_ui_service()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_service.get_user(user_id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        balance = user.get('balance', 0.0)
        total_payments = user.get('total_payments', 0.0)
        days = int(balance / 4)
        
        message_text = f"""
üí∞ <b>–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ</b>

üíµ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {format_balance(balance)}
üìÖ <b>–î–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞:</b> {days} –¥–Ω–µ–π
üí≥ <b>–í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ:</b> {total_payments:.2f} ‚ÇΩ
üîÑ <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> –°–µ–π—á–∞—Å

<b>–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:</b>
‚Ä¢ 1 –¥–µ–Ω—å = 4 ‚ÇΩ
‚Ä¢ 7 –¥–Ω–µ–π = 28 ‚ÇΩ
‚Ä¢ 30 –¥–Ω–µ–π = 120 ‚ÇΩ
‚Ä¢ 365 –¥–Ω–µ–π = 1460 ‚ÇΩ

<b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ:</b>
‚Ä¢ –°–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 24 —á–∞—Å–∞ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è
‚Ä¢ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤
        """
        
        keyboard = ui_service.create_back_keyboard("main_menu")
        
        await callback.message.edit_text(
            message_text,
            reply_markup=keyboard
        )
        
        await callback.answer()
        logger.info(f"üí∞ –ü–æ–∫–∞–∑–∞–Ω –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_my_balance: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

def register_payment_handler(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π
    
    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä –±–æ—Ç–∞
    """
    dp.callback_query.register(handle_top_up, F.data == "top_up")
    dp.callback_query.register(handle_my_balance, F.data == "my_balance")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—É–º–º –ø–ª–∞—Ç–µ–∂–µ–π
    for amount in [40, 80, 120, 200, 400]:
        dp.callback_query.register(handle_payment_amount, F.data == f"pay_{amount}")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
    for method in ["card", "yoomoney", "crypto", "demo"]:
        dp.callback_query.register(handle_payment_method, F.data == f"pay_method_{method}")
    
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")