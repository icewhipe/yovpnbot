"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
"""

import logging
from aiogram import Dispatcher
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Text

from assets.emojis.interface import EMOJI

logger = logging.getLogger(__name__)

async def handle_settings(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = callback.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        services = callback.bot.get("services")
        if not services:
            await callback.answer("‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", show_alert=True)
            return
        
        user_service = services.get_user_service()
        ui_service = services.get_ui_service()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_service.get_user(user_id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        settings = user.get('settings', {})
        notifications = settings.get('notifications', True)
        auto_renewal = settings.get('auto_renewal', True)
        
        message_text = f"""
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>

üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> {'–í–∫–ª—é—á–µ–Ω—ã' if notifications else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}
üîÑ <b>–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ:</b> {'–í–∫–ª—é—á–µ–Ω–æ' if auto_renewal else '–û—Ç–∫–ª—é—á–µ–Ω–æ'}
üåê <b>–Ø–∑—ã–∫:</b> –†—É—Å—Å–∫–∏–π
üì± <b>–í–µ—Ä—Å–∏—è –±–æ—Ç–∞:</b> 2.0.0

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
‚Ä¢ üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
‚Ä¢ ‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
‚Ä¢ üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞

<b>üí° –°–æ–≤–µ—Ç:</b> –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ—Å—Ç–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        
        keyboard = ui_service.create_settings_keyboard()
        
        await callback.message.edit_text(
            message_text,
            reply_markup=keyboard
        )
        
        await callback.answer()
        logger.info(f"‚öôÔ∏è –ü–æ–∫–∞–∑–∞–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_settings: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

async def handle_settings_notifications(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    
    –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = callback.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        services = callback.bot.get("services")
        if not services:
            await callback.answer("‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", show_alert=True)
            return
        
        user_service = services.get_user_service()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_service.get_user(user_id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        settings = user.get('settings', {})
        current_notifications = settings.get('notifications', True)
        new_notifications = not current_notifications
        
        settings['notifications'] = new_notifications
        user['settings'] = settings
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        user_service._save_users()
        
        status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if new_notifications else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
        emoji = EMOJI['notification'] if new_notifications else EMOJI['cross']
        
        await callback.answer(
            f"{emoji} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status_text}",
            show_alert=True
        )
        
        logger.info(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status_text} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_settings_notifications: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

async def handle_settings_auto_renewal(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
    
    –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    """
    user_id = callback.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        services = callback.bot.get("services")
        if not services:
            await callback.answer("‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", show_alert=True)
            return
        
        user_service = services.get_user_service()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_service.get_user(user_id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ
        settings = user.get('settings', {})
        current_auto_renewal = settings.get('auto_renewal', True)
        new_auto_renewal = not current_auto_renewal
        
        settings['auto_renewal'] = new_auto_renewal
        user['settings'] = settings
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        user_service._save_users()
        
        status_text = "–≤–∫–ª—é—á–µ–Ω–æ" if new_auto_renewal else "–æ—Ç–∫–ª—é—á–µ–Ω–æ"
        emoji = EMOJI['refresh'] if new_auto_renewal else EMOJI['cross']
        
        await callback.answer(
            f"{emoji} –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ {status_text}",
            show_alert=True
        )
        
        logger.info(f"üîÑ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ {status_text} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_settings_auto_renewal: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

async def handle_about_bot(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û –±–æ—Ç–µ"
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    """
    try:
        message_text = f"""
‚ÑπÔ∏è <b>–û –±–æ—Ç–µ YoVPN</b>

<b>–í–µ—Ä—Å–∏—è:</b> 2.0.0
<b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b> YoVPN Team
<b>–Ø–∑—ã–∫:</b> Python 3.8+
<b>–§—Ä–µ–π–º–≤–æ—Ä–∫:</b> aiogram 3.x

<b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ üîí –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π VPN-–¥–æ—Å—Ç—É–ø
‚Ä¢ üí∞ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ–ø–ª–∞—Ç–∞ (4 ‚ÇΩ/–¥–µ–Ω—å)
‚Ä¢ ‚ö° –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
‚Ä¢ üõ°Ô∏è –ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å
‚Ä¢ üì± –ü—Ä–æ—Å—Ç–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
‚Ä¢ üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ

<b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b>
‚Ä¢ Marzban API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VPN
‚Ä¢ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π UX/UI –¥–∏–∑–∞–π–Ω
‚Ä¢ –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
‚Ä¢ üìû –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7
‚Ä¢ üìß Email: support@yovpn.com
‚Ä¢ üí¨ Telegram: @YoVPNSupport

<b>–õ–∏—Ü–µ–Ω–∑–∏—è:</b> MIT
<b>–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥:</b> GitHub
        """
        
        from bot.services.ui_service import UIService
        ui_service = UIService()
        keyboard = ui_service.create_back_keyboard("settings")
        
        await callback.message.edit_text(
            message_text,
            reply_markup=keyboard
        )
        
        await callback.answer()
        logger.info(f"‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_about_bot: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

def register_settings_handler(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    
    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä –±–æ—Ç–∞
    """
    dp.callback_query.register(handle_settings, Text("settings"))
    dp.callback_query.register(handle_settings_notifications, Text("settings_notifications"))
    dp.callback_query.register(handle_settings_auto_renewal, Text("settings_auto_renewal"))
    dp.callback_query.register(handle_about_bot, Text("about_bot"))
    
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")