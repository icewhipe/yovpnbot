"""
–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è YoVPN Bot
–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ID: 7610842643
"""

import logging
import asyncio
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest

from ..services.user_service import UserService
from ..services.marzban_service import MarzbanService
from ..services.ui_service import UIService
from ..services.animation_service import AnimationService

logger = logging.getLogger(__name__)

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 7610842643

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
class AdminStates(StatesGroup):
    waiting_user_id = State()
    waiting_balance_amount = State()
    waiting_subscription_days = State()
    waiting_broadcast_message = State()
    waiting_test_balance_user = State()

# –†–æ—É—Ç–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥
admin_router = Router()

class ModernAdminPanel:
    """
    –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ID: 7610842643
    """
    
    def __init__(self, user_service: UserService, marzban_service: MarzbanService, 
                 ui_service: UIService, animation_service: AnimationService):
        self.user_service = user_service
        self.marzban_service = marzban_service
        self.ui_service = ui_service
        self.animation_service = animation_service
        self.admin_id = ADMIN_ID
        
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id == self.admin_id
    
    async def get_main_menu(self) -> InlineKeyboardMarkup:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º"""
        keyboard = [
            [
                InlineKeyboardButton(
                    text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                    callback_data="admin_stats"
                ),
                InlineKeyboardButton(
                    text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", 
                    callback_data="admin_users"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º", 
                    callback_data="admin_balance"
                ),
                InlineKeyboardButton(
                    text="üéÅ –¢–µ—Å—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å", 
                    callback_data="admin_test_balance"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏", 
                    callback_data="admin_subscriptions"
                ),
                InlineKeyboardButton(
                    text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", 
                    callback_data="admin_broadcast"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Marzban", 
                    callback_data="admin_marzban"
                ),
                InlineKeyboardButton(
                    text="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", 
                    callback_data="admin_analytics"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", 
                    callback_data="admin_security"
                ),
                InlineKeyboardButton(
                    text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", 
                    callback_data="admin_close"
                )
            ]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    async def get_stats_menu(self) -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º"""
        keyboard = [
            [
                InlineKeyboardButton(
                    text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                    callback_data="admin_stats_general"
                ),
                InlineKeyboardButton(
                    text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", 
                    callback_data="admin_stats_users"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üí∞ –§–∏–Ω–∞–Ω—Å—ã", 
                    callback_data="admin_stats_finance"
                ),
                InlineKeyboardButton(
                    text="üîß Marzban", 
                    callback_data="admin_stats_marzban"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                    callback_data="admin_back"
                )
            ]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    async def get_users_menu(self) -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        keyboard = [
            [
                InlineKeyboardButton(
                    text="üîç –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 
                    callback_data="admin_find_user"
                ),
                InlineKeyboardButton(
                    text="üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö", 
                    callback_data="admin_list_users"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üë• –ê–∫—Ç–∏–≤–Ω—ã–µ", 
                    callback_data="admin_active_users"
                ),
                InlineKeyboardButton(
                    text="üí∏ –° –±–∞–ª–∞–Ω—Å–æ–º", 
                    callback_data="admin_users_with_balance"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                    callback_data="admin_back"
                )
            ]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    async def get_balance_menu(self) -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–º"""
        keyboard = [
            [
                InlineKeyboardButton(
                    text="‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å", 
                    callback_data="admin_add_balance"
                ),
                InlineKeyboardButton(
                    text="‚ûñ –°–ø–∏—Å–∞—Ç—å", 
                    callback_data="admin_subtract_balance"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", 
                    callback_data="admin_set_balance"
                ),
                InlineKeyboardButton(
                    text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                    callback_data="admin_balance_stats"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                    callback_data="admin_back"
                )
            ]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    async def get_subscription_menu(self) -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""
        keyboard = [
            [
                InlineKeyboardButton(
                    text="‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", 
                    callback_data="admin_activate_subscription"
                ),
                InlineKeyboardButton(
                    text="‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", 
                    callback_data="admin_deactivate_subscription"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚è∞ –ü—Ä–æ–¥–ª–∏—Ç—å", 
                    callback_data="admin_extend_subscription"
                ),
                InlineKeyboardButton(
                    text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                    callback_data="admin_subscription_stats"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                    callback_data="admin_back"
                )
            ]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    async def get_general_stats(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            users = await self.user_service.get_all_users()
            total_users = len(users)
            
            active_subscriptions = sum(1 for user in users.values() if user.get('subscription_active', False))
            total_balance = sum(user.get('balance', 0) for user in users.values())
            total_payments = sum(user.get('total_payments', 0) for user in users.values())
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Marzban
            marzban_stats = await self.marzban_service.get_system_stats()
            marzban_status = "üü¢ –û–Ω–ª–∞–π–Ω" if self.marzban_service.is_available() else "üî¥ –û—Ñ–ª–∞–π–Ω"
            
            # –†–∞—Å—á–µ—Ç—ã
            activity_percent = (active_subscriptions/total_users*100) if total_users > 0 else 0
            avg_balance = (total_balance/total_users) if total_users > 0 else 0
            
            stats_text = f"""
üéØ <b>–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: <code>{total_users}</code>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: <code>{active_subscriptions}</code>
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: <code>{activity_percent:.1f}%</code>

üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>
‚Ä¢ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: <code>{total_balance:.2f} ‚ÇΩ</code>
‚Ä¢ –û–±—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏: <code>{total_payments:.2f} ‚ÇΩ</code>
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å: <code>{avg_balance:.2f} ‚ÇΩ</code>

üîß <b>Marzban:</b>
‚Ä¢ –°—Ç–∞—Ç—É—Å: {marzban_status}
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: <code>{marzban_stats.get('users', 'N/A')}</code>
‚Ä¢ –¢—Ä–∞—Ñ–∏–∫: <code>{marzban_stats.get('traffic', 'N/A')}</code>

üïê <b>–í—Ä–µ–º—è:</b> <code>{self.ui_service.get_current_time()}</code>
"""
            return stats_text
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b>\n<code>{e}</code>"
    
    async def get_user_stats(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user = await self.user_service.get_user(user_id)
            if not user:
                return f"‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID</b> <code>{user_id}</code> <b>–Ω–µ –Ω–∞–π–¥–µ–Ω</b>"
            
            stats = await self.user_service.get_user_stats(user_id)
            
            stats_text = f"""
üë§ <b>–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ #{user_id}</b>

üìù <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –ò–º—è: <code>{user.get('first_name', 'N/A')}</code>
‚Ä¢ Username: <code>@{user.get('username', 'N/A')}</code>
‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: <code>{user.get('referral_code', 'N/A')}</code>

üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>
‚Ä¢ –ë–∞–ª–∞–Ω—Å: <code>{stats.get('balance', 0):.2f} ‚ÇΩ</code>
‚Ä¢ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: <code>{stats.get('total_payments', 0):.2f} ‚ÇΩ</code>

üîß <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b>
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if stats.get('subscription_active') else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}
‚Ä¢ –î–Ω–µ–π: <code>{stats.get('subscription_days', 0)}</code>

üìä <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: <code>{stats.get('referrals_count', 0)}</code>
‚Ä¢ –°–æ–∑–¥–∞–Ω: <code>{stats.get('created_at', 'N/A')}</code>
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: <code>{stats.get('last_activity', 'N/A')}</code>
"""
            return stats_text
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n<code>{e}</code>"
    
    async def get_users_list(self, limit: int = 10) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            users = await self.user_service.get_all_users()
            
            if not users:
                return "üìã <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç</b>"
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
            sorted_users = sorted(users.values(), 
                                key=lambda x: x.get('created_at', ''), 
                                reverse=True)
            
            users_text = f"üìã <b>–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò</b> (–ø–æ–∫–∞–∑–∞–Ω–æ {min(limit, len(sorted_users))} –∏–∑ {len(users)})\n\n"
            
            for i, user in enumerate(sorted_users[:limit], 1):
                user_id = user.get('user_id', 'N/A')
                first_name = user.get('first_name', 'N/A')
                username = user.get('username', 'N/A')
                balance = user.get('balance', 0)
                subscription_active = user.get('subscription_active', False)
                
                status_emoji = "‚úÖ" if subscription_active else "‚ùå"
                username_text = f"@{username}" if username != 'N/A' else "–ë–µ–∑ username"
                
                users_text += f"<b>{i}.</b> <code>{first_name}</code> ({username_text})\n"
                users_text += f"   ID: <code>{user_id}</code> | –ë–∞–ª–∞–Ω—Å: <code>{balance:.2f} ‚ÇΩ</code> | –ü–æ–¥–ø–∏—Å–∫–∞: {status_emoji}\n\n"
            
            return users_text
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n<code>{e}</code>"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
admin_panel = None

def init_admin_panel(user_service: UserService, marzban_service: MarzbanService, 
                    ui_service: UIService, animation_service: AnimationService):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    global admin_panel
    admin_panel = ModernAdminPanel(user_service, marzban_service, ui_service, animation_service)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@admin_router.message(Command("admin"))
async def admin_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /admin - –æ—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    if not admin_panel or not admin_panel.is_admin(message.from_user.id):
        await message.reply("‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>")
        return
    
    keyboard = await admin_panel.get_main_menu()
    await message.reply(
        "üîß <b>–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨</b>\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è YoVPN Bot!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤
@admin_router.callback_query(F.data == "admin_stats")
async def admin_stats_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not admin_panel or not admin_panel.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    keyboard = await admin_panel.get_stats_menu()
    await callback.message.edit_text(
        "üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=keyboard
    )

@admin_router.callback_query(F.data == "admin_stats_general")
async def admin_stats_general_callback(callback: CallbackQuery):
    """–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    if not admin_panel or not admin_panel.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    stats_text = await admin_panel.get_general_stats()
    keyboard = await admin_panel.get_stats_menu()
    
    await callback.message.edit_text(
        stats_text,
        reply_markup=keyboard
    )

@admin_router.callback_query(F.data == "admin_users")
async def admin_users_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not admin_panel or not admin_panel.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    keyboard = await admin_panel.get_users_menu()
    await callback.message.edit_text(
        "üë• <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@admin_router.callback_query(F.data == "admin_list_users")
async def admin_list_users_callback(callback: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not admin_panel or not admin_panel.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    users_text = await admin_panel.get_users_list()
    keyboard = await admin_panel.get_users_menu()
    
    await callback.message.edit_text(
        users_text,
        reply_markup=keyboard
    )

@admin_router.callback_query(F.data == "admin_balance")
async def admin_balance_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞–ª–∞–Ω—Å–∞"""
    if not admin_panel or not admin_panel.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    keyboard = await admin_panel.get_balance_menu()
    await callback.message.edit_text(
        "üí∞ <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–û–ú</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@admin_router.callback_query(F.data == "admin_subscriptions")
async def admin_subscriptions_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–æ–∫"""
    if not admin_panel or not admin_panel.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    keyboard = await admin_panel.get_subscription_menu()
    await callback.message.edit_text(
        "üîß <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ü–ò–°–ö–ê–ú–ò</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@admin_router.callback_query(F.data == "admin_back")
async def admin_back_callback(callback: CallbackQuery):
    """–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    if not admin_panel or not admin_panel.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    keyboard = await admin_panel.get_main_menu()
    await callback.message.edit_text(
        "üîß <b>–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@admin_router.callback_query(F.data == "admin_close")
async def admin_close_callback(callback: CallbackQuery):
    """–ó–∞–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    await callback.message.delete()
    await callback.answer("‚úÖ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–º
@admin_router.callback_query(F.data == "admin_add_balance")
async def admin_add_balance_callback(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å"""
    if not admin_panel or not admin_panel.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    await state.set_state(AdminStates.waiting_user_id)
    await callback.message.edit_text(
        "üí∞ <b>–ü–û–ü–û–õ–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]
        ])
    )

@admin_router.message(StateFilter(AdminStates.waiting_user_id))
async def process_user_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = int(message.text)
        await state.update_data(user_id=user_id)
        await state.set_state(AdminStates.waiting_balance_amount)
        
        await message.reply(
            f"‚úÖ <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <code>{user_id}</code>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]
            ])
        )
    except ValueError:
        await message.reply("‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.</b> –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

@admin_router.message(StateFilter(AdminStates.waiting_balance_amount))
async def process_balance_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –±–∞–ª–∞–Ω—Å–∞"""
    try:
        amount = float(message.text)
        data = await state.get_data()
        user_id = data['user_id']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        success = await admin_panel.user_service.update_user_balance(user_id, amount, "add")
        
        if success:
            user_stats = await admin_panel.get_user_stats(user_id)
            await message.reply(
                f"‚úÖ <b>–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> <code>{user_id}</code> <b>–ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞</b> <code>{amount:.2f} ‚ÇΩ</code>\n\n{user_stats}",
                reply_markup=await admin_panel.get_balance_menu()
            )
        else:
            await message.reply(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> <code>{user_id}</code>",
                reply_markup=await admin_panel.get_balance_menu()
            )
        
        await state.clear()
        
    except ValueError:
        await message.reply("‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã.</b> –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
@admin_router.callback_query(F.data == "admin_activate_subscription")
async def admin_activate_subscription_callback(callback: CallbackQuery, state: FSMContext):
    """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"""
    if not admin_panel or not admin_panel.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    await state.set_state(AdminStates.waiting_user_id)
    await callback.message.edit_text(
        "‚úÖ <b>–ê–ö–¢–ò–í–ê–¶–ò–Ø –ü–û–î–ü–ò–°–ö–ò</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]
        ])
    )

@admin_router.callback_query(F.data == "admin_find_user")
async def admin_find_user_callback(callback: CallbackQuery, state: FSMContext):
    """–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not admin_panel or not admin_panel.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    await state.set_state(AdminStates.waiting_user_id)
    await callback.message.edit_text(
        "üîç <b>–ü–û–ò–°–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]
        ])
    )

@admin_router.message(StateFilter(AdminStates.waiting_user_id))
async def process_find_user(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = int(message.text)
        user_stats = await admin_panel.get_user_stats(user_id)
        
        await message.reply(
            user_stats,
            reply_markup=await admin_panel.get_users_menu()
        )
        await state.clear()
        
    except ValueError:
        await message.reply("‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.</b> –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
@admin_router.callback_query(F.data == "admin_test_balance")
async def admin_test_balance_callback(callback: CallbackQuery, state: FSMContext):
    """–¢–µ—Å—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å 15‚ÇΩ"""
    if not admin_panel or not admin_panel.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    await state.set_state(AdminStates.waiting_test_balance_user)
    await callback.message.edit_text(
        "üéÅ <b>–¢–ï–°–¢–û–í–´–ô –ë–ê–õ–ê–ù–°</b>\n\n"
        "–ù–∞—á–∏—Å–ª–∏—Ç—å <code>15 ‚ÇΩ</code> —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]
        ])
    )

@admin_router.message(StateFilter(AdminStates.waiting_test_balance_user))
async def process_test_balance_user(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞"""
    try:
        user_id = int(message.text)
        
        # –ù–∞—á–∏—Å–ª—è–µ–º 15‚ÇΩ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        success = await admin_panel.user_service.update_user_balance(user_id, 15.0, "add")
        
        if success:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user = await admin_panel.user_service.get_user(user_id)
                if user:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
                    await admin_panel.animation_service.send_message_with_effect(
                        chat_id=user_id,
                        text="üéÅ <b>–¢–µ—Å—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω!</b>\n\n"
                             "–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <code>15 ‚ÇΩ</code> —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞.\n"
                             "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ YoVPN Bot!",
                        effect_name="confetti"
                    )
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            user_stats = await admin_panel.get_user_stats(user_id)
            await message.reply(
                f"üéÅ <b>–¢–µ—Å—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω!</b>\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{user_id}</code> –Ω–∞—á–∏—Å–ª–µ–Ω–æ <code>15 ‚ÇΩ</code>\n\n{user_stats}",
                reply_markup=await admin_panel.get_balance_menu()
            )
        else:
            await message.reply(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> <code>{user_id}</code>",
                reply_markup=await admin_panel.get_balance_menu()
            )
        
        await state.clear()
        
    except ValueError:
        await message.reply("‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.</b> –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@admin_router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast_callback(callback: CallbackQuery, state: FSMContext):
    """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not admin_panel or not admin_panel.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    await state.set_state(AdminStates.waiting_broadcast_message)
    await callback.message.edit_text(
        "üì¢ <b>–†–ê–°–°–´–õ–ö–ê –°–û–û–ë–©–ï–ù–ò–ô</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]
        ])
    )

@admin_router.message(StateFilter(AdminStates.waiting_broadcast_message))
async def process_broadcast_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        broadcast_text = message.text
        users = await admin_panel.user_service.get_all_users()
        
        sent_count = 0
        failed_count = 0
        
        for user_id in users.keys():
            try:
                await message.bot.send_message(
                    chat_id=user_id,
                    text=f"üì¢ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n{broadcast_text}"
                )
                sent_count += 1
                await asyncio.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            except Exception as e:
                failed_count += 1
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        await message.reply(
            f"üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <code>{sent_count}</code>\n"
            f"‚ùå –û—à–∏–±–æ–∫: <code>{failed_count}</code>",
            reply_markup=await admin_panel.get_main_menu()
        )
        
        await state.clear()
        
    except Exception as e:
        await message.reply(f"‚ùå <b>–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n<code>{e}</code>")
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Marzban
@admin_router.callback_query(F.data == "admin_marzban")
async def admin_marzban_callback(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Marzban"""
    if not admin_panel or not admin_panel.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    marzban_status = "üü¢ –û–Ω–ª–∞–π–Ω" if admin_panel.marzban_service.is_available() else "üî¥ –û—Ñ–ª–∞–π–Ω"
    marzban_stats = await admin_panel.marzban_service.get_system_stats()
    
    marzban_text = f"""
‚öôÔ∏è <b>–ù–ê–°–¢–†–û–ô–ö–ò MARZBAN</b>

üîß <b>–°—Ç–∞—Ç—É—Å:</b> {marzban_status}
üìä <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b> <code>{marzban_stats.get('users', 'N/A')}</code>
üìà <b>–¢—Ä–∞—Ñ–∏–∫:</b> <code>{marzban_stats.get('traffic', 'N/A')}</code>
üåê <b>API URL:</b> <code>{admin_panel.marzban_service.api_url}</code>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", callback_data="admin_marzban_check")],
        [InlineKeyboardButton(text="üë• –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å", callback_data="admin_marzban_sync")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(marzban_text, reply_markup=keyboard)

@admin_router.callback_query(F.data == "admin_marzban_check")
async def admin_marzban_check_callback(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Marzban"""
    if not admin_panel or not admin_panel.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    try:
        is_available = admin_panel.marzban_service.is_available()
        status = "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ" if is_available else "üî¥ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
        
        await callback.answer(status, show_alert=True)
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
@admin_router.callback_query(F.data == "admin_analytics")
async def admin_analytics_callback(callback: CallbackQuery):
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"""
    if not admin_panel or not admin_panel.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    analytics_text = """
üìà <b>–ê–ù–ê–õ–ò–¢–ò–ö–ê</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç—á–µ—Ç—ã:</b>
‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
‚Ä¢ –¢—Ä–µ–Ω–¥—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã

<b>–§—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –¥–∏–∞–≥—Ä–∞–º–º—ã
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã
"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –§–∏–Ω–∞–Ω—Å—ã", callback_data="admin_analytics_finance")],
        [InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_analytics_users")],
        [InlineKeyboardButton(text="üìä –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="admin_analytics_subscriptions")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(analytics_text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
@admin_router.callback_query(F.data == "admin_security")
async def admin_security_callback(callback: CallbackQuery):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"""
    if not admin_panel or not admin_panel.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    security_text = """
üîí <b>–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨</b>

<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –ê–¥–º–∏–Ω ID: <code>7610842643</code>
‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: –í–∫–ª—é—á–µ–Ω–æ
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –ê–∫—Ç–∏–≤–µ–Ω

<b>–§—É–Ω–∫—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞
‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –õ–æ–≥–∏", callback_data="admin_security_logs")],
        [InlineKeyboardButton(text="üëÅÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="admin_security_monitor")],
        [InlineKeyboardButton(text="üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è", callback_data="admin_security_backup")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(security_text, reply_markup=keyboard)