"""
–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
"""

import logging
from typing import Optional, Dict, Any
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from ..services.user_service import UserService
from ..services.marzban_service import MarzbanService
from ..services.ui_service import UIService

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
class AdminStates(StatesGroup):
    waiting_user_id = State()
    waiting_balance_amount = State()
    waiting_subscription_days = State()
    waiting_broadcast_message = State()

# –†–æ—É—Ç–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥
admin_router = Router()

class AdminPanel:
    """
    –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    """
    
    def __init__(self, user_service: UserService, marzban_service: MarzbanService, ui_service: UIService):
        self.user_service = user_service
        self.marzban_service = marzban_service
        self.ui_service = ui_service
        self.admin_users = [123456789]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏)
        
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id in self.admin_users
    
    async def get_main_menu(self) -> InlineKeyboardMarkup:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
        keyboard = [
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
            [InlineKeyboardButton(text="üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º", callback_data="admin_balance")],
            [InlineKeyboardButton(text="üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏", callback_data="admin_subscriptions")],
            [InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
            [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Marzban", callback_data="admin_marzban")],
            [InlineKeyboardButton(text="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="admin_analytics")],
            [InlineKeyboardButton(text="üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", callback_data="admin_security")],
            [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="admin_close")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    async def get_stats_menu(self) -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        keyboard = [
            [InlineKeyboardButton(text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats_general")],
            [InlineKeyboardButton(text="üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_stats_users")],
            [InlineKeyboardButton(text="üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats_finance")],
            [InlineKeyboardButton(text="üîß –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Marzban", callback_data="admin_stats_marzban")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    async def get_users_menu(self) -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        keyboard = [
            [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_find_user")],
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_list_users")],
            [InlineKeyboardButton(text="üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_active_users")],
            [InlineKeyboardButton(text="üí∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º", callback_data="admin_users_with_balance")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    async def get_balance_menu(self) -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–º"""
        keyboard = [
            [InlineKeyboardButton(text="‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="admin_add_balance")],
            [InlineKeyboardButton(text="‚ûñ –°–ø–∏—Å–∞—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞", callback_data="admin_subtract_balance")],
            [InlineKeyboardButton(text="üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="admin_set_balance")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤", callback_data="admin_balance_stats")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    async def get_subscription_menu(self) -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""
        keyboard = [
            [InlineKeyboardButton(text="‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="admin_activate_subscription")],
            [InlineKeyboardButton(text="‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="admin_deactivate_subscription")],
            [InlineKeyboardButton(text="‚è∞ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="admin_extend_subscription")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫", callback_data="admin_subscription_stats")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    async def get_general_stats(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            users = await self.user_service.get_all_users()
            total_users = len(users)
            
            active_subscriptions = sum(1 for user in users.values() if user.get('subscription_active', False))
            total_balance = sum(user.get('balance', 0) for user in users.values())
            total_payments = sum(user.get('total_payments', 0) for user in users.values())
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Marzban
            marzban_stats = await self.marzban_service.get_system_stats()
            marzban_info = ""
            if marzban_stats:
                marzban_info = f"""
üîß **Marzban:**
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü¢ –û–Ω–ª–∞–π–Ω' if self.marzban_service.is_available() else 'üî¥ –û—Ñ–ª–∞–π–Ω'}
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {marzban_stats.get('users', 'N/A')}
‚Ä¢ –¢—Ä–∞—Ñ–∏–∫: {marzban_stats.get('traffic', 'N/A')}
"""
            
            stats_text = f"""
üìä **–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ –í—Å–µ–≥–æ: {total_users}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: {active_subscriptions}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {(active_subscriptions/total_users*100):.1f}% (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)

üí∞ **–§–∏–Ω–∞–Ω—Å—ã:**
‚Ä¢ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance:.2f} ‚ÇΩ
‚Ä¢ –û–±—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏: {total_payments:.2f} ‚ÇΩ
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å: {total_balance/total_users:.2f} ‚ÇΩ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)

{marzban_info}

üïê **–í—Ä–µ–º—è:** {self.ui_service.get_current_time()}
"""
            return stats_text
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}"
    
    async def get_user_stats(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user = await self.user_service.get_user(user_id)
            if not user:
                return f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
            stats = await self.user_service.get_user_stats(user_id)
            
            stats_text = f"""
üë§ **–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ #{user_id}**

üìù **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –ò–º—è: {user.get('first_name', 'N/A')}
‚Ä¢ Username: @{user.get('username', 'N/A')}
‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: `{user.get('referral_code', 'N/A')}`

üí∞ **–§–∏–Ω–∞–Ω—Å—ã:**
‚Ä¢ –ë–∞–ª–∞–Ω—Å: {stats.get('balance', 0):.2f} ‚ÇΩ
‚Ä¢ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {stats.get('total_payments', 0):.2f} ‚ÇΩ

üîß **–ü–æ–¥–ø–∏—Å–∫–∞:**
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if stats.get('subscription_active') else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}
‚Ä¢ –î–Ω–µ–π: {stats.get('subscription_days', 0)}

üìä **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {stats.get('referrals_count', 0)}
‚Ä¢ –°–æ–∑–¥–∞–Ω: {stats.get('created_at', 'N/A')}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats.get('last_activity', 'N/A')}
"""
            return stats_text
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}"
    
    async def get_users_list(self, limit: int = 10) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            users = await self.user_service.get_all_users()
            
            if not users:
                return "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç"
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
            sorted_users = sorted(users.values(), 
                                key=lambda x: x.get('created_at', ''), 
                                reverse=True)
            
            users_text = f"üìã **–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò** (–ø–æ–∫–∞–∑–∞–Ω–æ {min(limit, len(sorted_users))} –∏–∑ {len(users)})\n\n"
            
            for i, user in enumerate(sorted_users[:limit], 1):
                user_id = user.get('user_id', 'N/A')
                first_name = user.get('first_name', 'N/A')
                username = user.get('username', 'N/A')
                balance = user.get('balance', 0)
                subscription_active = user.get('subscription_active', False)
                
                status_emoji = "‚úÖ" if subscription_active else "‚ùå"
                username_text = f"@{username}" if username != 'N/A' else "–ë–µ–∑ username"
                
                users_text += f"{i}. **{first_name}** ({username_text})\n"
                users_text += f"   ID: `{user_id}` | –ë–∞–ª–∞–Ω—Å: {balance:.2f} ‚ÇΩ | –ü–æ–¥–ø–∏—Å–∫–∞: {status_emoji}\n\n"
            
            return users_text
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
admin_panel = None

def init_admin_panel(user_service: UserService, marzban_service: MarzbanService, ui_service: UIService):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    global admin_panel
    admin_panel = AdminPanel(user_service, marzban_service, ui_service)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@admin_router.message(Command("admin"))
async def admin_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /admin - –æ—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    if not admin_panel or not admin_panel.is_admin(message.from_user.id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    keyboard = await admin_panel.get_main_menu()
    await message.reply(
        "üîß **–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤
@admin_router.callback_query(F.data == "admin_stats")
async def admin_stats_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not admin_panel or not admin_panel.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    keyboard = await admin_panel.get_stats_menu()
    await callback.message.edit_text(
        "üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=keyboard
    )

@admin_router.callback_query(F.data == "admin_stats_general")
async def admin_stats_general_callback(callback: CallbackQuery):
    """–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    if not admin_panel or not admin_panel.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    stats_text = await admin_panel.get_general_stats()
    keyboard = await admin_panel.get_stats_menu()
    
    await callback.message.edit_text(
        stats_text,
        reply_markup=keyboard
    )

@admin_router.callback_query(F.data == "admin_users")
async def admin_users_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not admin_panel or not admin_panel.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    keyboard = await admin_panel.get_users_menu()
    await callback.message.edit_text(
        "üë• **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@admin_router.callback_query(F.data == "admin_list_users")
async def admin_list_users_callback(callback: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not admin_panel or not admin_panel.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    users_text = await admin_panel.get_users_list()
    keyboard = await admin_panel.get_users_menu()
    
    await callback.message.edit_text(
        users_text,
        reply_markup=keyboard
    )

@admin_router.callback_query(F.data == "admin_balance")
async def admin_balance_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞–ª–∞–Ω—Å–∞"""
    if not admin_panel or not admin_panel.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    keyboard = await admin_panel.get_balance_menu()
    await callback.message.edit_text(
        "üí∞ **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–û–ú**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@admin_router.callback_query(F.data == "admin_subscriptions")
async def admin_subscriptions_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–æ–∫"""
    if not admin_panel or not admin_panel.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    keyboard = await admin_panel.get_subscription_menu()
    await callback.message.edit_text(
        "üîß **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ü–ò–°–ö–ê–ú–ò**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@admin_router.callback_query(F.data == "admin_back")
async def admin_back_callback(callback: CallbackQuery):
    """–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    if not admin_panel or not admin_panel.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    keyboard = await admin_panel.get_main_menu()
    await callback.message.edit_text(
        "üîß **–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@admin_router.callback_query(F.data == "admin_close")
async def admin_close_callback(callback: CallbackQuery):
    """–ó–∞–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    await callback.message.delete()
    await callback.answer("‚úÖ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–º
@admin_router.callback_query(F.data == "admin_add_balance")
async def admin_add_balance_callback(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å"""
    if not admin_panel or not admin_panel.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    await state.set_state(AdminStates.waiting_user_id)
    await callback.message.edit_text(
        "üí∞ **–ü–û–ü–û–õ–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]
        ])
    )

@admin_router.message(StateFilter(AdminStates.waiting_user_id))
async def process_user_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = int(message.text)
        await state.update_data(user_id=user_id)
        await state.set_state(AdminStates.waiting_balance_amount)
        
        await message.reply(
            f"‚úÖ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]
            ])
        )
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

@admin_router.message(StateFilter(AdminStates.waiting_balance_amount))
async def process_balance_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –±–∞–ª–∞–Ω—Å–∞"""
    try:
        amount = float(message.text)
        data = await state.get_data()
        user_id = data['user_id']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        success = await admin_panel.user_service.update_user_balance(user_id, amount, "add")
        
        if success:
            user_stats = await admin_panel.get_user_stats(user_id)
            await message.reply(
                f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount:.2f} ‚ÇΩ\n\n{user_stats}",
                reply_markup=await admin_panel.get_balance_menu()
            )
        else:
            await message.reply(
                f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}",
                reply_markup=await admin_panel.get_balance_menu()
            )
        
        await state.clear()
        
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
@admin_router.callback_query(F.data == "admin_activate_subscription")
async def admin_activate_subscription_callback(callback: CallbackQuery, state: FSMContext):
    """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"""
    if not admin_panel or not admin_panel.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    await state.set_state(AdminStates.waiting_user_id)
    await callback.message.edit_text(
        "‚úÖ **–ê–ö–¢–ò–í–ê–¶–ò–Ø –ü–û–î–ü–ò–°–ö–ò**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]
        ])
    )

@admin_router.callback_query(F.data == "admin_find_user")
async def admin_find_user_callback(callback: CallbackQuery, state: FSMContext):
    """–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not admin_panel or not admin_panel.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    await state.set_state(AdminStates.waiting_user_id)
    await callback.message.edit_text(
        "üîç **–ü–û–ò–°–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]
        ])
    )

@admin_router.message(StateFilter(AdminStates.waiting_user_id))
async def process_find_user(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = int(message.text)
        user_stats = await admin_panel.get_user_stats(user_id)
        
        await message.reply(
            user_stats,
            reply_markup=await admin_panel.get_users_menu()
        )
        await state.clear()
        
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")