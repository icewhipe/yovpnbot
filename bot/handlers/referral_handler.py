"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
5 —É—Ä–æ–≤–Ω–µ–π –≥–ª—É–±–∏–Ω—ã —Å —É—á–µ—Ç–æ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π
"""

import logging
from aiogram import Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from typing import Dict, List
from datetime import datetime

logger = logging.getLogger(__name__)


class ReferralHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    
    def __init__(self, services):
        self.services = services
        self.user_service = services.get_user_service()
        
        # –ë–æ–Ω—É—Å—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (1 –¥–µ–Ω—å = 4 —Ä—É–±)
        self.referral_bonus = 4.0  # 1 –¥–µ–Ω—å VPN
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º
        self.level_percentages = {
            1: 10,  # 10% –æ—Ç –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
            2: 5,   # 5% –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
            3: 3,   # 3% –æ—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ —É—Ä–æ–≤–Ω—è
            4: 2,   # 2% –æ—Ç —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è
            5: 1    # 1% –æ—Ç –ø—è—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è
        }
    
    async def get_referral_tree(self, user_id: int, max_level: int = 5) -> Dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ä–µ–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            max_level: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≥–ª—É–±–∏–Ω—ã
            
        Returns:
            –î–µ—Ä–µ–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        tree = {
            'levels': {},
            'total_referrals': 0,
            'total_earnings': 0.0
        }
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º
        current_level_users = [user_id]
        
        for level in range(1, max_level + 1):
            if not current_level_users:
                break
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
            level_referrals = await self.user_service.get_referrals_by_users(current_level_users)
            
            if not level_referrals:
                break
            
            # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—Ä–æ–≤–Ω—è
            level_count = len(level_referrals)
            level_earnings = sum(r.get('referral_earnings', 0) for r in level_referrals)
            
            tree['levels'][level] = {
                'count': level_count,
                'earnings': level_earnings,
                'users': level_referrals
            }
            
            tree['total_referrals'] += level_count
            tree['total_earnings'] += level_earnings
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
            current_level_users = [r['tg_id'] for r in level_referrals]
        
        return tree
    
    async def process_referral_deposit(self, user_id: int, amount: float):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞ - –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –≤–≤–µ—Ä—Ö –ø–æ –¥–µ—Ä–µ–≤—É
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å
            amount: –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = await self.user_service.get_user(user_id)
        if not user or not user.get('referred_by'):
            return
        
        # –ò–¥–µ–º –≤–≤–µ—Ä—Ö –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Ü–µ–ø–æ—á–∫–µ
        current_referrer_id = user['referred_by']
        current_level = 1
        
        while current_referrer_id and current_level <= 5:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
            percentage = self.level_percentages.get(current_level, 0)
            if percentage == 0:
                break
            
            # –í—ã—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å
            bonus = amount * (percentage / 100)
            
            # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä—Ä–µ—Ä—É
            await self.user_service.add_balance(
                user_id=current_referrer_id,
                amount=bonus,
                description=f"üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å ({percentage}%) –æ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è {current_level}"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞—Ä–∞–±–æ—Ç–∫–∞
            await self.user_service.update_referral_earnings(current_referrer_id, bonus)
            
            logger.info(f"üí∞ –ù–∞—á–∏—Å–ª–µ–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å: {bonus}‚ÇΩ –¥–ª—è ID {current_referrer_id} (—É—Ä–æ–≤–µ–Ω—å {current_level})")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
            referrer = await self.user_service.get_user(current_referrer_id)
            current_referrer_id = referrer.get('referred_by') if referrer else None
            current_level += 1
    
    async def register_referral(self, user_id: int, referrer_id: int) -> bool:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        
        Args:
            user_id: ID –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            referrer_id: ID –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            user = await self.user_service.get_user(user_id)
            if user and user.get('referred_by'):
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–µ—Ñ–µ—Ä—Ä–µ—Ä–∞
            referrer = await self.user_service.get_user(referrer_id)
            if not referrer:
                return False
            
            referrer_level = referrer.get('referral_level', 0)
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
            await self.user_service.update_user(
                user_id=user_id,
                referred_by=referrer_id,
                referral_level=referrer_level + 1
            )
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            await self.user_service.increment_referral_count(referrer_id)
            
            # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (1 –¥–µ–Ω—å VPN = 4 —Ä—É–±)
            await self.user_service.add_balance(
                user_id=referrer_id,
                amount=self.referral_bonus,
                description=f"üéÅ –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞ (1 –¥–µ–Ω—å VPN)"
            )
            
            logger.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Ä–µ—Ñ–µ—Ä–∞–ª: {user_id} -> {referrer_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {e}")
            return False
    
    async def referral_command(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /invite - —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"""
        user_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        bot_username = (await message.bot.me()).username
        referral_link = f"https://t.me/{bot_username}?start=ref_{user_id}"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        tree = await self.get_referral_tree(user_id)
        
        total_referrals = tree['total_referrals']
        total_earnings = tree['total_earnings']
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ —É—Ä–æ–≤–Ω—è–º
        levels_text = ""
        for level in range(1, 6):
            if level in tree['levels']:
                level_data = tree['levels'][level]
                count = level_data['count']
                earnings = level_data['earnings']
                percentage = self.level_percentages.get(level, 0)
                levels_text += f"   {level} —É—Ä–æ–≤–µ–Ω—å: <b>{count}</b> —á–µ–ª. | {percentage}% | {earnings:.2f}‚ÇΩ\n"
        
        text = (
            "<b>üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
            f"üíé <b>–í–∞—à–∏ –±–æ–Ω—É—Å—ã:</b>\n"
            f"   ‚Ä¢ <b>1 –¥–µ–Ω—å VPN</b> (4‚ÇΩ) –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞\n"
            f"   ‚Ä¢ <b>–î–æ 10%</b> –æ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n\n"
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"   –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{total_referrals}</b>\n"
            f"   –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{total_earnings:.2f}‚ÇΩ</b>\n\n"
            f"üéØ <b>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º:</b>\n"
            f"{levels_text if levels_text else '   –ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n'}\n"
            f"<b>üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n"
            f"<code>{referral_link}</code>\n\n"
            f"üí° <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º!</i>"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", switch_inline_query=referral_link)],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="referral_stats")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ])
        
        await message.answer(text, reply_markup=keyboard)
    
    async def referral_callback(self, callback: CallbackQuery):
        """Callback –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        bot_username = (await callback.bot.me()).username
        referral_link = f"https://t.me/{bot_username}?start=ref_{user_id}"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        tree = await self.get_referral_tree(user_id)
        
        total_referrals = tree['total_referrals']
        total_earnings = tree['total_earnings']
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        levels_text = ""
        for level in range(1, 6):
            if level in tree['levels']:
                level_data = tree['levels'][level]
                count = level_data['count']
                earnings = level_data['earnings']
                percentage = self.level_percentages.get(level, 0)
                levels_text += f"   {level} —É—Ä–æ–≤–µ–Ω—å: <b>{count}</b> —á–µ–ª. | {percentage}% | {earnings:.2f}‚ÇΩ\n"
        
        text = (
            "<b>üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
            f"üíé <b>–í–∞—à–∏ –±–æ–Ω—É—Å—ã:</b>\n"
            f"   ‚Ä¢ <b>1 –¥–µ–Ω—å VPN</b> (4‚ÇΩ) –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞\n"
            f"   ‚Ä¢ <b>–î–æ 10%</b> –æ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n\n"
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"   –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{total_referrals}</b>\n"
            f"   –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{total_earnings:.2f}‚ÇΩ</b>\n\n"
            f"üéØ <b>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º:</b>\n"
            f"{levels_text if levels_text else '   –ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n'}\n"
            f"<b>üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n"
            f"<code>{referral_link}</code>\n\n"
            f"üí° <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º!</i>"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", switch_inline_query=referral_link)],
            [InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="referral_stats_detailed")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
    
    async def referral_stats_detailed_callback(self, callback: CallbackQuery):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
        user_id = callback.from_user.id
        
        tree = await self.get_referral_tree(user_id)
        
        if not tree['levels']:
            text = (
                "<b>üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.\n"
                "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å!"
            )
        else:
            text = "<b>üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º</b>\n\n"
            
            for level in range(1, 6):
                if level in tree['levels']:
                    level_data = tree['levels'][level]
                    count = level_data['count']
                    earnings = level_data['earnings']
                    percentage = self.level_percentages.get(level, 0)
                    
                    text += (
                        f"<b>–£—Ä–æ–≤–µ–Ω—å {level}</b> ({percentage}% –æ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π)\n"
                        f"   –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {count}\n"
                        f"   –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {earnings:.2f}‚ÇΩ\n\n"
                    )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="referral")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
    
    def register_handlers(self, dp: Dispatcher):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        from aiogram.filters import Command
        
        # –ö–æ–º–∞–Ω–¥—ã
        dp.message.register(self.referral_command, Command("invite"))
        
        # Callbacks
        dp.callback_query.register(self.referral_callback, F.data == "referral")
        dp.callback_query.register(self.referral_stats_detailed_callback, F.data == "referral_stats_detailed")
        
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
