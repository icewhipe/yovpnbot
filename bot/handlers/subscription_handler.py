"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–æ–∫
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è
"""

import logging
from aiogram import Dispatcher
from aiogram.types import CallbackQuery, Message
from aiogram import F

from assets.emojis.interface import EMOJI, get_emoji_combination

logger = logging.getLogger(__name__)

async def handle_my_subscriptions(callback: CallbackQuery, **kwargs):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = callback.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        services = kwargs.get("services")
        if not services:
            await callback.answer("‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", show_alert=True)
            return
        
        user_service = services.get_user_service()
        marzban_service = services.get_marzban_service()
        ui_service = services.get_ui_service()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_service.get_or_create_user(
            user_id=user_id,
            username=callback.from_user.username,
            first_name=callback.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await user_service.get_user_stats(user_id)
        balance = stats.get('balance', 0.0)
        subscription_active = stats.get('subscription_active', False)
        subscription_days = stats.get('subscription_days', 0)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = ui_service.format_user_balance_message(
            balance=balance,
            days=subscription_days,
            subscription_active=subscription_active
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = ui_service.create_subscription_menu_keyboard(
            has_active_subscription=subscription_active
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            message_text,
            reply_markup=keyboard
        )
        
        await callback.answer()
        logger.info(f"üì± –ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_my_subscriptions: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

async def handle_activate_subscription(callback: CallbackQuery, **kwargs):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    
    –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å
    """
    user_id = callback.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        services = kwargs.get("services")
        if not services:
            await callback.answer("‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", show_alert=True)
            return
        
        user_service = services.get_user_service()
        marzban_service = services.get_marzban_service()
        animation_service = services.get_animation_service()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        balance = await user_service.get_user_balance(user_id)
        if balance < 4.0:
            await callback.answer(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ú–∏–Ω–∏–º—É–º 4 ‚ÇΩ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.",
                show_alert=True
            )
            return
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        days = int(balance / 4)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_service.get_or_create_user(
            user_id=user_id,
            username=callback.from_user.username,
            first_name=callback.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Marzban
        username = user.get('username', f"user_{user_id}")
        marzban_user = await marzban_service.create_user(username, {
            'expire': 0,  # –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            'data_limit': 0,  # –ë–µ–∑–ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞
            'status': 'active'
        })
        
        if marzban_user:
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            await user_service.activate_subscription(user_id, days)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º
            await animation_service.send_subscription_activated(
                callback.message, 
                days
            )
            
            logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {days} –¥–Ω–µ–π")
        else:
            await callback.answer(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Marzban. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                show_alert=True
            )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_activate_subscription: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏", show_alert=True)

async def handle_setup_vpn(callback: CallbackQuery, **kwargs):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VPN
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ VPN
    """
    try:
        message_text = f"""
üì± <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ VPN</b>

<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</b>

<b>üì± –ú–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</b>
‚Ä¢ <b>Android:</b> –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2rayNG
‚Ä¢ <b>iOS:</b> –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ OneClick

<b>üíª –ö–æ–º–ø—å—é—Ç–µ—Ä—ã:</b>
‚Ä¢ <b>Windows:</b> –°–∫–∞—á–∞–π—Ç–µ V2rayN
‚Ä¢ <b>macOS:</b> –°–∫–∞—á–∞–π—Ç–µ V2rayU
‚Ä¢ <b>Linux:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ v2ray-core

<b>üîó –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:</b>
1. –ù–∞–∂–º–∏—Ç–µ "–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É"
2. –í—Å—Ç–∞–≤—å—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
3. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É

<b>‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b> –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É üëá
        """
        
        from bot.services.ui_service import UIService
        ui_service = UIService()
        keyboard = ui_service.create_back_keyboard("my_subscriptions")
        
        await callback.message.edit_text(
            message_text,
            reply_markup=keyboard
        )
        
        await callback.answer()
        logger.info(f"üì± –ü–æ–∫–∞–∑–∞–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ VPN –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_setup_vpn: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

async def handle_copy_config(callback: CallbackQuery, **kwargs):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    user_id = callback.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        services = kwargs.get("services")
        if not services:
            await callback.answer("‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", show_alert=True)
            return
        
        marzban_service = services.get_marzban_service()
        ui_service = services.get_ui_service()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await services.get_user_service().get_user(user_id)
        
        username = user.get('username', f"user_{user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_data = await marzban_service.get_user_config(username)
        if not config_data:
            await callback.answer("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        message_text = f"""
üîó <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è VPN</b>

<b>VLESS —Å—Å—ã–ª–∫–∞:</b>
<code>{config_data['vless_url']}</code>

<b>Subscription URL:</b>
<code>{config_data['subscription_url']}</code>

<b>üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>
1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –æ–¥–Ω—É –∏–∑ —Å—Å—ã–ª–æ–∫ –≤—ã—à–µ
2. –í—Å—Ç–∞–≤—å—Ç–µ –≤ –≤–∞—à–µ VPN –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
3. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É

<b>üí° –°–æ–≤–µ—Ç:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ VLESS —Å—Å—ã–ª–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        """
        
        keyboard = ui_service.create_back_keyboard("my_subscriptions")
        
        await callback.message.edit_text(
            message_text,
            reply_markup=keyboard
        )
        
        await callback.answer()
        logger.info(f"üîó –ü–æ–∫–∞–∑–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_copy_config: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

def register_subscription_handler(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫
    
    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä –±–æ—Ç–∞
    """
    dp.callback_query.register(handle_my_subscriptions, F.data == "my_subscriptions")
    dp.callback_query.register(handle_activate_subscription, F.data == "activate_subscription")
    dp.callback_query.register(handle_setup_vpn, F.data == "setup_vpn")
    dp.callback_query.register(handle_copy_config, F.data == "copy_config")
    
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")