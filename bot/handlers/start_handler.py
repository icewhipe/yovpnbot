"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
"""

import asyncio
import logging
from aiogram import Dispatcher
from aiogram.filters import CommandStart
from aiogram.types import Message

from assets.emojis.interface import EMOJI, get_emoji_combination

logger = logging.getLogger(__name__)

async def start_command(message: Message, **kwargs):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º
    –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞. –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç
    onboarding-–∞–Ω–∏–º–∞—Ü–∏—é –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç –±–æ–Ω—É—Å 15‚ÇΩ.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–∫–ª—é—á–∞—è services –∏–∑ middleware
    """
    user_id = message.from_user.id
    first_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    username = message.from_user.username
    
    logger.info(f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID={user_id}, Username=@{username}, Name={first_name}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –∏–∑ middleware
    services = kwargs.get("services")
    if not services:
        logger.error("‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ middleware")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    try:
        user_service = services.get_user_service()
        animation_service = services.get_animation_service()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–º
        existing_user = await user_service.get_user(user_id)
        is_new_user = existing_user is None
        
        if is_new_user:
            logger.info(f"üéâ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {first_name} (ID: {user_id})")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º onboarding-–∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await show_onboarding_animation(message, first_name, animation_service)
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –±–æ–Ω—É—Å–æ–º 15‚ÇΩ)
            user = await user_service.create_or_update_user(
                user_id=user_id,
                username=username,
                first_name=first_name
            )
            
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å –±–æ–Ω—É—Å–æ–º 15‚ÇΩ")
        else:
            logger.info(f"üëã –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {first_name} (ID: {user_id})")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await user_service.create_or_update_user(
                user_id=user_id,
                username=username,
                first_name=first_name
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await animation_service.send_welcome_message(message, first_name)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
        await message.reply(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. "
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )

async def show_onboarding_animation(message: Message, first_name: str, animation_service):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å onboarding-–∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:
    1. "üîÑ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VPN-—Å–µ—Ä–≤–µ—Ä—É..."
    2. "üîê –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è..."
    3. "üåê –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫ –∑–∞—â–∏—â—ë–Ω–Ω–æ–π —Å–µ—Ç–∏..."
    4. "üéÅ –î–∞—Ä–∏–º —Ç–µ–±–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: +15‚ÇΩ"
    5. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        first_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        animation_service: –°–µ—Ä–≤–∏—Å –∞–Ω–∏–º–∞—Ü–∏–π
    """
    try:
        # –®–∞–≥ 1: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        step_msg = await message.answer(
            "üîÑ <b>–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VPN-—Å–µ—Ä–≤–µ—Ä—É...</b>",
            parse_mode='HTML'
        )
        await asyncio.sleep(1.5)
        
        # –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞
        await step_msg.edit_text(
            "üîê <b>–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è...</b>",
            parse_mode='HTML'
        )
        await asyncio.sleep(1.5)
        
        # –®–∞–≥ 3: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏
        await step_msg.edit_text(
            "üåê <b>–ü–æ–¥–∫–ª—é—á–∞–µ–º –∫ –∑–∞—â–∏—â—ë–Ω–Ω–æ–π —Å–µ—Ç–∏...</b>",
            parse_mode='HTML'
        )
        await asyncio.sleep(1.5)
        
        # –®–∞–≥ 4: –ë–æ–Ω—É—Å
        await step_msg.edit_text(
            f"üéÅ <b>–î–∞—Ä–∏–º —Ç–µ–±–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: +15‚ÇΩ</b>\n\n"
            f"‚ú® –≠—Ç–æ <b>3 –¥–Ω—è</b> –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ VPN!",
            parse_mode='HTML'
        )
        await asyncio.sleep(2.0)
        
        # –£–¥–∞–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await step_msg.delete()
        
        # –®–∞–≥ 5: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
        await animation_service.send_welcome_message(message, first_name)
        
        logger.info(f"‚úÖ Onboarding –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {first_name}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ onboarding –∞–Ω–∏–º–∞—Ü–∏–∏: {e}")
        # Fallback: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        await animation_service.send_welcome_message(message, first_name)

def register_start_handler(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    
    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä –±–æ—Ç–∞
    """
    dp.message.register(start_command, CommandStart())
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")