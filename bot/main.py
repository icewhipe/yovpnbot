#!/usr/bin/env python3
"""
YoVPN Telegram Bot - –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª
–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ VPN-–ø–æ–¥–ø–∏—Å–æ–∫ —Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
- –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π UX/UI –¥–∏–∑–∞–π–Ω
- –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –º–æ–¥–µ–ª—å –æ–ø–ª–∞—Ç—ã (4 —Ä—É–±–ª—è –≤ –¥–µ–Ω—å)
- –ü–æ–ª–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
"""

import asyncio
import logging
import sys
import os
import fcntl
import time
import random
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramConflictError

# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —Å–µ—Ä–≤–∏—Å–æ–≤
from src.config import config
from bot.handlers import register_handlers, init_admin_panel
from bot.middleware import register_middleware
from bot.services import BotServices

LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
LOG_TO_FILE = os.getenv("LOG_TO_FILE", "0") == "1"
LOG_FILE = os.getenv("LOG_FILE", "/tmp/bot.log")

logger = logging.getLogger("yovpn.bot")
logger.setLevel(LOG_LEVEL)
logger.handlers.clear()

formatter = logging.Formatter("%(asctime)s %(levelname)s %(name)s: %(message)s")

if LOG_TO_FILE:
    os.makedirs(os.path.dirname(LOG_FILE), exist_ok=True)
    file_handler = logging.FileHandler(LOG_FILE)
    file_handler.setFormatter(formatter)
    logger.addHandler(file_handler)
else:
    stream_handler = logging.StreamHandler(sys.stdout)
    stream_handler.setFormatter(formatter)
    logger.addHandler(stream_handler)

# –§–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
LOCK_FILE = "/tmp/yovpn_bot.lock"
lock_file_handle = None

def acquire_lock():
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤"""
    global lock_file_handle
    try:
        lock_file_handle = open(LOCK_FILE, 'w')
        fcntl.flock(lock_file_handle, fcntl.LOCK_EX | fcntl.LOCK_NB)
        lock_file_handle.write(str(os.getpid()))
        lock_file_handle.flush()
        logger.info(f"‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ (PID: {os.getpid()})")
        return True
    except IOError:
        logger.error("‚ùå –î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
        logger.error("‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–ø—É—â–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å —ç—Ç–∏–º —Ç–æ–∫–µ–Ω–æ–º.")
        return False

def release_lock():
    """–û—Å–≤–æ–±–æ–¥–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É"""
    global lock_file_handle
    if lock_file_handle:
        try:
            fcntl.flock(lock_file_handle, fcntl.LOCK_UN)
            lock_file_handle.close()
            if os.path.exists(LOCK_FILE):
                os.remove(LOCK_FILE)
            logger.info("‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")

class YoVPNBot:
    """
    –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ YoVPN
    
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
    - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ middleware
    - –ó–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –±–æ—Ç–∞
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞–º–∏
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.bot = Bot(
            token=config.BOT_TOKEN,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        self.dp = Dispatcher(storage=MemoryStorage())
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –û–î–ò–ù –†–ê–ó
        self.services = BotServices(self.bot)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware —Å –≥–æ—Ç–æ–≤—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
        register_middleware(self.dp, self.services)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        register_handlers(self.dp)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Å –í–°–ï–ú–ò —Å–µ—Ä–≤–∏—Å–∞–º–∏
        init_admin_panel(
            self.services.user_service,
            self.services.marzban_service,
            self.services.ui_service,
            self.services.animation_service  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω animation_service
        )
        
        logger.info("YoVPN Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö"""
        max_retries = 10
        base_delay = 5.0  # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        max_delay = 60.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        for attempt in range(max_retries):
            try:
                logger.info("üöÄ –ó–∞–ø—É—Å–∫ YoVPN Bot...")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
                await self.services.start_background_tasks()
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
                await self.dp.start_polling(
                    self.bot,
                    allowed_updates=["message", "callback_query"]
                )
                
                # –ï—Å–ª–∏ polling –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫, –≤—ã—Ö–æ–¥–∏–º
                break
                
            except TelegramConflictError as e:
                # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –æ—Ç—Å—Ç—É–ø–æ–º –∏ –¥–∂–∏—Ç—Ç–µ—Ä–æ–º
                delay = min(base_delay * (2 ** attempt), max_delay)
                jitter = random.uniform(0, delay * 0.3)  # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å ¬±30%
                total_delay = delay + jitter
                
                bot_info = await self.bot.get_me()
                logger.warning(
                    f"‚ö†Ô∏è TelegramConflictError: {e}\n"
                    f"üí° –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å –¥—Ä—É–≥–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –±–æ—Ç–∞ (ID: {bot_info.id})\n"
                    f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}\n"
                    f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {total_delay:.2f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...\n"
                    f"\nüìã –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞:\n"
                    f"   1. –î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω –Ω–∞ —ç—Ç–æ–º –∏–ª–∏ –¥—Ä—É–≥–æ–º —Å–µ—Ä–≤–µ—Ä–µ\n"
                    f"   2. –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö\n"
                    f"   3. –ü—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–µ –±—ã–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
                    f"\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
                    f"   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: docker ps | grep bot\n"
                    f"   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: ps aux | grep 'bot/main.py'\n"
                    f"   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö\n"
                )
                
                if attempt < max_retries - 1:
                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    await self.services.stop_background_tasks()
                    
                    # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    await asyncio.sleep(total_delay)
                else:
                    logger.error(
                        f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ ({max_retries})\n"
                        f"üö´ –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å –¥—Ä—É–≥–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –±–æ—Ç–∞\n"
                        f"üí° –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—Ä—É—á–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã"
                    )
                    raise
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
                raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        try:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ YoVPN Bot...")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            await self.services.stop_background_tasks()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
            await self.bot.session.close()
            
            logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä
    if not acquire_lock():
        logger.error("üö´ –ó–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω: –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å –¥—Ä—É–≥–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –±–æ—Ç–∞")
        logger.error("üí° –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:")
        logger.error("   1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Å–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞")
        logger.error("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: docker ps | grep bot")
        logger.error("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å—ã: ps aux | grep 'bot/main.py'")
        logger.error("   4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –¥—Ä—É–≥–æ–º —Å–µ—Ä–≤–µ—Ä–µ —Å —Ç–µ–º –∂–µ —Ç–æ–∫–µ–Ω–æ–º")
        sys.exit(1)
    
    bot = YoVPNBot()
    
    try:
        await bot.start()
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await bot.stop()
        release_lock()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        release_lock()
    except Exception as e:
        logger.error(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        release_lock()
        sys.exit(1)
