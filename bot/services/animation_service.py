"""
–°–µ—Ä–≤–∏—Å –∞–Ω–∏–º–∞—Ü–∏–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å—Ç–∏–∫–µ—Ä–∞–º–∏
"""

import logging
from typing import Optional, Dict, Any
from aiogram import Bot
from aiogram.types import Message

from assets.animations.effects import MESSAGE_EFFECTS, get_effect_id, get_usage_example

logger = logging.getLogger(__name__)

class AnimationService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
    
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
    - –û—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞–º–∏ –∏ GIF
    - –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤
    - Fallback –Ω–∞ —ç–º–æ–¥–∑–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    """
    
    def __init__(self, bot: Bot):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        self.bot = bot
        self.stickers = {
            'loading': [],
            'success': [],
            'error': [],
            'server': [],
            'security': [],
            'network': [],
            'celebration': []
        }
        
        logger.info("‚úÖ AnimationService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def send_welcome_message(self, message: Message, user_name: str) -> Message:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            Message: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        welcome_text = f"""
üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ YoVPN, {user_name}!</b>

üîí <b>–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç</b> —Ç–µ–ø–µ—Ä—å —É –≤–∞—Å –≤ –∫–∞—Ä–º–∞–Ω–µ!
‚ö° <b>–í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å</b> –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
üõ°Ô∏è <b>–ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å</b> –∏ –∑–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
üí∞ <b>–í—Å–µ–≥–æ 4 —Ä—É–±–ª—è –≤ –¥–µ–Ω—å</b> - —á–µ—Å—Ç–Ω–∞—è —Ü–µ–Ω–∞

<b>–ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç:</b>
‚Ä¢ üöÄ –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
‚Ä¢ üì± –ü—Ä–æ—Å—Ç–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ –ª—é–±–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ  
‚Ä¢ üåç –î–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–µ—Ä–∞–º –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É
‚Ä¢ üí¨ –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

<b>–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?</b> –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá
        """
        
        return await self.reply_with_effect(
            message,
            welcome_text,
            'heart',
            reply_markup=self._get_main_menu_keyboard()
        )
    
    async def send_subscription_activated(self, message: Message, days: int) -> Message:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
        
        Returns:
            Message: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        activation_text = f"""
üéâ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>

‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –ê–∫—Ç–∏–≤–Ω–∞
üìÖ <b>–°—Ä–æ–∫:</b> {days} –¥–Ω–µ–π
üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 4 ‚ÇΩ –≤ –¥–µ–Ω—å
üîÑ <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ:</b> –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ

<b>–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:</b>
1. üì± –ù–∞—Å—Ç—Ä–æ–π—Ç–µ VPN –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
2. üîó –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
3. üöÄ –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º!

<b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b> –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É üëá
        """
        
        return await self.reply_with_effect(
            message,
            activation_text,
            'fire',
            reply_markup=self._get_subscription_menu_keyboard()
        )
    
    async def send_payment_success(self, message: Message, amount: float, days: int) -> Message:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            amount: –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        
        Returns:
            Message: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        payment_text = f"""
üí∞ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>

‚úÖ <b>–°—É–º–º–∞:</b> {amount:.2f} ‚ÇΩ
üìÖ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ –¥–Ω–µ–π:</b> {days}
üí≥ <b>–°—Ç–∞—Ç—É—Å:</b> –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ

<b>–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω!</b>
–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ VPN.

<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b> –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá
        """
        
        return await self.reply_with_effect(
            message,
            payment_text,
            'confetti',
            reply_markup=self._get_payment_success_keyboard()
        )
    
    async def send_loading_message(self, message: Message, text: str) -> Message:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Returns:
            Message: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        return await self.reply_with_effect(
            message,
            text,
            'loading'
        )
    
    async def send_error_message(self, message: Message, error_text: str, is_critical: bool = False) -> Message:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            error_text: –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
            is_critical: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ª–∏ –æ—à–∏–±–∫–∞
        
        Returns:
            Message: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        effect = 'poop' if is_critical else 'thumbs_down'
        
        return await self.reply_with_effect(
            message,
            error_text,
            effect
        )
    
    async def reply_with_effect(self, message: Message, text: str, effect_name: str, **kwargs) -> Message:
        """
        –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            text: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            effect_name: –ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        
        Returns:
            Message: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        try:
            effect_id = get_effect_id(effect_name)
            
            if effect_id:
                kwargs['message_effect_id'] = effect_id
            
            return await message.reply(text, **kwargs)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º: {e}")
            # Fallback –Ω–∞ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return await message.reply(text, **kwargs)
    
    async def send_message_with_effect(self, chat_id: int, text: str, effect_name: str, **kwargs) -> Message:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            effect_name: –ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        
        Returns:
            Message: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        try:
            effect_id = get_effect_id(effect_name)
            
            if effect_id:
                kwargs['message_effect_id'] = effect_id
            
            return await self.bot.send_message(chat_id, text, **kwargs)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º: {e}")
            # Fallback –Ω–∞ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return await self.bot.send_message(chat_id, text, **kwargs)
    
    def _get_main_menu_keyboard(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        return InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üì± –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="my_subscriptions"),
                InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="top_up")
            ],
            [
                InlineKeyboardButton(text="üéÅ –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referrals"),
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
            ],
            [
                InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
                InlineKeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")
            ]
        ])
    
    def _get_subscription_menu_keyboard(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏"""
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        return InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üì± –ù–∞—Å—Ç—Ä–æ–∏—Ç—å VPN", callback_data="setup_vpn"),
                InlineKeyboardButton(text="üîó –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data="copy_config")
            ],
            [
                InlineKeyboardButton(text="üìä QR-–∫–æ–¥", callback_data="show_qr"),
                InlineKeyboardButton(text="üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instructions")
            ],
            [
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]
        ])
    
    def _get_payment_success_keyboard(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        return InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üì± –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="activate_subscription"),
                InlineKeyboardButton(text="üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="my_balance")
            ],
            [
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]
        ])
    
    def get_available_effects(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        
        Returns:
            Dict: –°–ª–æ–≤–∞—Ä—å —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
        """
        return MESSAGE_EFFECTS
    
    def get_effect_info(self, effect_name: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ñ—Ñ–µ–∫—Ç–µ
        
        Args:
            effect_name: –ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
        
        Returns:
            Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç—Ñ—Ñ–µ–∫—Ç–µ
        """
        return get_usage_example(effect_name)