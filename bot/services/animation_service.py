"""
–°–µ—Ä–≤–∏—Å –∞–Ω–∏–º–∞—Ü–∏–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å—Ç–∏–∫–µ—Ä–∞–º–∏
"""

import logging
from typing import Optional, Dict, Any
from aiogram import Bot
from aiogram.types import Message

from assets.animations.effects import MESSAGE_EFFECTS, get_effect_id, get_usage_example, get_fallback_emoji

logger = logging.getLogger(__name__)

class AnimationService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
    
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
    - –û—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞–º–∏ –∏ GIF
    - –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤
    - Fallback –Ω–∞ —ç–º–æ–¥–∑–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    """
    
    def __init__(self, bot: Bot):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        self.bot = bot
        self.stickers = {
            'loading': [],
            'success': [],
            'error': [],
            'server': [],
            'security': [],
            'network': [],
            'celebration': []
        }
        
        logger.info("‚úÖ AnimationService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def show_loading_animation(self, message: Message) -> None:
        """
        –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
        –°—Ç–∏–ª—å: —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä–∞–º
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        import asyncio
        
        steps = [
            {"text": "üîÑ <b>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...</b>", "delay": 0.8},
            {"text": "üîê <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è...</b>\n\n‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí 30%", "delay": 0.9},
            {"text": "üåê <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º...</b>\n\n‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí 60%", "delay": 0.9},
            {"text": "üõ°Ô∏è <b>–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∑–∞—â–∏—Ç—ã...</b>\n\n‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí 90%", "delay": 0.8},
            {"text": "‚úÖ <b>–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!</b>\n\n‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 100%", "delay": 1.0}
        ]
        
        loading_msg = await message.answer(steps[0]["text"], parse_mode='HTML')
        
        for i, step in enumerate(steps[1:], 1):
            await asyncio.sleep(steps[i-1]["delay"])
            try:
                await loading_msg.edit_text(step["text"], parse_mode='HTML')
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏: {e}")
        
        await asyncio.sleep(steps[-1]["delay"])
        await loading_msg.delete()
    
    async def send_welcome_message(self, message: Message, user_name: str, balance: float = 0.0, subscription_days: int = 0, is_new: bool = False) -> Message:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Ç–µ–∫—Å—Ç–æ–≤
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            balance: –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            subscription_days: –î–Ω–∏ –¥–æ—Å—Ç—É–ø–∞
            is_new: –ù–æ–≤—ã–π –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        
        Returns:
            Message: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        try:
            from bot.utils.texts import get_welcome_text, get_new_user_welcome_text
            from bot.keyboards.menu_kb import MenuKeyboards
            
            if is_new:
                welcome_text = get_new_user_welcome_text(user_name)
            else:
                welcome_text = get_welcome_text(user_name, balance, subscription_days)
            
            return await self.reply_with_effect(
                message,
                welcome_text,
                'heart',
                reply_markup=MenuKeyboards.get_main_menu(),
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç
            welcome_text = f"<b>‚ú® –ü—Ä–∏–≤–µ—Ç, {user_name}!</b>\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ YoVPN!"
            return await message.reply(welcome_text, parse_mode='HTML')
    
    async def send_subscription_activated(self, message: Message, days: int) -> Message:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
        
        Returns:
            Message: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        activation_text = f"""
üéâ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>

‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –ê–∫—Ç–∏–≤–Ω–∞
üìÖ <b>–°—Ä–æ–∫:</b> {days} –¥–Ω–µ–π
üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 4 ‚ÇΩ –≤ –¥–µ–Ω—å
üîÑ <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ:</b> –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ

<b>–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:</b>
1. üì± –ù–∞—Å—Ç—Ä–æ–π—Ç–µ VPN –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
2. üîó –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
3. üöÄ –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º!

<b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b> –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É üëá
        """
        
        return await self.reply_with_effect(
            message,
            activation_text,
            'fire',
            reply_markup=self._get_subscription_menu_keyboard(),
            parse_mode='HTML'
        )
    
    async def send_payment_success(self, message: Message, amount: float, days: int) -> Message:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            amount: –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        
        Returns:
            Message: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        payment_text = f"""
üí∞ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>

‚úÖ <b>–°—É–º–º–∞:</b> {amount:.2f} ‚ÇΩ
üìÖ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ –¥–Ω–µ–π:</b> {days}
üí≥ <b>–°—Ç–∞—Ç—É—Å:</b> –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ

<b>–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω!</b>
–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ VPN.

<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b> –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá
        """
        
        return await self.reply_with_effect(
            message,
            payment_text,
            'confetti',
            reply_markup=self._get_payment_success_keyboard(),
            parse_mode='HTML'
        )
    
    async def send_loading_message(self, message: Message, text: str) -> Message:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Returns:
            Message: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        return await self.reply_with_effect(
            message,
            text,
            'loading',
            parse_mode='HTML'
        )
    
    async def send_error_message(self, message: Message, error_text: str, is_critical: bool = False) -> Message:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            error_text: –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
            is_critical: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ª–∏ –æ—à–∏–±–∫–∞
        
        Returns:
            Message: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        effect = 'poop' if is_critical else 'thumbs_down'
        
        return await self.reply_with_effect(
            message,
            error_text,
            effect,
            parse_mode='HTML'
        )
    
    async def reply_with_effect(self, message: Message, text: str, effect_name: str, **kwargs) -> Message:
        """
        –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            text: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            effect_name: –ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        
        Returns:
            Message: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º parse_mode –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        if 'parse_mode' not in kwargs:
            kwargs['parse_mode'] = 'HTML'
        
        try:
            effect_id = get_effect_id(effect_name)
            
            if effect_id:
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º
                try:
                    kwargs_with_effect = kwargs.copy()
                    kwargs_with_effect['message_effect_id'] = effect_id
                    return await message.reply(text, **kwargs_with_effect)
                except Exception as effect_error:
                    # –ï—Å–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º fallback —ç–º–æ–¥–∑–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —ç—Ñ—Ñ–µ–∫—Ç–∞
                    fallback_emoji = get_fallback_emoji(effect_name)
                    enhanced_text = f"{fallback_emoji} {text}" if fallback_emoji else text
                    logger.debug(f"–≠—Ñ—Ñ–µ–∫—Ç '{effect_name}' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback —ç–º–æ–¥–∑–∏")
                    return await message.reply(enhanced_text, **kwargs)
            else:
                # –ï—Å–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º fallback —ç–º–æ–¥–∑–∏
                fallback_emoji = get_fallback_emoji(effect_name)
                enhanced_text = f"{fallback_emoji} {text}" if fallback_emoji else text
                logger.debug(f"–≠—Ñ—Ñ–µ–∫—Ç '{effect_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback —ç–º–æ–¥–∑–∏")
                return await message.reply(enhanced_text, **kwargs)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º: {e}")
            # Fallback –Ω–∞ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return await message.reply(text, **kwargs)
    
    async def send_message_with_effect(self, chat_id: int, text: str, effect_name: str, **kwargs) -> Message:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            effect_name: –ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        
        Returns:
            Message: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º parse_mode –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        if 'parse_mode' not in kwargs:
            kwargs['parse_mode'] = 'HTML'
        
        try:
            effect_id = get_effect_id(effect_name)
            
            if effect_id:
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º
                try:
                    kwargs_with_effect = kwargs.copy()
                    kwargs_with_effect['message_effect_id'] = effect_id
                    return await self.bot.send_message(chat_id, text, **kwargs_with_effect)
                except Exception as effect_error:
                    # –ï—Å–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º fallback —ç–º–æ–¥–∑–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —ç—Ñ—Ñ–µ–∫—Ç–∞
                    fallback_emoji = get_fallback_emoji(effect_name)
                    enhanced_text = f"{fallback_emoji} {text}" if fallback_emoji else text
                    logger.debug(f"–≠—Ñ—Ñ–µ–∫—Ç '{effect_name}' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback —ç–º–æ–¥–∑–∏")
                    return await self.bot.send_message(chat_id, enhanced_text, **kwargs)
            else:
                # –ï—Å–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º fallback —ç–º–æ–¥–∑–∏
                fallback_emoji = get_fallback_emoji(effect_name)
                enhanced_text = f"{fallback_emoji} {text}" if fallback_emoji else text
                logger.debug(f"–≠—Ñ—Ñ–µ–∫—Ç '{effect_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback —ç–º–æ–¥–∑–∏")
                return await self.bot.send_message(chat_id, enhanced_text, **kwargs)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º: {e}")
            # Fallback –Ω–∞ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return await self.bot.send_message(chat_id, text, **kwargs)
    
    def _get_main_menu_keyboard(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        try:
            from bot.keyboards.menu_kb import MenuKeyboards
            return MenuKeyboards.get_main_menu()
        except Exception:
            # Fallback –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            return InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üì± –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="my_subscriptions"),
                    InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="top_up")
                ],
                [
                    InlineKeyboardButton(text="üéÅ –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referrals"),
                    InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
                ],
                [
                    InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
                    InlineKeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")
                ]
            ])
    
    def _get_subscription_menu_keyboard(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏"""
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        return InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üì± –ù–∞—Å—Ç—Ä–æ–∏—Ç—å VPN", callback_data="setup_vpn"),
                InlineKeyboardButton(text="üîó –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data="copy_config")
            ],
            [
                InlineKeyboardButton(text="üìä QR-–∫–æ–¥", callback_data="show_qr"),
                InlineKeyboardButton(text="üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instructions")
            ],
            [
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]
        ])
    
    def _get_payment_success_keyboard(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        return InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üì± –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="activate_subscription"),
                InlineKeyboardButton(text="üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="my_balance")
            ],
            [
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]
        ])
    
    def get_available_effects(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        
        Returns:
            Dict: –°–ª–æ–≤–∞—Ä—å —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
        """
        return MESSAGE_EFFECTS
    
    def get_effect_info(self, effect_name: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ñ—Ñ–µ–∫—Ç–µ
        
        Args:
            effect_name: –ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
        
        Returns:
            Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç—Ñ—Ñ–µ–∫—Ç–µ
        """
        return get_usage_example(effect_name)