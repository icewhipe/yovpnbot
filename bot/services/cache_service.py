"""
–°–µ—Ä–≤–∏—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î –∏ API
"""

import logging
import time
from typing import Optional, Any, Dict, Callable
from functools import wraps
import asyncio

logger = logging.getLogger(__name__)

class CacheService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
    - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
    - –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤
    - –£–º–µ–Ω—å—à–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –ë–î –∏ API
    """
    
    def __init__(self, default_ttl: int = 300):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Args:
            default_ttl: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        """
        self.default_ttl = default_ttl
        self._cache: Dict[str, Dict[str, Any]] = {}
        self._stats = {
            'hits': 0,
            'misses': 0,
            'sets': 0,
            'deletes': 0
        }
        
        logger.info(f"‚úÖ CacheService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (TTL: {default_ttl}s)")
    
    def _generate_key(self, prefix: str, *args, **kwargs) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –∫—ç—à–∞
        
        Args:
            prefix: –ü—Ä–µ—Ñ–∏–∫—Å –∫–ª—é—á–∞
            *args: –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            **kwargs: –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        
        Returns:
            str: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –∫—ç—à–∞
        """
        args_str = '_'.join(str(arg) for arg in args)
        kwargs_str = '_'.join(f"{k}={v}" for k, v in sorted(kwargs.items()))
        
        parts = [prefix]
        if args_str:
            parts.append(args_str)
        if kwargs_str:
            parts.append(kwargs_str)
        
        return ':'.join(parts)
    
    def get(self, key: str) -> Optional[Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞
        
        Args:
            key: –ö–ª—é—á –∫—ç—à–∞
        
        Returns:
            Optional[Any]: –ó–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ None
        """
        if key not in self._cache:
            self._stats['misses'] += 1
            return None
        
        entry = self._cache[key]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        if entry['expires_at'] < time.time():
            # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à—É—é –∑–∞–ø–∏—Å—å
            del self._cache[key]
            self._stats['misses'] += 1
            logger.debug(f"üóëÔ∏è –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª: {key}")
            return None
        
        self._stats['hits'] += 1
        logger.debug(f"‚úÖ –ü–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –∫—ç—à: {key}")
        return entry['value']
    
    def set(self, key: str, value: Any, ttl: Optional[int] = None):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫—ç—à
        
        Args:
            key: –ö–ª—é—á –∫—ç—à–∞
            value: –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
            ttl: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö), –µ—Å–ª–∏ None - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è default_ttl
        """
        if ttl is None:
            ttl = self.default_ttl
        
        self._cache[key] = {
            'value': value,
            'expires_at': time.time() + ttl,
            'created_at': time.time()
        }
        
        self._stats['sets'] += 1
        logger.debug(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫—ç—à: {key} (TTL: {ttl}s)")
    
    def delete(self, key: str):
        """
        –£–¥–∞–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞
        
        Args:
            key: –ö–ª—é—á –∫—ç—à–∞
        """
        if key in self._cache:
            del self._cache[key]
            self._stats['deletes'] += 1
            logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∫—ç—à–∞: {key}")
    
    def delete_pattern(self, pattern: str):
        """
        –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–ª—é—á–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—É
        
        Args:
            pattern: –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–µ–π
        """
        keys_to_delete = [key for key in self._cache.keys() if pattern in key]
        for key in keys_to_delete:
            del self._cache[key]
            self._stats['deletes'] += 1
        
        if keys_to_delete:
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {len(keys_to_delete)} –∑–∞–ø–∏—Å–µ–π –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É: {pattern}")
    
    def clear(self):
        """
        –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à
        """
        count = len(self._cache)
        self._cache.clear()
        logger.info(f"üóëÔ∏è –ö—ç—à –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω ({count} –∑–∞–ø–∏—Å–µ–π)")
    
    def cleanup_expired(self):
        """
        –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏
        """
        current_time = time.time()
        expired_keys = [
            key for key, entry in self._cache.items()
            if entry['expires_at'] < current_time
        ]
        
        for key in expired_keys:
            del self._cache[key]
        
        if expired_keys:
            logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ {len(expired_keys)} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π")
    
    def get_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
        
        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
        """
        total_requests = self._stats['hits'] + self._stats['misses']
        hit_rate = (self._stats['hits'] / total_requests * 100) if total_requests > 0 else 0
        
        return {
            'hits': self._stats['hits'],
            'misses': self._stats['misses'],
            'sets': self._stats['sets'],
            'deletes': self._stats['deletes'],
            'hit_rate': round(hit_rate, 2),
            'total_entries': len(self._cache),
            'total_requests': total_requests
        }
    
    def cached(self, key_prefix: str, ttl: Optional[int] = None):
        """
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
        
        Args:
            key_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –∫–ª—é—á–∞ –∫—ç—à–∞
            ttl: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞
        
        Returns:
            Decorator: –î–µ–∫–æ—Ä–∞—Ç–æ—Ä
        """
        def decorator(func: Callable):
            @wraps(func)
            async def async_wrapper(*args, **kwargs):
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á
                cache_key = self._generate_key(key_prefix, *args, **kwargs)
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
                cached_value = self.get(cache_key)
                if cached_value is not None:
                    return cached_value
                
                # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                result = await func(*args, **kwargs)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                self.set(cache_key, result, ttl)
                
                return result
            
            @wraps(func)
            def sync_wrapper(*args, **kwargs):
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á
                cache_key = self._generate_key(key_prefix, *args, **kwargs)
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
                cached_value = self.get(cache_key)
                if cached_value is not None:
                    return cached_value
                
                # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                result = func(*args, **kwargs)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                self.set(cache_key, result, ttl)
                
                return result
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è
            if asyncio.iscoroutinefunction(func):
                return async_wrapper
            else:
                return sync_wrapper
        
        return decorator
    
    async def start_cleanup_task(self, interval: int = 300):
        """
        –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—á–∏—Å—Ç–∫–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        """
        logger.info(f"üîÑ –ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval}s)")
        
        while True:
            await asyncio.sleep(interval)
            self.cleanup_expired()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞
_cache_instance = None

def get_cache() -> CacheService:
    """
    –ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞
    
    Returns:
        CacheService: –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    global _cache_instance
    if _cache_instance is None:
        _cache_instance = CacheService()
    return _cache_instance
