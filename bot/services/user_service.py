"""
–°–µ—Ä–≤–∏—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –∏—Ö –¥–∞–Ω–Ω—ã–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
"""

import json
import logging
from typing import Optional, Dict, Any
from pathlib import Path
from .cache_service import get_cache

logger = logging.getLogger(__name__)
cache = get_cache()

class UserService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
    - –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º –∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
    """
    
    def __init__(self, data_file: str = "data.json"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
        
        Args:
            data_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏
        """
        self.data_file = Path(data_file)
        self.users = self._load_users()
        logger.info(f"‚úÖ UserService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    def _load_users(self) -> Dict[int, Dict[str, Any]]:
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
        
        Returns:
            Dict: –°–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        try:
            if self.data_file.exists():
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return {}
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return {}
    
    def _save_users(self):
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª –∏ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à
        """
        try:
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(self.users, f, ensure_ascii=False, indent=2)
            
            # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cache.delete_pattern("user:")
            cache.delete_pattern("user_stats:")
            
            logger.debug("üíæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –∫—ç—à –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    
    async def create_or_update_user(self, user_id: int, username: Optional[str], first_name: str) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            first_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            Dict: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if user_id not in self.users:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.users[user_id] = {
                'user_id': user_id,
                'username': username,
                'first_name': first_name,
                'balance': 0.0,
                'subscription_active': False,
                'subscription_days': 0,
                'total_payments': 0.0,
                'referrals': [],
                'referral_code': f"ref_{user_id}",
                'created_at': self._get_current_timestamp(),
                'last_activity': self._get_current_timestamp(),
                'settings': {
                    'notifications': True,
                    'auto_renewal': True,
                    'language': 'ru'
                }
            }
            logger.info(f"üë§ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {first_name} (ID: {user_id})")
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.users[user_id].update({
                'username': username,
                'first_name': first_name,
                'last_activity': self._get_current_timestamp()
            })
            logger.debug(f"üë§ –û–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {first_name} (ID: {user_id})")
        
        self._save_users()
        return self.users[user_id]
    
    async def get_user(self, user_id: int) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            Optional[Dict]: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = f"user:{user_id}"
        cached_user = cache.get(cache_key)
        if cached_user is not None:
            return cached_user
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î
        user = self.users.get(user_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        if user:
            cache.set(cache_key, user, ttl=60)  # –ö—ç—à –Ω–∞ 1 –º–∏–Ω—É—Ç—É
        
        return user
    
    async def get_or_create_user(self, user_id: int, username: Optional[str] = None, first_name: str = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å") -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            first_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            Dict: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user = await self.get_user(user_id)
        if not user:
            user = await self.create_or_update_user(user_id, username, first_name)
            logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        return user
    
    async def update_user_balance(self, user_id: int, amount: float, operation: str = "add") -> bool:
        """
        –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            amount: –°—É–º–º–∞
            operation: –û–ø–µ—Ä–∞—Ü–∏—è (add, subtract, set)
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        if user_id not in self.users:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        user = self.users[user_id]
        current_balance = user.get('balance', 0.0)
        
        if operation == "add":
            new_balance = current_balance + amount
        elif operation == "subtract":
            new_balance = max(0, current_balance - amount)
        elif operation == "set":
            new_balance = amount
        else:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: {operation}")
            return False
        
        user['balance'] = round(new_balance, 2)
        self._save_users()
        
        logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {current_balance} ‚Üí {new_balance}")
        return True
    
    async def get_user_balance(self, user_id: int) -> float:
        """
        –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            float: –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user = await self.get_user(user_id)
        return user.get('balance', 0.0) if user else 0.0
    
    async def calculate_days_from_balance(self, user_id: int, daily_cost: float = 4.0) -> int:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏–∑ –±–∞–ª–∞–Ω—Å–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            daily_cost: –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–Ω—è
        
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        """
        balance = await self.get_user_balance(user_id)
        return int(balance / daily_cost)
    
    async def activate_subscription(self, user_id: int, days: int) -> bool:
        """
        –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        """
        if user_id not in self.users:
            return False
        
        user = self.users[user_id]
        user['subscription_active'] = True
        user['subscription_days'] = days
        user['subscription_started'] = self._get_current_timestamp()
        
        self._save_users()
        logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {days} –¥–Ω–µ–π")
        return True
    
    async def deactivate_subscription(self, user_id: int) -> bool:
        """
        –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        """
        if user_id not in self.users:
            return False
        
        user = self.users[user_id]
        user['subscription_active'] = False
        user['subscription_days'] = 0
        
        self._save_users()
        logger.info(f"‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return True
    
    async def get_user_stats(self, user_id: int) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user = await self.get_user(user_id)
        if not user:
            return {}
        
        return {
            'balance': user.get('balance', 0.0),
            'subscription_active': user.get('subscription_active', False),
            'subscription_days': user.get('subscription_days', 0),
            'total_payments': user.get('total_payments', 0.0),
            'referrals_count': len(user.get('referrals', [])),
            'created_at': user.get('created_at'),
            'last_activity': user.get('last_activity')
        }
    
    async def add_referral(self, user_id: int, referred_user_id: int) -> bool:
        """
        –î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≥–ª–∞—Å–∏–ª
            referred_user_id: ID –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        """
        if user_id not in self.users:
            return False
        
        user = self.users[user_id]
        referrals = user.get('referrals', [])
        
        if referred_user_id not in referrals:
            referrals.append(referred_user_id)
            user['referrals'] = referrals
            self._save_users()
            
            # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
            await self.update_user_balance(user_id, 20.0, "add")
            
            logger.info(f"üéÅ –î–æ–±–∞–≤–ª–µ–Ω —Ä–µ—Ñ–µ—Ä–∞–ª: {user_id} ‚Üí {referred_user_id}")
            return True
        
        return False
    
    def _get_current_timestamp(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É"""
        from datetime import datetime
        return datetime.now().isoformat()
    
    async def get_all_users(self) -> Dict[int, Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        Returns:
            Dict: –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        """
        return self.users.copy()
    
    async def get_users_count(self) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        return len(self.users)