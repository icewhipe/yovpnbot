"""
–°–µ—Ä–≤–∏—Å Marzban
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–∞–Ω–µ–ª—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Marzban –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VPN-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
"""

import logging
import aiohttp
from typing import Optional, Dict, Any, List

logger = logging.getLogger(__name__)

class MarzbanService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Marzban API
    
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
    - –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ VPN-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    - –ì–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π VLESS
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –∏ –¥–æ—Å—Ç—É–ø–æ–º
    - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –ø–∞–Ω–µ–ª—å—é Marzban
    """
    
    def __init__(self, api_url: str = "", admin_token: str = ""):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
        
        Args:
            api_url: URL API Marzban
            admin_token: –¢–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        """
        self.api_url = api_url.rstrip('/')
        self.admin_token = admin_token
        self.session = None
        self._available = False
        
        logger.info(f"‚úÖ MarzbanService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {self.api_url}")
    
    async def _get_session(self) -> aiohttp.ClientSession:
        """–ü–æ–ª—É—á–∏—Ç—å HTTP —Å–µ—Å—Å–∏—é"""
        if not self.session:
            self.session = aiohttp.ClientSession(
                headers={
                    'Authorization': f'Bearer {self.admin_token}',
                    'Content-Type': 'application/json'
                },
                timeout=aiohttp.ClientTimeout(total=30)
            )
        return self.session
    
    async def check_api_availability(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Marzban API
        
        Returns:
            bool: –î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ API
        """
        try:
            session = await self._get_session()
            async with session.get(f"{self.api_url}/system") as response:
                if response.status == 200:
                    self._available = True
                    logger.info("‚úÖ Marzban API –¥–æ—Å—Ç—É–ø–µ–Ω")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è Marzban API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status}")
                    return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Marzban API: {e}")
            self._available = False
            return False
    
    async def create_user(self, username: str, user_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Marzban
        
        Args:
            username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (expire, data_limit, status, days)
        
        Returns:
            Optional[Dict]: –î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if not self._available:
            logger.warning("‚ö†Ô∏è Marzban API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return None
        
        try:
            session = await self._get_session()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º UUID –¥–ª—è VLESS
            vless_uuid = user_data.get('vless_id', self._generate_uuid())
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–Ω–µ–π
            import time
            from datetime import datetime, timedelta
            
            days = user_data.get('days', 0)
            if days > 0:
                expire_timestamp = int((datetime.now() + timedelta(days=days)).timestamp())
            else:
                expire_timestamp = user_data.get('expire', 0)  # 0 = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å VLESS TCP REALITY
            payload = {
                "username": username,
                "proxies": {
                    "vless": {
                        "id": vless_uuid,
                        "flow": "xtls-rprx-vision"
                    }
                },
                "inbounds": {
                    "vless": [
                        "VLESS TCP REALITY",
                        "VLESS GRPC REALITY"
                    ]
                },
                "expire": expire_timestamp,
                "data_limit": user_data.get('data_limit', 0),  # 0 = –±–µ–∑–ª–∏–º–∏—Ç
                "data_limit_reset_strategy": "no_reset",
                "status": user_data.get('status', 'active'),
                "note": user_data.get('note', f"–°–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ YoVPN Bot - {days} –¥–Ω–µ–π")
            }
            
            logger.info(f"üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: days={days}, expire={expire_timestamp}")
            logger.debug(f"Payload: {payload}")
            
            async with session.post(f"{self.api_url}/user", json=payload) as response:
                if response.status == 200:
                    result = await response.json()
                    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Å–æ–∑–¥–∞–Ω –≤ Marzban (VLESS TCP REALITY)")
                    return result
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: HTTP {response.status}")
                    logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_text}")
                    return None
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Marzban: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return None
    
    async def update_user(self, username: str, updates: Dict[str, Any]) -> bool:
        """
        –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Marzban
        
        Args:
            username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            updates: –û–±–Ω–æ–≤–ª–µ–Ω–∏—è
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        if not self._available:
            logger.warning("‚ö†Ô∏è Marzban API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return False
        
        try:
            session = await self._get_session()
            
            async with session.put(f"{self.api_url}/user/{username}", json=updates) as response:
                if response.status == 200:
                    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Marzban")
                    return True
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {error_text}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Marzban: {e}")
            return False
    
    async def get_user(self, username: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Marzban
        
        Args:
            username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            Optional[Dict]: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if not self._available:
            logger.warning("‚ö†Ô∏è Marzban API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return None
        
        try:
            session = await self._get_session()
            
            async with session.get(f"{self.api_url}/user/{username}") as response:
                if response.status == 200:
                    result = await response.json()
                    logger.debug(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
                    return result
                elif response.status == 404:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Marzban")
                    return None
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {error_text}")
                    return None
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Marzban: {e}")
            return None
    
    async def delete_user(self, username: str) -> bool:
        """
        –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Marzban
        
        Args:
            username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è
        """
        if not self._available:
            logger.warning("‚ö†Ô∏è Marzban API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return False
        
        try:
            session = await self._get_session()
            
            async with session.delete(f"{self.api_url}/user/{username}") as response:
                if response.status == 200:
                    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–¥–∞–ª–µ–Ω –∏–∑ Marzban")
                    return True
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {error_text}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Marzban: {e}")
            return False
    
    async def get_user_config(self, username: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            Optional[Dict]: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user_data = await self.get_user(username)
        if not user_data:
            return None
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º VLESS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            vless_config = self._generate_vless_config(user_data)
            
            return {
                'username': username,
                'vless_url': vless_config['url'],
                'subscription_url': f"{self.api_url}/sub/{username}",
                'expire': user_data.get('expire', 0),
                'status': user_data.get('status', 'inactive'),
                'data_limit': user_data.get('data_limit', 0),
                'used_traffic': user_data.get('used_traffic', 0)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è {username}: {e}")
            return None
    
    async def get_user_subscription(self, username: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å subscription URL –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Alias –¥–ª—è get_user_config –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å API
        
        Args:
            username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            Optional[Dict]: –î–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å subscription_url
        """
        return await self.get_user_config(username)
    
    def _generate_vless_config(self, user_data: Dict[str, Any]) -> Dict[str, str]:
        """
        –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å VLESS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        
        Args:
            user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            Dict: VLESS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        """
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç–æ—è—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        username = user_data.get('username', 'demo')
        
        return {
            'url': f"vless://{username}@demo-server.com:443?encryption=none&flow=xtls-rprx-vision&security=reality&sni=demo.com&pbk=demo-key&sid=demo-sid&fp=chrome&type=tcp&headerType=none#{username}",
            'config': f"vless://{username}@demo-server.com:443?encryption=none&flow=xtls-rprx-vision&security=reality&sni=demo.com&pbk=demo-key&sid=demo-sid&fp=chrome&type=tcp&headerType=none#{username}"
        }
    
    def _generate_uuid(self) -> str:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å UUID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        import uuid
        return str(uuid.uuid4())
    
    async def get_system_stats(self) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã Marzban
        
        Returns:
            Optional[Dict]: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        """
        if not self._available:
            return None
        
        try:
            session = await self._get_session()
            
            async with session.get(f"{self.api_url}/system") as response:
                if response.status == 200:
                    result = await response.json()
                    return result
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Marzban: {response.status}")
                    return None
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Marzban: {e}")
            return None
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å HTTP —Å–µ—Å—Å–∏—é"""
        if self.session:
            await self.session.close()
            self.session = None
            logger.info("üîå HTTP —Å–µ—Å—Å–∏—è Marzban –∑–∞–∫—Ä—ã—Ç–∞")
    
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API"""
        return self._available