"""
–°–µ—Ä–≤–∏—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ rate limiting, –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–ø–∞–º–∞
"""

import logging
import time
from typing import Dict, Optional, Tuple
from collections import defaultdict
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

class SecurityService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
    
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
    - Rate limiting (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤)
    - –í–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
    - –ó–∞—â–∏—Ç—É –æ—Ç —Å–ø–∞–º–∞ –∏ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–π
    - –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    """
    
    def __init__(self, rate_limit_rpm: int = 60, rate_limit_rph: int = 1000):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        
        Args:
            rate_limit_rpm: –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
            rate_limit_rph: –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å
        """
        self.rate_limit_rpm = rate_limit_rpm
        self.rate_limit_rph = rate_limit_rph
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
        self._user_requests: Dict[int, list] = defaultdict(list)
        self._blocked_users: Dict[int, datetime] = {}
        self._suspicious_activity: Dict[int, int] = defaultdict(int)
        
        logger.info(f"‚úÖ SecurityService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (RPM: {rate_limit_rpm}, RPH: {rate_limit_rph})")
    
    def check_rate_limit(self, user_id: int) -> Tuple[bool, Optional[str]]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å rate limit –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            Tuple[bool, Optional[str]]: (–†–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏, –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –µ—Å–ª–∏ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ)
        """
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user_id in self._blocked_users:
            unblock_time = self._blocked_users[user_id]
            if datetime.now() < unblock_time:
                remaining_time = int((unblock_time - datetime.now()).total_seconds())
                return False, f"‚ö†Ô∏è –í—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –û—Å—Ç–∞–ª–æ—Å—å: {remaining_time} —Å–µ–∫."
            else:
                # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                del self._blocked_users[user_id]
                logger.info(f"üîì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤
        requests = self._user_requests[user_id]
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
        requests = [req_time for req_time in requests if current_time - req_time < 3600]
        self._user_requests[user_id] = requests
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å
        if len(requests) >= self.rate_limit_rph:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å")
            self._block_user(user_id, minutes=60)
            return False, "‚ùå –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 1 —á–∞—Å."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
        recent_requests = [req_time for req_time in requests if current_time - req_time < 60]
        if len(recent_requests) >= self.rate_limit_rpm:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É")
            self._block_user(user_id, minutes=5)
            return False, "‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5 –º–∏–Ω—É—Ç."
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        self._user_requests[user_id].append(current_time)
        
        return True, None
    
    def _block_user(self, user_id: int, minutes: int = 5):
        """
        –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            minutes: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        """
        unblock_time = datetime.now() + timedelta(minutes=minutes)
        self._blocked_users[user_id] = unblock_time
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self._suspicious_activity[user_id] += 1
        
        logger.warning(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {minutes} –º–∏–Ω—É—Ç")
    
    def is_user_blocked(self, user_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            bool: –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        """
        if user_id not in self._blocked_users:
            return False
        
        if datetime.now() >= self._blocked_users[user_id]:
            del self._blocked_users[user_id]
            return False
        
        return True
    
    def validate_user_input(self, text: str, max_length: int = 1000) -> Tuple[bool, Optional[str]]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞
        
        Returns:
            Tuple[bool, Optional[str]]: (–í–∞–ª–∏–¥–Ω–æ –ª–∏, –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –µ—Å–ª–∏ –Ω–µ –≤–∞–ª–∏–¥–Ω–æ)
        """
        if not text or not text.strip():
            return False, "‚ùå –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        
        if len(text) > max_length:
            return False, f"‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º {max_length} —Å–∏–º–≤–æ–ª–æ–≤)"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–∞–º-–ø–∞—Ç—Ç–µ—Ä–Ω—ã
        spam_patterns = [
            'http://', 'https://', 'www.', '.com', '.ru', '.net',
            'telegram.me', 't.me', '@', 'bit.ly'
        ]
        
        suspicious_count = sum(1 for pattern in spam_patterns if pattern.lower() in text.lower())
        if suspicious_count >= 3:
            return False, "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"
        
        return True, None
    
    def validate_amount(self, amount: float, min_amount: float = 1.0, max_amount: float = 10000.0) -> Tuple[bool, Optional[str]]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞
        
        Args:
            amount: –°—É–º–º–∞
            min_amount: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞
            max_amount: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞
        
        Returns:
            Tuple[bool, Optional[str]]: (–í–∞–ª–∏–¥–Ω–æ –ª–∏, –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –µ—Å–ª–∏ –Ω–µ –≤–∞–ª–∏–¥–Ω–æ)
        """
        if amount < min_amount:
            return False, f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {min_amount} ‚ÇΩ"
        
        if amount > max_amount:
            return False, f"‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {max_amount} ‚ÇΩ"
        
        return True, None
    
    def validate_user_id(self, user_id: int) -> Tuple[bool, Optional[str]]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            Tuple[bool, Optional[str]]: (–í–∞–ª–∏–¥–Ω–æ –ª–∏, –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –µ—Å–ª–∏ –Ω–µ –≤–∞–ª–∏–¥–Ω–æ)
        """
        if not isinstance(user_id, int):
            return False, "‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º"
        
        if user_id <= 0:
            return False, "‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º"
        
        if user_id > 9999999999:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID Telegram
            return False, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID"
        
        return True, None
    
    def detect_suspicious_activity(self, user_id: int) -> bool:
        """
        –û–±–Ω–∞—Ä—É–∂–∏—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            bool: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        if self._suspicious_activity[user_id] >= 5:
            logger.warning(f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
        
        return False
    
    def get_security_stats(self) -> Dict[str, any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        
        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        """
        current_time = datetime.now()
        
        # –°—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        active_users = len([
            user_id for user_id, requests in self._user_requests.items()
            if any(current_time.timestamp() - req_time < 3600 for req_time in requests)
        ])
        
        # –°—á–∏—Ç–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        blocked_users = len([
            user_id for user_id, unblock_time in self._blocked_users.items()
            if current_time < unblock_time
        ])
        
        # –°—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
        suspicious_users = len([
            user_id for user_id, count in self._suspicious_activity.items()
            if count >= 3
        ])
        
        return {
            'active_users': active_users,
            'blocked_users': blocked_users,
            'suspicious_users': suspicious_users,
            'total_tracked_users': len(self._user_requests),
            'rate_limit_rpm': self.rate_limit_rpm,
            'rate_limit_rph': self.rate_limit_rph
        }
    
    def reset_user_limits(self, user_id: int):
        """
        –°–±—Ä–æ—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if user_id in self._user_requests:
            del self._user_requests[user_id]
        
        if user_id in self._blocked_users:
            del self._blocked_users[user_id]
        
        if user_id in self._suspicious_activity:
            del self._suspicious_activity[user_id]
        
        logger.info(f"üîÑ –õ–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–±—Ä–æ—à–µ–Ω—ã")
    
    def cleanup_old_data(self):
        """
        –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        """
        current_time = time.time()
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        for user_id in list(self._user_requests.keys()):
            requests = [req_time for req_time in self._user_requests[user_id] if current_time - req_time < 3600]
            if requests:
                self._user_requests[user_id] = requests
            else:
                del self._user_requests[user_id]
        
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        for user_id in list(self._blocked_users.keys()):
            if datetime.now() >= self._blocked_users[user_id]:
                del self._blocked_users[user_id]
        
        logger.debug("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
