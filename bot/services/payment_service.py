"""
–°–µ—Ä–≤–∏—Å –ø–ª–∞—Ç–µ–∂–µ–π
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞–º–∏, –±–∞–ª–∞–Ω—Å–æ–º –∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ —Å–ø–∏—Å–∞–Ω–∏—è–º–∏
"""

import asyncio
import logging
from typing import Dict, Any, List
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

class PaymentService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏
    
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
    - –û–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–µ–π –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π
    - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–ø–∏—Å–∞–Ω–∏—è –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–∞—Ö
    """
    
    def __init__(self, user_service, marzban_service, daily_cost: float = 4.0):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
        
        Args:
            user_service: –°–µ—Ä–≤–∏—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            marzban_service: –°–µ—Ä–≤–∏—Å Marzban
            daily_cost: –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–Ω—è –ø–æ–¥–ø–∏—Å–∫–∏
        """
        self.user_service = user_service
        self.marzban_service = marzban_service
        self.daily_cost = daily_cost
        self._running = False
        
        logger.info(f"‚úÖ PaymentService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–Ω—è: {daily_cost} ‚ÇΩ")
    
    async def process_payment(self, user_id: int, amount: float, payment_method: str = "demo") -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
            payment_method: –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
        
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
        """
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
            if payment_method == "demo":
                # –î–µ–º–æ-—Ä–µ–∂–∏–º: –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
                success = await self.user_service.update_user_balance(user_id, amount, "add")
                
                if success:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π
                    user = await self.user_service.get_user(user_id)
                    if user:
                        user['total_payments'] = user.get('total_payments', 0) + amount
                        self.user_service._save_users()
                    
                    days_added = int(amount / self.daily_cost)
                    
                    logger.info(f"üí∞ –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {user_id} +{amount} ‚ÇΩ ({days_added} –¥–Ω–µ–π)")
                    
                    return {
                        'success': True,
                        'amount': amount,
                        'days_added': days_added,
                        'new_balance': await self.user_service.get_user_balance(user_id),
                        'message': f"–ü–ª–∞—Ç–µ–∂ –Ω–∞ {amount:.2f} ‚ÇΩ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –î–æ–±–∞–≤–ª–µ–Ω–æ {days_added} –¥–Ω–µ–π."
                    }
                else:
                    return {
                        'success': False,
                        'error': '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞'
                    }
            else:
                # –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
                return {
                    'success': False,
                    'error': '–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return {
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}'
            }
    
    async def daily_payment_loop(self):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        """
        self._running = True
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π")
        
        while self._running:
            try:
                await self._process_daily_payments()
                # –ñ–¥–µ–º 24 —á–∞—Å–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await asyncio.sleep(24 * 60 * 60)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 1 —á–∞—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                await asyncio.sleep(60 * 60)
    
    async def _process_daily_payments(self):
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        try:
            users = await self.user_service.get_all_users()
            processed_count = 0
            deactivated_count = 0
            
            for user_id, user_data in users.items():
                if not user_data.get('subscription_active', False):
                    continue
                
                balance = user_data.get('balance', 0.0)
                
                if balance >= self.daily_cost:
                    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞ –¥–µ–Ω—å
                    success = await self.user_service.update_user_balance(
                        user_id, 
                        self.daily_cost, 
                        "subtract"
                    )
                    
                    if success:
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ Marzban
                        await self._update_marzban_subscription(user_id, user_data)
                        processed_count += 1
                        
                        logger.info(f"üí∞ –°–ø–∏—Å–∞–Ω–æ {self.daily_cost} ‚ÇΩ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                else:
                    # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ - –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                    await self.user_service.deactivate_subscription(user_id)
                    await self._deactivate_marzban_subscription(user_id, user_data)
                    deactivated_count += 1
                    
                    logger.info(f"‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤)")
            
            logger.info(f"üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã: {processed_count} —Å–ø–∏—Å–∞–Ω–∏–π, {deactivated_count} –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
    
    async def _update_marzban_subscription(self, user_id: int, user_data: Dict[str, Any]):
        """
        –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤ Marzban
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            username = user_data.get('username', f"user_{user_id}")
            
            # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –¥–µ–Ω—å
            new_expire = datetime.now() + timedelta(days=1)
            expire_timestamp = int(new_expire.timestamp())
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Marzban
            await self.marzban_service.update_user(
                username=username,
                updates={
                    'expire': expire_timestamp,
                    'status': 'active'
                }
            )
            
            logger.debug(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –≤ Marzban –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {username}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ Marzban: {e}")
    
    async def _deactivate_marzban_subscription(self, user_id: int, user_data: Dict[str, Any]):
        """
        –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤ Marzban
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            username = user_data.get('username', f"user_{user_id}")
            
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Marzban
            await self.marzban_service.update_user(
                username=username,
                updates={
                    'status': 'expired'
                }
            )
            
            logger.debug(f"‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –≤ Marzban –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è {username}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ Marzban: {e}")
    
    async def get_payment_history(self, user_id: int) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            List: –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
        """
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø–ª–∞—Ç–µ–∂–µ–π
        user = await self.user_service.get_user(user_id)
        if not user:
            return []
        
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        return [{
            'date': user.get('created_at', ''),
            'amount': user.get('total_payments', 0.0),
            'type': '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ',
            'status': '–£—Å–ø–µ—à–Ω–æ'
        }]
    
    async def get_available_payment_methods(self) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
        
        Returns:
            List: –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
        """
        return [
            {
                'id': 'demo',
                'name': '–î–µ–º–æ-—Ä–µ–∂–∏–º',
                'description': '–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
                'enabled': True
            },
            {
                'id': 'card',
                'name': '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞',
                'description': 'Visa, MasterCard, –ú–ò–†',
                'enabled': False  # –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
            },
            {
                'id': 'yoomoney',
                'name': '–ÆMoney',
                'description': '–ë—ã—Å—Ç—Ä—ã–µ –ø–ª–∞—Ç–µ–∂–∏',
                'enabled': False  # –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
            },
            {
                'id': 'crypto',
                'name': '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞',
                'description': 'Bitcoin, Ethereum',
                'enabled': False  # –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
            }
        ]
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å"""
        self._running = False
        logger.info("üõë PaymentService –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def is_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–∏—Å"""
        return self._running