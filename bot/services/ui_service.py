"""
–°–µ—Ä–≤–∏—Å UI
–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤, –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
"""

import logging
from typing import List, Dict, Any, Optional
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

from assets.emojis.interface import EMOJI, get_emoji_combination, create_progress_bar, format_balance, format_days

logger = logging.getLogger(__name__)

class UIService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
    - –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∏ –∫–Ω–æ–ø–æ–∫
    - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    - –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        logger.info("‚úÖ UIService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def create_main_menu_keyboard(self) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        
        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        """
        keyboard = [
            [
                InlineKeyboardButton(
                    text=f"{EMOJI['subscription']} –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏",
                    callback_data="my_subscriptions"
                ),
                InlineKeyboardButton(
                    text=f"{EMOJI['payment']} –ü–æ–ø–æ–ª–Ω–∏—Ç—å",
                    callback_data="top_up"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"{EMOJI['referral']} –†–µ—Ñ–µ—Ä–∞–ª—ã",
                    callback_data="referrals"
                ),
                InlineKeyboardButton(
                    text=f"{EMOJI['history']} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                    callback_data="stats"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"{EMOJI['settings']} –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                    callback_data="settings"
                ),
                InlineKeyboardButton(
                    text=f"{EMOJI['support']} –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
                    callback_data="support"
                )
            ]
        ]
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    def create_subscription_menu_keyboard(self, has_active_subscription: bool = False) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏
        
        Args:
            has_active_subscription: –ï—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        
        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏
        """
        if has_active_subscription:
            keyboard = [
                [
                    InlineKeyboardButton(
                        text=f"{EMOJI['vpn']} –ù–∞—Å—Ç—Ä–æ–∏—Ç—å VPN",
                        callback_data="setup_vpn"
                    ),
                    InlineKeyboardButton(
                        text=f"{EMOJI['link']} –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É",
                        callback_data="copy_config"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=f"{EMOJI['qr']} QR-–∫–æ–¥",
                        callback_data="show_qr"
                    ),
                    InlineKeyboardButton(
                        text=f"{EMOJI['info']} –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
                        callback_data="instructions"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=f"{EMOJI['back']} –ù–∞–∑–∞–¥",
                        callback_data="main_menu"
                    )
                ]
            ]
        else:
            keyboard = [
                [
                    InlineKeyboardButton(
                        text=f"{EMOJI['payment']} –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                        callback_data="activate_subscription"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=f"{EMOJI['back']} –ù–∞–∑–∞–¥",
                        callback_data="main_menu"
                    )
                ]
            ]
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    def create_payment_keyboard(self, amounts: List[float] = None) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞
        
        Args:
            amounts: –°–ø–∏—Å–æ–∫ —Å—É–º–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–ª–∞—Ç–µ–∂–µ–π
        """
        if amounts is None:
            amounts = [40, 80, 120, 200, 400]
        
        keyboard = []
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—É–º–º—ã
        for i in range(0, len(amounts), 2):
            row = []
            for j in range(2):
                if i + j < len(amounts):
                    amount = amounts[i + j]
                    days = int(amount / 4)
                    text = f"{EMOJI['money']} {amount:.0f}‚ÇΩ ({days}–¥)"
                    row.append(InlineKeyboardButton(
                        text=text,
                        callback_data=f"pay_{amount}"
                    ))
            keyboard.append(row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([
            InlineKeyboardButton(
                text=f"{EMOJI['back']} –ù–∞–∑–∞–¥",
                callback_data="main_menu"
            )
        ])
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    def create_payment_methods_keyboard(self) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
        
        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
        """
        keyboard = [
            [
                InlineKeyboardButton(
                    text=f"{EMOJI['card']} –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞",
                    callback_data="pay_method_card"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"{EMOJI['payment']} –ÆMoney",
                    callback_data="pay_method_yoomoney"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"{EMOJI['coins']} –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞",
                    callback_data="pay_method_crypto"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"{EMOJI['back']} –ù–∞–∑–∞–¥",
                    callback_data="top_up"
                )
            ]
        ]
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    def create_settings_keyboard(self) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
        
        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        """
        keyboard = [
            [
                InlineKeyboardButton(
                    text=f"{EMOJI['notification']} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                    callback_data="settings_notifications"
                ),
                InlineKeyboardButton(
                    text=f"{EMOJI['refresh']} –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ",
                    callback_data="settings_auto_renewal"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"{EMOJI['info']} –û –±–æ—Ç–µ",
                    callback_data="about_bot"
                ),
                InlineKeyboardButton(
                    text=f"{EMOJI['support']} –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
                    callback_data="support"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"{EMOJI['back']} –ù–∞–∑–∞–¥",
                    callback_data="main_menu"
                )
            ]
        ]
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    def create_back_keyboard(self, callback_data: str = "main_menu") -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        
        Args:
            callback_data: Callback data –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        
        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        """
        keyboard = [
            [
                InlineKeyboardButton(
                    text=f"{EMOJI['back']} –ù–∞–∑–∞–¥",
                    callback_data=callback_data
                )
            ]
        ]
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    def format_user_balance_message(self, balance: float, days: int, subscription_active: bool) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            balance: –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
            subscription_active: –ê–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
        
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        status_emoji = EMOJI['active'] if subscription_active else EMOJI['inactive']
        status_text = "–ê–∫—Ç–∏–≤–Ω–∞" if subscription_active else "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
        
        message = f"""
üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b>

{format_balance(balance)}
üìÖ {format_days(days)}
üìä <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {status_emoji} {status_text}

<b>–ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å:</b>
‚Ä¢ üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å
‚Ä¢ üì± –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
‚Ä¢ üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        """
        
        return message.strip()
    
    def format_subscription_info(self, subscription_data: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
        
        Args:
            subscription_data: –î–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        """
        status = subscription_data.get('status', 'inactive')
        days = subscription_data.get('days', 0)
        expire = subscription_data.get('expire', 0)
        
        status_emoji = EMOJI['active'] if status == 'active' else EMOJI['inactive']
        status_text = "–ê–∫—Ç–∏–≤–Ω–∞" if status == 'active' else "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
        
        message = f"""
üì± <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ</b>

üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {status_text}
üìÖ <b>–î–Ω–µ–π:</b> {format_days(days)}
üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 4 ‚ÇΩ –≤ –¥–µ–Ω—å
üîÑ <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ:</b> –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>
‚Ä¢ üîó –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
‚Ä¢ üì± –ü–æ–∫–∞–∑–∞—Ç—å QR-–∫–æ–¥
‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å VPN
        """
        
        return message.strip()
    
    def format_payment_options(self, amount: float) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
        
        Args:
            amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
        
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏
        """
        days = int(amount / 4)
        
        message = f"""
üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>

üí∞ <b>–°—É–º–º–∞:</b> {amount:.0f} ‚ÇΩ
üìÖ <b>–î–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞:</b> {format_days(days)}
üîÑ <b>–ê–∫—Ç–∏–≤–∞—Ü–∏—è:</b> –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è

<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>
        """
        
        return message.strip()
    
    def create_progress_message(self, current: int, total: int, text: str = "–ó–∞–≥—Ä—É–∑–∫–∞") -> str:
        """
        –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
        
        Args:
            current: –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            total: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Returns:
            str: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
        """
        progress_bar = create_progress_bar(current, total)
        percentage = int((current / total) * 100) if total > 0 else 0
        
        message = f"""
{EMOJI['loading']} <b>{text}</b>

{progress_bar}
üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {percentage}%
        """
        
        return message.strip()
    
    def create_error_message(self, error_code: str, error_description: str) -> str:
        """
        –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        
        Args:
            error_code: –ö–æ–¥ –æ—à–∏–±–∫–∏
            error_description: –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        
        Returns:
            str: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        message = f"""
‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>

üî¢ <b>–ö–æ–¥:</b> {error_code}
üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {error_description}

<b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>
‚Ä¢ üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑
‚Ä¢ üÜò –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
‚Ä¢ ‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç
        """
        
        return message.strip()
    
    def create_success_message(self, title: str, description: str) -> str:
        """
        –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        
        Args:
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫
            description: –û–ø–∏—Å–∞–Ω–∏–µ
        
        Returns:
            str: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        """
        message = f"""
‚úÖ <b>{title}</b>

{description}

<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b> –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá
        """
        
        return message.strip()
    
    def create_button_with_emoji(self, text: str, emoji: str, callback_data: str) -> InlineKeyboardButton:
        """
        –°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É —Å —ç–º–æ–¥–∑–∏
        
        Args:
            text: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            emoji: –≠–º–æ–¥–∑–∏
            callback_data: Callback data
        
        Returns:
            InlineKeyboardButton: –ö–Ω–æ–ø–∫–∞ —Å —ç–º–æ–¥–∑–∏
        """
        return InlineKeyboardButton(
            text=f"{emoji} {text}",
            callback_data=callback_data
        )
    
    def create_navigation_keyboard(self, buttons: List[Dict[str, str]]) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        
        Args:
            buttons: –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ callback_data
        
        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        """
        keyboard = []
        
        for i in range(0, len(buttons), 2):
            row = []
            for j in range(2):
                if i + j < len(buttons):
                    button = buttons[i + j]
                    row.append(InlineKeyboardButton(
                        text=button['text'],
                        callback_data=button['callback_data']
                    ))
            keyboard.append(row)
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)