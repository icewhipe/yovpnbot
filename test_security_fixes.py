#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import os
import sys
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –≤ sys.path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.services.animation_service import StickerService
from src.services.user_service import UserService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def test_sticker_service_fixes():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å–µ—Ä–≤–∏—Å–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤"""
    logger.info("=== –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –°–¢–ò–ö–ï–†–û–í ===")
    
    sticker_service = StickerService()
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞ (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å None)
    sticker_id = sticker_service.get_sticker('loading', 0)
    if sticker_id is None:
        logger.info("‚úÖ –°—Ç–∏–∫–µ—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)")
    else:
        logger.warning(f"‚ùå –°—Ç–∏–∫–µ—Ä –Ω–∞–π–¥–µ–Ω: {sticker_id}")
    
    # –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∏–∫–µ—Ä–∞ (–¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç–º–æ–¥–∑–∏)
    logger.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Ç–∏–∫–µ—Ä–∞...")
    # –ù–µ —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç –±–æ—Ç–∞
    
    logger.info("=== –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –°–¢–ò–ö–ï–†–û–í –ó–ê–í–ï–†–®–ï–ù ===")

def test_payment_security():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç–µ–∂–µ–π"""
    logger.info("=== –¢–ï–°–¢ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ü–õ–ê–¢–ï–ñ–ï–ô ===")
    
    user_service = UserService()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_user_id = 999999999
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_service.ensure_user_record(test_user_id, "test_user", "Test User")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    initial_balance = user_service.get_balance(test_user_id)
    logger.info(f"–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {initial_balance} ‚ÇΩ")
    
    # –¢–µ—Å—Ç: –ù–ï –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    # (—ç—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–æ–¥–µ - —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Å–∏–º—É–ª—è—Ü–∏—é)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ)
    user_service.add_balance(test_user_id, 20)
    new_balance = user_service.get_balance(test_user_id)
    
    if new_balance == initial_balance + 20:
        logger.info("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏: {initial_balance} -> {new_balance}")
    
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        os.remove("data.json")
        logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
    except:
        pass
    
    logger.info("=== –¢–ï–°–¢ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ü–õ–ê–¢–ï–ñ–ï–ô –ó–ê–í–ï–†–®–ï–ù ===")

def test_payment_flow():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π"""
    logger.info("=== –¢–ï–°–¢ –ü–û–¢–û–ö–ê –ü–õ–ê–¢–ï–ñ–ï–ô ===")
    
    # –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
    payment_methods = ['card', 'sbp', 'bank', 'wallet']
    
    for method in payment_methods:
        logger.info(f"‚úÖ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã '{method}' –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
    
    # –¢–µ—Å—Ç —Å—É–º–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    test_amounts = [20, 50, 100, 200]
    
    for amount in test_amounts:
        days = int(amount / 4)
        logger.info(f"‚úÖ –°—É–º–º–∞ {amount} ‚ÇΩ = {days} –¥–Ω–µ–π")
    
    logger.info("=== –¢–ï–°–¢ –ü–û–¢–û–ö–ê –ü–õ–ê–¢–ï–ñ–ï–ô –ó–ê–í–ï–†–®–ï–ù ===")

def test_error_handling():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    logger.info("=== –¢–ï–°–¢ –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö ===")
    
    sticker_service = StickerService()
    
    # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤
    try:
        sticker_id = sticker_service.get_sticker('nonexistent', 0)
        if sticker_id is None:
            logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            logger.warning("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞: {e}")
    
    # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    try:
        sticker_id = sticker_service.get_sticker('invalid_category', 0)
        if sticker_id is None:
            logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            logger.warning("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
    
    logger.info("=== –¢–ï–°–¢ –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö –ó–ê–í–ï–†–®–ï–ù ===")

if __name__ == "__main__":
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        test_sticker_service_fixes()
        test_payment_security()
        test_payment_flow()
        test_error_handling()
        
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()