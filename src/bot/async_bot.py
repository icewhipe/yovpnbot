"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π Telegram –±–æ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º aiogram
–í–∫–ª—é—á–∞–µ—Ç –≤—Å–µ —É–ª—É—á—à–µ–Ω–∏—è UX, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import asyncio
import logging
import time
from typing import Dict, Any, Optional, List
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
from src.services.ux_service import UXService, ResponseType
from src.services.validation_service import ValidationService, ValidationError
from src.services.security_service import SecurityService
from src.services.user_service import UserService
from src.services.marzban_service import MarzbanService
from src.services.animation_service import StickerService
from src.services.ui_service import UIService
from src.services.copy_service import CopyService
from src.services.interaction_service import InteractionService
from src.services.daily_payment_service import DailyPaymentService
from src.services.notification_service import NotificationService

logger = logging.getLogger(__name__)

class BotStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM"""
    waiting_for_payment_amount = State()
    waiting_for_payment_method = State()
    waiting_for_custom_amount = State()

class AsyncYoVPNBot:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π YoVPN –±–æ—Ç"""
    
    def __init__(self, token: str, marzban_api_url: str, marzban_admin_token: str):
        self.bot = Bot(token=token)
        self.dp = Dispatcher(storage=MemoryStorage())
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        self.ux_service = UXService(self.bot)
        self.validation_service = ValidationService()
        self.security_service = SecurityService()
        self.user_service = UserService()
        self.marzban_service = MarzbanService(marzban_api_url, marzban_admin_token)
        self.sticker_service = StickerService(self.bot)
        self.ui_service = UIService()
        self.copy_service = CopyService(self.bot)
        self.interaction_service = InteractionService(self.bot)
        self.notification_service = NotificationService(self.bot)
        self.daily_payment_service = DailyPaymentService(
            self.user_service, 
            self.marzban_service, 
            self.notification_service
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self._setup_handlers()
        
        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
        self.background_tasks = set()

    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ callback'–æ–≤"""
        
        # –ö–æ–º–∞–Ω–¥—ã
        self.dp.message.register(self.start_command, CommandStart())
        self.dp.message.register(self.help_command, Command("help"))
        self.dp.message.register(self.balance_command, Command("balance"))
        self.dp.message.register(self.subscription_command, Command("subscription"))
        self.dp.message.register(self.referral_command, Command("referral"))
        
        # Callback queries
        self.dp.callback_query.register(self.handle_callback)
        
        # –°–æ–æ–±—â–µ–Ω–∏—è
        self.dp.message.register(self.handle_message)

    async def start_command(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = message.from_user.id
        username = message.from_user.username
        first_name = message.from_user.first_name
        
        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫
        await self.ux_service.send_immediate_ack(
            message.chat.id, 
            message=f"–ü—Ä–∏–≤–µ—Ç, {first_name}! –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç..."
        )
        
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = {
                'user_id': user_id,
                'username': username,
                'first_name': first_name,
                'language_code': message.from_user.language_code or 'ru'
            }
            
            validated_user = self.validation_service.validate_user_registration(user_data)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            if not self.security_service.check_suspicious_activity(
                user_id, "start_command", str(user_data)
            ):
                await self.ux_service.send_error_response(
                    message.chat.id, 
                    "E999",
                    message="–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
                )
                return
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = self.user_service.ensure_user_record(
                validated_user.user_id,
                validated_user.username,
                validated_user.first_name
            )
            
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å
            if not user.bonus_given:
                self.user_service.add_balance(user_id, 20)
                self.user_service.update_user_record(user_id, {"bonus_given": True})
                
                # –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
                await self.sticker_service.send_celebration(
                    message.chat.id, 
                    "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å 20 ‚ÇΩ"
                )
                
                self.notification_service.send_welcome_bonus_notification(user_id, 20, 20)
            
            # –ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            await self.show_main_menu(message)
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            self.ux_service.log_operation(
                "start_command", user_id, f"User: {username}", success=True
            )
            
        except ValidationError as e:
            await self.ux_service.send_error_response(
                message.chat.id, 
                "E001",
                message=f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e.message}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start_command: {e}")
            await self.ux_service.send_error_response(message.chat.id, "E999")

    async def help_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        await self.ux_service.send_immediate_ack(
            message.chat.id, 
            message="–ó–∞–≥—Ä—É–∂–∞—é —Å–ø—Ä–∞–≤–∫—É..."
        )
        
        help_text = """
üîß <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É YoVPN</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/balance - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å
/subscription - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π
/referral - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
1. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å (4 ‚ÇΩ/–¥–µ–Ω—å)
2. –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä
3. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ VPN

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.

<b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã
‚Ä¢ –ü–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —à–ª—é–∑—ã
‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
"""
        
        await self.bot.send_message(
            chat_id=message.chat.id,
            text=help_text,
            parse_mode='HTML'
        )

    async def balance_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /balance"""
        await self.ux_service.send_immediate_ack(
            message.chat.id,
            message="–ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ..."
        )
        
        try:
            await self.show_balance_menu(message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ balance_command: {e}")
            await self.ux_service.send_error_response(message.chat.id, "E999")

    async def subscription_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /subscription"""
        await self.ux_service.send_immediate_ack(
            message.chat.id,
            message="–ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ..."
        )
        
        try:
            await self.show_my_subscriptions(message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ subscription_command: {e}")
            await self.ux_service.send_error_response(message.chat.id, "E999")

    async def referral_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /referral"""
        await self.ux_service.send_immediate_ack(
            message.chat.id,
            message="–ó–∞–≥—Ä—É–∂–∞—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É..."
        )
        
        try:
            await self.show_invite_menu(message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ referral_command: {e}")
            await self.ux_service.send_error_response(message.chat.id, "E999")

    async def handle_callback(self, callback_query: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        user_id = callback_query.from_user.id
        data = callback_query.data
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è callback data
        if not self.security_service.validate_callback_data(data):
            await self.ux_service.send_error_response(
                callback_query.message.chat.id,
                "E999",
                message="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞"
            )
            return
        
        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫
        await self.ux_service.send_immediate_ack(
            callback_query.message.chat.id,
            callback_query.id,
            "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å..."
        )
        
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ callback'–æ–≤
            if data == "back_to_main":
                await self.show_main_menu(callback_query.message)
            elif data == "balance":
                await self.show_balance_menu(callback_query.message)
            elif data == "subscription":
                await self.show_my_subscriptions(callback_query.message)
            elif data == "referral":
                await self.show_invite_menu(callback_query.message)
            elif data.startswith("quick_top_up_"):
                amount = int(data.replace("quick_top_up_", ""))
                await self.handle_quick_top_up(callback_query.message, amount)
            elif data.startswith("pay_"):
                parts = data.split("_")
                payment_method = parts[1]
                amount = int(parts[2])
                await self.handle_payment_method(callback_query.message, payment_method, amount)
            elif data.startswith("simulate_payment_"):
                amount = int(data.replace("simulate_payment_", ""))
                await self.handle_simulate_payment(callback_query.message, amount)
            elif data.startswith("copy_"):
                copy_type = data.replace("copy_", "")
                await self.handle_copy_request(callback_query.message, copy_type)
            elif data.startswith("qr_"):
                qr_type = data.replace("qr_", "")
                await self.handle_qr_request(callback_query.message, qr_type)
            else:
                await self.ux_service.send_error_response(
                    callback_query.message.chat.id,
                    "E999",
                    message="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_callback: {e}")
            await self.ux_service.send_error_response(
                callback_query.message.chat.id,
                "E999"
            )

    async def handle_message(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞
        pass

    async def show_main_menu(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user_id = message.from_user.id
        user_stats = self.user_service.get_user_stats(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
        user_info = self.marzban_service.get_user_info(message.from_user.username)
        has_subscription = user_info and user_info.get('status') == 'active'
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = self.ui_service.create_main_menu_keyboard(user_stats, has_subscription)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = f"""
üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {user_stats.get('balance', 0)} ‚ÇΩ
üìÖ <b>–î–æ—Å—Ç—É–ø–Ω–æ –¥–Ω–µ–π:</b> {user_stats.get('days_remaining', 0)}
üîó <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {'–ê–∫—Ç–∏–≤–Ω–∞' if has_subscription else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
        
        await self.bot.send_message(
            chat_id=message.chat.id,
            text=text,
            parse_mode='HTML',
            reply_markup=keyboard
        )

    async def show_balance_menu(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –±–∞–ª–∞–Ω—Å–∞"""
        user_id = message.from_user.id
        balance = self.user_service.get_balance(user_id)
        days = self.user_service.days_from_balance(user_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = self.ui_service.create_balance_keyboard(balance)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = self.ui_service.format_balance_message(balance, days)
        
        await self.bot.send_message(
            chat_id=message.chat.id,
            text=text,
            parse_mode='HTML',
            reply_markup=keyboard
        )

    async def show_my_subscriptions(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏"""
        user_id = message.from_user.id
        username = message.from_user.username
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
        user_info = self.marzban_service.get_user_info(username)
        
        if not user_info:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if self.user_service.get_balance(user_id) >= 4:
                user_info = self.marzban_service.create_test_user(username, 1)
        
        subscription_info = {
            'status': user_info.get('status', 'inactive') if user_info else 'inactive',
            'expire': user_info.get('expire', 0) if user_info else 0,
            'data_limit': user_info.get('data_limit', 0) if user_info else 0,
            'used_traffic': user_info.get('used_traffic', 0) if user_info else 0
        }
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = self.ui_service.format_subscription_message(subscription_info)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = self.ui_service.create_subscription_keyboard(subscription_info)
        
        await self.bot.send_message(
            chat_id=message.chat.id,
            text=text,
            parse_mode='HTML',
            reply_markup=keyboard
        )

    async def show_invite_menu(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –º–µ–Ω—é"""
        user_id = message.from_user.id
        referral_link = f"https://t.me/your_bot?start=ref_{user_id}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = self.ui_service.create_referral_keyboard(referral_link)
        
        text = f"""
üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>

üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>
<code>{referral_link}</code>

üí∞ <b>–ë–æ–Ω—É—Å—ã:</b>
‚Ä¢ –ó–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: 10 ‚ÇΩ
‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª –ø–æ–ª—É—á–∞–µ—Ç: 5 ‚ÇΩ

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: 0 —á–µ–ª–æ–≤–µ–∫
‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: 0 ‚ÇΩ
"""
        
        await self.bot.send_message(
            chat_id=message.chat.id,
            text=text,
            parse_mode='HTML',
            reply_markup=keyboard
        )

    async def handle_quick_top_up(self, message: Message, amount: int):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –±—ã—Å—Ç—Ä–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"""
        user_id = message.from_user.id
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
        try:
            payment_data = {
                'amount': amount,
                'payment_method': 'card',  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                'user_id': user_id
            }
            validated_payment = self.validation_service.validate_payment_request(payment_data)
        except ValidationError as e:
            await self.ux_service.send_error_response(
                message.chat.id,
                "E004",
                message=f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞: {e.message}"
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—É–º–º–µ
        days = int(amount / 4)
        
        text = f"""
üí≥ <b>–í—ã–±—Ä–∞–Ω–∞ —Å—É–º–º–∞: {amount} ‚ÇΩ</b>

üìÖ <b>–î–æ—Å—Ç—É–ø–Ω–æ –¥–Ω–µ–π:</b> {days}
üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 4 ‚ÇΩ/–¥–µ–Ω—å

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –≠—Ç–æ –¥–µ–º–æ-—Ä–µ–∂–∏–º. 
–í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π.

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:</b>
‚Ä¢ üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞
‚Ä¢ üì± –°–ë–ü (–°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π)
‚Ä¢ üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥
‚Ä¢ üí∞ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏
"""
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π", callback_data=f"pay_card_{amount}"),
            InlineKeyboardButton("üì± –°–ë–ü", callback_data=f"pay_sbp_{amount}"),
            InlineKeyboardButton("üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥", callback_data=f"pay_bank_{amount}"),
            InlineKeyboardButton("üí∞ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏", callback_data=f"pay_wallet_{amount}")
        )
        keyboard.add(
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å—É–º–º—ã", callback_data="balance")
        )
        
        await self.bot.send_message(
            chat_id=message.chat.id,
            text=text,
            parse_mode='HTML',
            reply_markup=keyboard
        )

    async def handle_payment_method(self, message: Message, payment_method: str, amount: int):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        pass

    async def handle_simulate_payment(self, message: Message, amount: int):
        """–°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ–ø–ª–∞—Ç—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ)"""
        user_id = message.from_user.id
        days = int(amount / 4)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–ª–∞—Ç–µ–∂–∞
        await self.sticker_service.animate_payment_process(message.chat.id, amount)
        
        # –í –î–ï–ú–û-–†–ï–ñ–ò–ú–ï –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
        self.user_service.add_balance(user_id, amount)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        await self.sticker_service.send_celebration(
            message.chat.id, 
            f"üéâ –î–ï–ú–û: –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} ‚ÇΩ! –î–æ—Å—Ç—É–ø–Ω–æ {days} –¥–Ω–µ–π"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ
        await self.show_balance_menu(message)

    async def handle_copy_request(self, message: Message, copy_type: str):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        await self.copy_service.handle_copy_request(message, copy_type)

    async def handle_qr_request(self, message: Message, qr_type: str):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ QR-–∫–æ–¥"""
        await self.copy_service.handle_qr_request(message, qr_type)

    async def start_background_tasks(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
        # –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π
        task = asyncio.create_task(self.daily_payment_service.start())
        self.background_tasks.add(task)
        task.add_done_callback(self.background_tasks.discard)

    async def stop_background_tasks(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        for task in self.background_tasks:
            task.cancel()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if self.background_tasks:
            await asyncio.gather(*self.background_tasks, return_exceptions=True)

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
            await self.start_background_tasks()
            
            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
            logger.info("–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞...")
            await self.dp.start_polling(self.bot)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        finally:
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
            await self.stop_background_tasks()

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        await self.stop_background_tasks()
        await self.bot.session.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import os
    from dotenv import load_dotenv
    
    load_dotenv()
    
    token = os.getenv('USERBOT_TOKEN')
    marzban_api_url = os.getenv('MARZBAN_API_URL')
    marzban_admin_token = os.getenv('MARZBAN_ADMIN_TOKEN')
    
    if not all([token, marzban_api_url, marzban_admin_token]):
        logger.error("–ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return
    
    bot = AsyncYoVPNBot(token, marzban_api_url, marzban_admin_token)
    
    try:
        await bot.start()
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    finally:
        await bot.stop()

if __name__ == "__main__":
    asyncio.run(main())