#!/usr/bin/env python3
"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ UI –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
"""

import logging
from typing import List, Dict, Any, Optional, Tuple
from telebot import types

logger = logging.getLogger(__name__)

class UIService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    def __init__(self):
        # –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
        self.button_emojis = {
            # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            'main_menu': 'üè†',
            'back': '‚¨ÖÔ∏è',
            'home': 'üè†',
            'refresh': 'üîÑ',
            
            # –ü–æ–¥–ø–∏—Å–∫–∏
            'subscription': 'üìã',
            'subscription_active': 'üü¢',
            'subscription_inactive': 'üî¥',
            'subscription_expired': '‚è∞',
            'add_subscription': '‚ûï',
            'extend_subscription': '‚è∞',
            
            # –ë–∞–ª–∞–Ω—Å –∏ –ø–ª–∞—Ç–µ–∂–∏
            'balance': 'üí∞',
            'balance_low': '‚ö†Ô∏è',
            'balance_critical': 'üö®',
            'top_up': 'üí≥',
            'payment_history': 'üìä',
            'coupon': 'üé´',
            
            # –†–µ—Ñ–µ—Ä–∞–ª—ã
            'referral': 'üë•',
            'invite': 'üì§',
            'share': 'üì§',
            'qr_code': 'üì±',
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–º–æ—â—å
            'settings': '‚öôÔ∏è',
            'help': '‚ùì',
            'support': 'üÜò',
            'about': '‚ÑπÔ∏è',
            'info': '‚ÑπÔ∏è',
            
            # –î–µ–π—Å—Ç–≤–∏—è
            'copy': 'üìã',
            'download': '‚¨áÔ∏è',
            'upload': '‚¨ÜÔ∏è',
            'edit': '‚úèÔ∏è',
            'delete': 'üóëÔ∏è',
            'confirm': '‚úÖ',
            'cancel': '‚ùå',
            
            # –°—Ç–∞—Ç—É—Å—ã
            'success': '‚úÖ',
            'error': '‚ùå',
            'warning': '‚ö†Ô∏è',
            'loading': 'üîÑ',
            'check': '‚úîÔ∏è',
            
            # VPN –∏ —Å–µ—Ç—å
            'vpn': 'üîí',
            'network': 'üåê',
            'server': 'üñ•Ô∏è',
            'key': 'üîë',
            'link': 'üîó',
            
            # –í—Ä–µ–º—è –∏ –¥–∞—Ç–∞
            'time': '‚è∞',
            'calendar': 'üìÖ',
            'clock': 'üïê',
            
            # –î–µ–Ω—å–≥–∏
            'money': 'üíµ',
            'coin': 'ü™ô',
            'dollar': 'üí≤',
            'ruble': '‚ÇΩ',
            
            # –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            'phone': 'üì±',
            'computer': 'üíª',
            'tablet': 'üì±',
            'device': 'üì±'
        }
        
        # –ì—Ä—É–ø–ø—ã –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ª–æ–≥–∏—á–µ—Å–∫–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        self.button_groups = {
            'subscription': ['subscription', 'add_subscription', 'extend_subscription'],
            'balance': ['balance', 'top_up', 'payment_history', 'coupon'],
            'referral': ['referral', 'invite', 'share', 'qr_code'],
            'navigation': ['main_menu', 'back', 'home', 'refresh'],
            'actions': ['copy', 'download', 'confirm', 'cancel'],
            'support': ['help', 'support', 'about', 'settings']
        }
    
    def create_button(self, text: str, callback_data: str = None, url: str = None, 
                     emoji: str = None, color_indicator: str = None) -> types.InlineKeyboardButton:
        """–°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º"""
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if emoji:
            button_text = f"{emoji} {text}"
        elif callback_data and callback_data in self.button_emojis:
            button_text = f"{self.button_emojis[callback_data]} {text}"
        else:
            button_text = text
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        if color_indicator:
            button_text = f"{color_indicator} {button_text}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
        if url:
            return types.InlineKeyboardButton(button_text, url=url)
        elif callback_data:
            return types.InlineKeyboardButton(button_text, callback_data=callback_data)
        else:
            return types.InlineKeyboardButton(button_text, callback_data="noop")
    
    def create_main_menu_keyboard(self, user_stats: Dict, has_subscription: bool = False) -> types.InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        
        # –ì—Ä—É–ø–ø–∞ –ø–æ–¥–ø–∏—Å–æ–∫
        if has_subscription:
            keyboard.add(
                self.create_button("–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", "my_subscriptions", emoji="üü¢"),
                self.create_button("–ü—Ä–æ–¥–ª–∏—Ç—å", "extend_subscription", emoji="‚è∞")
            )
        else:
            keyboard.add(
                self.create_button("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", "activate_subscription", emoji="üü¢"),
                self.create_button("–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", "my_subscriptions", emoji="üìã")
            )
        
        # –ì—Ä—É–ø–ø–∞ –±–∞–ª–∞–Ω—Å–∞
        balance = user_stats.get('balance', 0)
        balance_emoji = "üö®" if balance < 4 else "‚ö†Ô∏è" if balance < 12 else "üí∞"
        
        keyboard.add(
            self.create_button("–ë–∞–ª–∞–Ω—Å", "balance", emoji=balance_emoji),
            self.create_button("–ü–æ–ø–æ–ª–Ω–∏—Ç—å", "top_up_balance", emoji="üí≥")
        )
        
        # –ì—Ä—É–ø–ø–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        keyboard.add(
            self.create_button("–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", "invite_friend", emoji="üë•"),
            self.create_button("–ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã", "my_referrals", emoji="üìä")
        )
        
        # –ì—Ä—É–ø–ø–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        keyboard.add(
            self.create_button("–ü–æ–º–æ—â—å", "help", emoji="‚ùì"),
            self.create_button("–û —Å–µ—Ä–≤–∏—Å–µ", "about_service", emoji="‚ÑπÔ∏è")
        )
        
        return keyboard
    
    def create_subscription_keyboard(self, subscription_info: Dict) -> types.InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π"""
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        
        status = subscription_info.get('status', 'inactive')
        
        if status == 'active':
            # –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            keyboard.add(
                self.create_button("–ü—Ä–æ–¥–ª–∏—Ç—å", "extend_subscription", emoji="‚è∞"),
                self.create_button("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "subscription_settings", emoji="‚öôÔ∏è")
            )
            keyboard.add(
                self.create_button("–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", "copy_subscription_link", emoji="üìã"),
                self.create_button("QR-–∫–æ–¥", "show_subscription_qr", emoji="üì±")
            )
        else:
            # –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            keyboard.add(
                self.create_button("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", "activate_subscription", emoji="üü¢"),
                self.create_button("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", "top_up_balance", emoji="üí≥")
            )
        
        keyboard.add(
            self.create_button("–ù–∞–∑–∞–¥", "back_to_main", emoji="‚¨ÖÔ∏è")
        )
        
        return keyboard
    
    def create_balance_keyboard(self, balance: float) -> types.InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–º"""
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        
        # –ë—ã—Å—Ç—Ä—ã–µ —Å—É–º–º—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        quick_amounts = [20, 50, 100, 200]  # 5, 12, 25, 50 –¥–Ω–µ–π
        
        for amount in quick_amounts:
            days = int(amount / 4)
            keyboard.add(
                self.create_button(f"{amount} ‚ÇΩ ({days} –¥–Ω.)", f"quick_top_up_{amount}", emoji="üí≥")
            )
        
        keyboard.add(
            self.create_button("–î—Ä—É–≥–∞—è —Å—É–º–º–∞", "custom_top_up", emoji="‚úèÔ∏è"),
            self.create_button("–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π", "payment_history", emoji="üìä")
        )
        
        keyboard.add(
            self.create_button("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫—É–ø–æ–Ω", "activate_coupon", emoji="üé´")
        )
        
        keyboard.add(
            self.create_button("–ù–∞–∑–∞–¥", "back_to_main", emoji="‚¨ÖÔ∏è")
        )
        
        return keyboard
    
    def create_referral_keyboard(self, referral_link: str) -> types.InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        
        keyboard.add(
            self.create_button("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", "share_referral", emoji="üì§"),
            self.create_button("QR-–∫–æ–¥", "show_referral_qr", emoji="üì±")
        )
        
        keyboard.add(
            self.create_button("–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", "copy_referral_link", emoji="üìã"),
            self.create_button("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "referral_stats", emoji="üìä")
        )
        
        keyboard.add(
            self.create_button("–ù–∞–∑–∞–¥", "back_to_main", emoji="‚¨ÖÔ∏è")
        )
        
        return keyboard
    
    def create_copy_keyboard(self, text: str, copy_type: str) -> types.InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        
        # –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)
        keyboard.add(
            self.create_button("üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å", f"copy_{copy_type}", emoji="üìã")
        )
        
        # –ö–Ω–æ–ø–∫–∞ QR-–∫–æ–¥–∞
        keyboard.add(
            self.create_button("üì± –ü–æ–∫–∞–∑–∞—Ç—å QR-–∫–æ–¥", f"qr_{copy_type}", emoji="üì±")
        )
        
        keyboard.add(
            self.create_button("–ù–∞–∑–∞–¥", "back_to_previous", emoji="‚¨ÖÔ∏è")
        )
        
        return keyboard
    
    def create_confirmation_keyboard(self, action: str, confirm_text: str = "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", 
                                   cancel_text: str = "–û—Ç–º–µ–Ω–∞") -> types.InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        
        keyboard.add(
            self.create_button(confirm_text, f"confirm_{action}", emoji="‚úÖ", color_indicator="üü¢"),
            self.create_button(cancel_text, f"cancel_{action}", emoji="‚ùå", color_indicator="üî¥")
        )
        
        return keyboard
    
    def create_pagination_keyboard(self, current_page: int, total_pages: int, 
                                 base_callback: str) -> types.InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        keyboard = types.InlineKeyboardMarkup(row_width=5)
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if current_page > 1:
            nav_buttons.append(
                self.create_button("‚èÆÔ∏è", f"{base_callback}_page_1")
            )
        
        # –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if current_page > 1:
            nav_buttons.append(
                self.create_button("‚óÄÔ∏è", f"{base_callback}_page_{current_page - 1}")
            )
        
        # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        nav_buttons.append(
            self.create_button(f"{current_page}/{total_pages}", "noop")
        )
        
        # –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if current_page < total_pages:
            nav_buttons.append(
                self.create_button("‚ñ∂Ô∏è", f"{base_callback}_page_{current_page + 1}")
            )
        
        # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if current_page < total_pages:
            nav_buttons.append(
                self.create_button("‚è≠Ô∏è", f"{base_callback}_page_{total_pages}")
            )
        
        keyboard.add(*nav_buttons)
        
        return keyboard
    
    def format_balance_message(self, balance: float, days_remaining: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–ª–∞–Ω—Å–µ"""
        if balance < 4:
            status_emoji = "üö®"
            status_text = "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å!"
        elif balance < 12:
            status_emoji = "‚ö†Ô∏è"
            status_text = "–ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å"
        else:
            status_emoji = "üí∞"
            status_text = "–ë–∞–ª–∞–Ω—Å –≤ –Ω–æ—Ä–º–µ"
        
        return f"""
{status_emoji} <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b>

üí∞ <b>–°—É–º–º–∞:</b> {balance} ‚ÇΩ
üìÖ <b>–î–æ—Å—Ç—É–ø–Ω–æ –¥–Ω–µ–π:</b> {days_remaining}
üí≥ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 4 ‚ÇΩ/–¥–µ–Ω—å

{status_text}
"""
    
    def format_subscription_message(self, subscription_info: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
        status = subscription_info.get('status', 'inactive')
        days_remaining = subscription_info.get('days_remaining', 0)
        
        if status == 'active':
            status_emoji = "üü¢"
            status_text = "–ê–∫—Ç–∏–≤–Ω–∞"
        elif status == 'expired':
            status_emoji = "üî¥"
            status_text = "–ò—Å—Ç–µ–∫–ª–∞"
        else:
            status_emoji = "‚ö™"
            status_text = "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
        
        return f"""
üìã <b>–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞</b>

{status_emoji} <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}
üìÖ <b>–î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å:</b> {days_remaining}
üåê <b>–¢—Ä–∞—Ñ–∏–∫:</b> –ë–µ–∑–ª–∏–º–∏—Ç
üí≥ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 4 ‚ÇΩ/–¥–µ–Ω—å

‚ÑπÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.
"""
    
    def create_loading_message(self, text: str, progress: int = 0, total: int = 100) -> str:
        """–°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
        if total > 0:
            percentage = int((progress / total) * 100)
            bar_length = 10
            filled = int((progress / total) * bar_length)
            empty = bar_length - filled
            
            progress_bar = "‚¨õ" * filled + "‚¨ú" * empty
            progress_text = f"\n\n{progress_bar} {percentage}%"
        else:
            progress_text = ""
        
        return f"üîÑ {text}{progress_text}"
    
    def create_button_with_emoji(self, text: str, callback_data: str, button_type: str = "info") -> types.InlineKeyboardButton:
        """–°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É —Å —ç–º–æ–¥–∑–∏"""
        emoji = self.button_emojis.get(button_type, "‚ÑπÔ∏è")
        return types.InlineKeyboardButton(f"{emoji} {text}", callback_data=callback_data)