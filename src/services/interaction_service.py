#!/usr/bin/env python3
"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –º–∏–∫—Ä–æ–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
"""

import logging
import time
from typing import Optional, Dict, Any, List
from telebot import types

logger = logging.getLogger(__name__)

class InteractionService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –º–∏–∫—Ä–æ–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    
    def __init__(self, bot=None):
        self.bot = bot
        self.pending_actions = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –æ–∂–∏–¥–∞—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    
    def set_bot(self, bot):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞"""
        self.bot = bot
    
    def answer_callback_query(self, callback_query_id: str, text: str = None, 
                            show_alert: bool = False, url: str = None) -> bool:
        """–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é"""
        if not self.bot:
            return False
        
        try:
            self.bot.answer_callback_query(
                callback_query_id=callback_query_id,
                text=text,
                show_alert=show_alert,
                url=url
            )
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback query: {e}")
            return False
    
    def show_loading_feedback(self, callback_query_id: str, action: str = "–ó–∞–≥—Ä—É–∑–∫–∞...") -> bool:
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ –∑–∞–≥—Ä—É–∑–∫–µ"""
        return self.answer_callback_query(
            callback_query_id=callback_query_id,
            text=f"üîÑ {action}",
            show_alert=False
        )
    
    def show_success_feedback(self, callback_query_id: str, message: str = "–ì–æ—Ç–æ–≤–æ!") -> bool:
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ–± —É—Å–ø–µ—Ö–µ"""
        return self.answer_callback_query(
            callback_query_id=callback_query_id,
            text=f"‚úÖ {message}",
            show_alert=False
        )
    
    def show_error_feedback(self, callback_query_id: str, message: str = "–û—à–∏–±–∫–∞!") -> bool:
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ–± –æ—à–∏–±–∫–µ"""
        return self.answer_callback_query(
            callback_query_id=callback_query_id,
            text=f"‚ùå {message}",
            show_alert=True
        )
    
    def show_warning_feedback(self, callback_query_id: str, message: str = "–í–Ω–∏–º–∞–Ω–∏–µ!") -> bool:
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º"""
        return self.answer_callback_query(
            callback_query_id=callback_query_id,
            text=f"‚ö†Ô∏è {message}",
            show_alert=True
        )
    
    def show_info_feedback(self, callback_query_id: str, message: str = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è") -> bool:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å"""
        return self.answer_callback_query(
            callback_query_id=callback_query_id,
            text=f"‚ÑπÔ∏è {message}",
            show_alert=False
        )
    
    def create_typing_indicator(self, chat_id: int, duration: float = 2.0) -> bool:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏"""
        if not self.bot:
            return False
        
        try:
            self.bot.send_chat_action(chat_id, 'typing')
            time.sleep(duration)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏: {e}")
            return False
    
    def create_loading_message(self, chat_id: int, text: str, 
                             progress: int = 0, total: int = 100) -> Optional[int]:
        """–°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
        if not self.bot:
            return None
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            if total > 0:
                percentage = int((progress / total) * 100)
                bar_length = 10
                filled = int((progress / total) * bar_length)
                empty = bar_length - filled
                
                progress_bar = "‚¨õ" * filled + "‚¨ú" * empty
                progress_text = f"\n\n{progress_bar} {percentage}%"
            else:
                progress_text = ""
            
            message_text = f"üîÑ {text}{progress_text}"
            
            message = self.bot.send_message(
                chat_id=chat_id,
                text=message_text,
                parse_mode='HTML'
            )
            
            return message.message_id
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return None
    
    def update_loading_message(self, chat_id: int, message_id: int, text: str,
                              progress: int = 0, total: int = 100) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏"""
        if not self.bot:
            return False
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            if total > 0:
                percentage = int((progress / total) * 100)
                bar_length = 10
                filled = int((progress / total) * bar_length)
                empty = bar_length - filled
                
                progress_bar = "‚¨õ" * filled + "‚¨ú" * empty
                progress_text = f"\n\n{progress_bar} {percentage}%"
            else:
                progress_text = ""
            
            message_text = f"üîÑ {text}{progress_text}"
            
            self.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=message_text,
                parse_mode='HTML'
            )
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return False
    
    def create_confirmation_dialog(self, chat_id: int, title: str, message: str,
                                 confirm_action: str, cancel_action: str = "cancel") -> bool:
        """–°–æ–∑–¥–∞—Ç—å –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        if not self.bot:
            return False
        
        try:
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            
            keyboard.add(
                types.InlineKeyboardButton(
                    "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", 
                    callback_data=f"confirm_{confirm_action}",
                    color_indicator="üü¢"
                ),
                types.InlineKeyboardButton(
                    "‚ùå –û—Ç–º–µ–Ω–∞", 
                    callback_data=f"cancel_{cancel_action}",
                    color_indicator="üî¥"
                )
            )
            
            self.bot.send_message(
                chat_id=chat_id,
                text=f"‚ö†Ô∏è <b>{title}</b>\n\n{message}",
                parse_mode='HTML',
                reply_markup=keyboard
            )
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
            return False
    
    def create_success_animation(self, chat_id: int, message: str) -> bool:
        """–°–æ–∑–¥–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é —É—Å–ø–µ—Ö–∞"""
        if not self.bot:
            return False
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
            messages = [
                "üéâ",
                "üéä",
                "‚ú®",
                f"‚úÖ {message}"
            ]
            
            for i, msg in enumerate(messages):
                if i < len(messages) - 1:
                    self.bot.send_message(chat_id, msg)
                    time.sleep(0.5)
                else:
                    self.bot.send_message(chat_id, msg, parse_mode='HTML')
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ —É—Å–ø–µ—Ö–∞: {e}")
            return False
    
    def create_error_animation(self, chat_id: int, message: str) -> bool:
        """–°–æ–∑–¥–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –æ—à–∏–±–∫–∏"""
        if not self.bot:
            return False
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –æ—à–∏–±–∫–∏
            messages = [
                "‚ùå",
                "‚ö†Ô∏è",
                f"üí• {message}"
            ]
            
            for i, msg in enumerate(messages):
                if i < len(messages) - 1:
                    self.bot.send_message(chat_id, msg)
                    time.sleep(0.3)
                else:
                    self.bot.send_message(chat_id, msg, parse_mode='HTML')
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –æ—à–∏–±–∫–∏: {e}")
            return False
    
    def create_celebration_animation(self, chat_id: int, message: str) -> bool:
        """–°–æ–∑–¥–∞—Ç—å –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é"""
        if not self.bot:
            return False
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é
            messages = [
                "üéâ",
                "üéä",
                "‚ú®",
                "üåü",
                "üéà",
                f"üéä {message} üéä"
            ]
            
            for i, msg in enumerate(messages):
                if i < len(messages) - 1:
                    self.bot.send_message(chat_id, msg)
                    time.sleep(0.4)
                else:
                    self.bot.send_message(chat_id, msg, parse_mode='HTML')
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏: {e}")
            return False
    
    def create_loading_sequence(self, chat_id: int, steps: List[Dict[str, Any]], 
                               delay: float = 1.0) -> List[int]:
        """–°–æ–∑–¥–∞—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏"""
        if not self.bot:
            return []
        
        message_ids = []
        
        try:
            for i, step in enumerate(steps):
                # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
                message_id = self.create_loading_message(
                    chat_id=chat_id,
                    text=step.get('text', '–ó–∞–≥—Ä—É–∑–∫–∞...'),
                    progress=step.get('progress', 0),
                    total=step.get('total', 100)
                )
                
                if message_id:
                    message_ids.append(message_id)
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
                if i < len(steps) - 1:
                    time.sleep(delay)
            
            return message_ids
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return []
    
    def cleanup_messages(self, chat_id: int, message_ids: List[int]) -> bool:
        """–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏)"""
        if not self.bot:
            return False
        
        try:
            for message_id in message_ids:
                try:
                    self.bot.delete_message(chat_id, message_id)
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return False