"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞
–í–∫–ª—é—á–∞–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫, –ø—Ä–æ–≥—Ä–µ—Å—Å-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã, fallback –¥–ª—è emoji
"""

import asyncio
import time
import logging
from typing import Optional, Dict, List, Any, Callable
from dataclasses import dataclass
from enum import Enum
import random

logger = logging.getLogger(__name__)

class ResponseType(Enum):
    """–¢–∏–ø—ã –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    SUCCESS = "success"
    ERROR = "error"
    WARNING = "warning"
    INFO = "info"
    LOADING = "loading"

@dataclass
class ErrorCode:
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—à–∏–±–æ–∫"""
    code: str
    message: str
    user_message: str
    action_required: str
    severity: str = "error"

class UXService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞"""
    
    def __init__(self, bot=None):
        self.bot = bot
        self.typing_timeout = 5  # —Å–µ–∫—É–Ω–¥
        self.progress_update_interval = 2  # —Å–µ–∫—É–Ω–¥
        
        # Fallback emoji –Ω–∞–±–æ—Ä—ã
        self.emoji_fallbacks = {
            ResponseType.SUCCESS: ["üî•", "üëç", "‚ù§Ô∏è", "üéâ", "‚úÖ", "‚ú®"],
            ResponseType.ERROR: ["‚ùå", "‚ö†Ô∏è", "üö´", "üí•", "üòû"],
            ResponseType.WARNING: ["‚ö†Ô∏è", "üî∂", "üì¢", "üëÄ"],
            ResponseType.INFO: ["‚ÑπÔ∏è", "üìã", "üí°", "üîç"],
            ResponseType.LOADING: ["‚è≥", "üîÑ", "‚è∞", "‚è±Ô∏è"]
        }
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–¥—ã –æ—à–∏–±–æ–∫
        self.error_codes = {
            "E001": ErrorCode(
                code="E001",
                message="User not found in database",
                user_message="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start",
                action_required="Restart bot with /start command"
            ),
            "E002": ErrorCode(
                code="E002", 
                message="Insufficient balance",
                user_message="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è",
                action_required="Top up balance"
            ),
            "E003": ErrorCode(
                code="E003",
                message="Marzban API unavailable",
                user_message="–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                action_required="Retry in a few minutes"
            ),
            "E004": ErrorCode(
                code="E004",
                message="Invalid payment amount",
                user_message="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö",
                action_required="Select valid amount"
            ),
            "E005": ErrorCode(
                code="E005",
                message="Sticker not found",
                user_message="–ê–Ω–∏–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–æ –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
                action_required="None"
            )
        }
        
        # –ö—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞
        self.response_cache = {}
        self.cache_ttl = 300  # 5 –º–∏–Ω—É—Ç

    def get_random_emoji(self, response_type: ResponseType) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π emoji –¥–ª—è —Ç–∏–ø–∞ –æ—Ç–≤–µ—Ç–∞"""
        emojis = self.emoji_fallbacks.get(response_type, ["üì±"])
        return random.choice(emojis)
    
    @property
    def ResponseType(self):
        """–î–æ—Å—Ç—É–ø –∫ ResponseType enum"""
        return ResponseType

    async def send_immediate_ack(self, chat_id: int, callback_query_id: str = None, 
                               message: str = "–í—ã–ø–æ–ª–Ω—è—é...") -> bool:
        """–ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫ (0.1-0.3s)"""
        try:
            if callback_query_id:
                # –î–ª—è callback query - –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç
                self.bot.answer_callback_query(
                    callback_query_id=callback_query_id,
                    text=message,
                    show_alert=False
                )
            
            # –ü–æ–∫–∞–∑–∞—Ç—å typing indicator
            await self.show_typing_indicator(chat_id)
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞: {e}")
            return False

    async def show_typing_indicator(self, chat_id: int) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏"""
        try:
            if self.bot:
                # –î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º send_chat_action
                self.bot.send_chat_action(chat_id, 'typing')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ typing indicator: {e}")

    async def send_progress_update(self, chat_id: int, message_id: int, 
                                 progress: int, total: int, 
                                 current_step: str = "") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        try:
            percentage = int((progress / total) * 100) if total > 0 else 0
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            progress_bar = self.create_progress_bar(percentage)
            
            text = f"""
{self.get_random_emoji(ResponseType.LOADING)} <b>–í—ã–ø–æ–ª–Ω—è—é –æ–ø–µ—Ä–∞—Ü–∏—é...</b>

{progress_bar} {percentage}%

üìã <b>–¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø:</b> {current_step}
‚è±Ô∏è <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {progress}/{total}
"""
            
            if self.bot:
                self.bot.edit_message_text(
                    text=text,
                    chat_id=chat_id,
                    message_id=message_id,
                    parse_mode='HTML'
                )
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
            return False

    def create_progress_bar(self, percentage: int, length: int = 10) -> str:
        """–°–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
        filled = int((percentage / 100) * length)
        empty = length - filled
        
        bar = "‚ñà" * filled + "‚ñë" * empty
        return f"[{bar}]"

    async def send_success_response(self, chat_id: int, message_id: int = None,
                                  title: str = "–ì–æ—Ç–æ–≤–æ!", 
                                  details: str = "",
                                  show_log_button: bool = False) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –æ–± —É—Å–ø–µ—Ö–µ"""
        try:
            emoji = self.get_random_emoji(ResponseType.SUCCESS)
            
            text = f"""
{emoji} <b>{title}</b>

{details}

‚ú® <i>–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ</i>
"""
            
            if message_id and self.bot:
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.bot.edit_message_text(
                    text=text,
                    chat_id=chat_id,
                    message_id=message_id,
                    parse_mode='HTML'
                )
            elif self.bot:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.bot.send_message(
                    chat_id=chat_id,
                    text=text,
                    parse_mode='HTML'
                )
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
            return False

    async def send_error_response(self, chat_id: int, error_code: str,
                                message_id: int = None,
                                show_log_button: bool = True) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ"""
        try:
            error_info = self.error_codes.get(error_code)
            if not error_info:
                error_info = ErrorCode(
                    code="E999",
                    message="Unknown error",
                    user_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
                    action_required="Contact support"
                )
            
            emoji = self.get_random_emoji(ResponseType.ERROR)
            
            text = f"""
{emoji} <b>–û—à–∏–±–∫–∞ {error_info.code}</b>

{error_info.user_message}

üîß <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b> {error_info.action_required}
"""
            
            if show_log_button:
                text += "\n\nüìã –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∞"
            
            if message_id and self.bot:
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.bot.edit_message_text(
                    text=text,
                    chat_id=chat_id,
                    message_id=message_id,
                    parse_mode='HTML'
                )
            elif self.bot:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.bot.send_message(
                    chat_id=chat_id,
                    text=text,
                    parse_mode='HTML'
                )
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ: {e}")
            return False

    async def execute_with_progress(self, chat_id: int, operation: Callable,
                                  total_steps: int, operation_name: str = "–û–ø–µ—Ä–∞—Ü–∏—è") -> Any:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —Å –ø–æ–∫–∞–∑–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            initial_message = self.bot.send_message(
                chat_id=chat_id,
                text=f"{self.get_random_emoji(ResponseType.LOADING)} <b>–ù–∞—á–∏–Ω–∞—é {operation_name.lower()}...</b>",
                parse_mode='HTML'
            )
            
            result = None
            for step in range(total_steps):
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                await self.send_progress_update(
                    chat_id=chat_id,
                    message_id=initial_message.message_id,
                    progress=step + 1,
                    total=total_steps,
                    current_step=f"–®–∞–≥ {step + 1} –∏–∑ {total_steps}"
                )
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                await asyncio.sleep(0.5)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
            result = await operation()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await self.send_success_response(
                chat_id=chat_id,
                message_id=initial_message.message_id,
                title=f"{operation_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
                details="–í—Å–µ —ç—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
            )
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º: {e}")
            await self.send_error_response(
                chat_id=chat_id,
                error_code="E999",
                message_id=initial_message.message_id if 'initial_message' in locals() else None
            )
            raise

    def mask_sensitive_data(self, data: str) -> str:
        """–ú–∞—Å–∫–∏—Ä–æ–≤–∞—Ç—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–≥–∞—Ö"""
        if not data:
            return data
            
        # –ú–∞—Å–∫–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã, –ø–∞—Ä–æ–ª–∏, –∫–ª—é—á–∏
        import re
        
        # –¢–æ–∫–µ–Ω—ã (–¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏)
        data = re.sub(r'[A-Za-z0-9]{20,}', '***MASKED***', data)
        
        # Email –∞–¥—Ä–µ—Å–∞
        data = re.sub(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', '***@***.***', data)
        
        # IP –∞–¥—Ä–µ—Å–∞
        data = re.sub(r'\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b', '***.***.***.***', data)
        
        return data

    def log_operation(self, operation: str, user_id: int, details: str = "", 
                     success: bool = True, error_code: str = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —Å –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        masked_details = self.mask_sensitive_data(details)
        
        log_level = logging.INFO if success else logging.ERROR
        status = "SUCCESS" if success else "FAILED"
        
        logger.log(
            log_level,
            f"OPERATION: {operation} | USER: {user_id} | STATUS: {status} | "
            f"DETAILS: {masked_details} | ERROR_CODE: {error_code or 'N/A'}"
        )

    def get_cached_response(self, key: str) -> Optional[Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç"""
        if key in self.response_cache:
            cached_data, timestamp = self.response_cache[key]
            if time.time() - timestamp < self.cache_ttl:
                return cached_data
            else:
                del self.response_cache[key]
        return None

    def cache_response(self, key: str, data: Any) -> None:
        """–ö—ç—à–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç"""
        self.response_cache[key] = (data, time.time())

    async def handle_long_operation(self, chat_id: int, operation: Callable,
                                  operation_name: str = "–û–ø–µ—Ä–∞—Ü–∏—è") -> Any:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–ª–≥—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
        try:
            # –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫
            await self.send_immediate_ack(chat_id, message="–ù–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ
            result = await operation()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É—Å–ø–µ—Ö–µ
            await self.send_success_response(
                chat_id=chat_id,
                title=f"{operation_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
                details="–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
            )
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–æ–ª–≥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
            await self.send_error_response(chat_id, "E999")
            raise