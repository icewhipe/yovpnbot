#!/usr/bin/env python3
"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤
"""

import logging
import qrcode
from io import BytesIO
from typing import Optional, Dict, Any
from telebot import types

logger = logging.getLogger(__name__)

class CopyService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ QR-–∫–æ–¥–∞–º–∏"""
    
    def __init__(self, bot=None):
        self.bot = bot
        self.qr_cache = {}  # –ö—ç—à –¥–ª—è QR-–∫–æ–¥–æ–≤
    
    def set_bot(self, bot):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞"""
        self.bot = bot
    
    def generate_qr_code(self, data: str, size: int = 10, border: int = 4) -> Optional[BytesIO]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = f"{data}_{size}_{border}"
            if cache_key in self.qr_cache:
                return self.qr_cache[cache_key]
            
            # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥
            qr = qrcode.QRCode(
                version=1,
                error_correction=qrcode.constants.ERROR_CORRECT_L,
                box_size=size,
                border=border,
            )
            qr.add_data(data)
            qr.make(fit=True)
            
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = qr.make_image(fill_color="black", back_color="white")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ BytesIO
            bio = BytesIO()
            img.save(bio, format='PNG')
            bio.seek(0)
            
            # –ö—ç—à–∏—Ä—É–µ–º
            self.qr_cache[cache_key] = bio
            
            return bio
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞: {e}")
            return None
    
    def send_qr_code(self, chat_id: int, data: str, caption: str = "QR-–∫–æ–¥") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å QR-–∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if not self.bot:
            logger.warning("–ë–æ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, QR-–∫–æ–¥ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            return False
        
        try:
            qr_bio = self.generate_qr_code(data)
            if not qr_bio:
                return False
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥ –∫–∞–∫ —Ñ–æ—Ç–æ
            self.bot.send_photo(
                chat_id=chat_id,
                photo=qr_bio,
                caption=caption,
                parse_mode='HTML'
            )
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ QR-–∫–æ–¥–∞: {e}")
            return False
    
    def send_copyable_text(self, chat_id: int, text: str, title: str = "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not self.bot:
            logger.warning("–ë–æ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Ç–µ–∫—Å—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            return False
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è –ª–µ–≥–∫–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            message = f"""
üìã <b>{title}</b>

<code>{text}</code>

üí° <i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–µ–∫—Å—Ç –≤—ã—à–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ</i>
"""
            
            self.bot.send_message(
                chat_id=chat_id,
                text=message,
                parse_mode='HTML'
            )
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–ø–∏—Ä—É–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {e}")
            return False
    
    def create_copy_keyboard(self, text: str, copy_type: str, 
                           show_qr: bool = True) -> types.InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        
        # –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        keyboard.add(
            types.InlineKeyboardButton(
                "üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", 
                callback_data=f"copy_text_{copy_type}"
            )
        )
        
        # –ö–Ω–æ–ø–∫–∞ QR-–∫–æ–¥–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞)
        if show_qr:
            keyboard.add(
                types.InlineKeyboardButton(
                    "üì± –ü–æ–∫–∞–∑–∞—Ç—å QR-–∫–æ–¥", 
                    callback_data=f"show_qr_{copy_type}"
                )
            )
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        keyboard.add(
            types.InlineKeyboardButton(
                "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                callback_data="back_to_previous"
            )
        )
        
        return keyboard
    
    def handle_copy_request(self, chat_id: int, text: str, copy_type: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        try:
            if copy_type == "text":
                return self.send_copyable_text(chat_id, text, "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç")
            elif copy_type == "vless":
                return self.send_copyable_text(chat_id, text, "VLESS —Å—Å—ã–ª–∫–∞")
            elif copy_type == "subscription":
                return self.send_copyable_text(chat_id, text, "Subscription URL")
            elif copy_type == "referral":
                return self.send_copyable_text(chat_id, text, "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")
            else:
                return self.send_copyable_text(chat_id, text, "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: {e}")
            return False
    
    def handle_qr_request(self, chat_id: int, data: str, qr_type: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ QR-–∫–æ–¥"""
        try:
            if qr_type == "vless":
                caption = "üì± <b>QR-–∫–æ–¥ VLESS —Å—Å—ã–ª–∫–∏</b>\n\n–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
            elif qr_type == "subscription":
                caption = "üì± <b>QR-–∫–æ–¥ Subscription URL</b>\n\n–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏"
            elif qr_type == "referral":
                caption = "üì± <b>QR-–∫–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏</b>\n\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏"
            else:
                caption = "üì± <b>QR-–∫–æ–¥</b>\n\n–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
            
            return self.send_qr_code(chat_id, data, caption)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ QR-–∫–æ–¥: {e}")
            return False
    
    def create_vless_copy_interface(self, chat_id: int, vless_link: str, 
                                  subscription_url: str = None) -> bool:
        """–°–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è VLESS —Å—Å—ã–ª–æ–∫"""
        if not self.bot:
            return False
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º VLESS —Å—Å—ã–ª–∫—É
            self.send_copyable_text(chat_id, vless_link, "VLESS —Å—Å—ã–ª–∫–∞")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            
            keyboard.add(
                types.InlineKeyboardButton("üìã VLESS", callback_data="copy_vless"),
                types.InlineKeyboardButton("üì± QR VLESS", callback_data="qr_vless")
            )
            
            if subscription_url:
                keyboard.add(
                    types.InlineKeyboardButton("üìã Subscription", callback_data="copy_subscription"),
                    types.InlineKeyboardButton("üì± QR Subscription", callback_data="qr_subscription")
                )
            
            keyboard.add(
                types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_subscription")
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            self.bot.send_message(
                chat_id=chat_id,
                text="üîó <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Å—Å—ã–ª–∫–∞–º–∏</b>",
                parse_mode='HTML',
                reply_markup=keyboard
            )
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
    
    def create_referral_copy_interface(self, chat_id: int, referral_link: str) -> bool:
        """–°–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
        if not self.bot:
            return False
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
            self.send_copyable_text(chat_id, referral_link, "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            
            keyboard.add(
                types.InlineKeyboardButton("üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data="copy_referral"),
                types.InlineKeyboardButton("üì± QR-–∫–æ–¥", callback_data="qr_referral")
            )
            
            keyboard.add(
                types.InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", callback_data="share_referral"),
                types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="referral_stats")
            )
            
            keyboard.add(
                types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            self.bot.send_message(
                chat_id=chat_id,
                text="üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode='HTML',
                reply_markup=keyboard
            )
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: {e}")
            return False