#!/usr/bin/env python3
"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∏ —Å—Ç–∏–∫–µ—Ä–æ–≤
"""

import logging
import time
import asyncio
from typing import Optional, List, Dict, Any
from enum import Enum

logger = logging.getLogger(__name__)

class AnimationType(Enum):
    """–¢–∏–ø—ã –∞–Ω–∏–º–∞—Ü–∏–π"""
    LOADING = "loading"
    SUCCESS = "success"
    ERROR = "error"
    WARNING = "warning"
    INFO = "info"
    PROGRESS = "progress"

class StickerService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∏–∫–µ—Ä–∞–º–∏ –∏ –∞–Ω–∏–º–∞—Ü–∏—è–º–∏"""
    
    def __init__(self, bot=None):
        self.bot = bot
        self.stickers = {
            'loading': [
                'CAACAgIAAxkBAAIBY2Yx...',  # –ó–∞–≥—Ä—É–∑–∫–∞ 1
                'CAACAgIAAxkBAAIBZGYx...',  # –ó–∞–≥—Ä—É–∑–∫–∞ 2
            ],
            'success': [
                'CAACAgIAAxkBAAIBZWYx...',  # –£—Å–ø–µ—Ö 1
                'CAACAgIAAxkBAAIBZmYx...',  # –£—Å–ø–µ—Ö 2
            ],
            'error': [
                'CAACAgIAAxkBAAIBZ2Yx...',  # –û—à–∏–±–∫–∞ 1
                'CAACAgIAAxkBAAIBaGYx...',  # –û—à–∏–±–∫–∞ 2
            ],
            'server': [
                'CAACAgIAAxkBAAIBaWYx...',  # –°–µ—Ä–≤–µ—Ä 1
                'CAACAgIAAxkBAAIBamYx...',  # –°–µ—Ä–≤–µ—Ä 2
            ],
            'security': [
                'CAACAgIAAxkBAAIBa2Yx...',  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å 1
                'CAACAgIAAxkBAAIBbGYx...',  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å 2
            ],
            'network': [
                'CAACAgIAAxkBAAIBbWYx...',  # –°–µ—Ç—å 1
                'CAACAgIAAxkBAAIBbmYx...',  # –°–µ—Ç—å 2
            ],
            'celebration': [
                'CAACAgIAAxkBAAIBb2Yx...',  # –ü—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏–µ 1
                'CAACAgIAAxkBAAIBcGYx...',  # –ü—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏–µ 2
            ]
        }
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤
        self.progress_emojis = {
            'empty': '‚¨ú',
            'filled': '‚¨õ',
            'half': 'üü´'
        }
    
    def set_bot(self, bot):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞"""
        self.bot = bot
    
    def get_sticker(self, category: str, index: int = 0) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        if category in self.stickers and len(self.stickers[category]) > index:
            return self.stickers[category][index]
        return None
    
    def send_sticker(self, chat_id: int, category: str, index: int = 0) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä"""
        if not self.bot:
            logger.warning("–ë–æ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å—Ç–∏–∫–µ—Ä –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            return False
        
        sticker_id = self.get_sticker(category, index)
        if not sticker_id:
            logger.warning(f"–°—Ç–∏–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: {category}[{index}]")
            return False
        
        try:
            self.bot.send_sticker(chat_id, sticker_id)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∏–∫–µ—Ä–∞: {e}")
            return False
    
    def create_progress_bar(self, current: int, total: int, width: int = 10) -> str:
        """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏–∑ —ç–º–æ–¥–∑–∏"""
        if total <= 0:
            return self.progress_emojis['empty'] * width
        
        filled = int((current / total) * width)
        empty = width - filled
        
        bar = self.progress_emojis['filled'] * filled + self.progress_emojis['empty'] * empty
        percentage = int((current / total) * 100)
        
        return f"{bar} {percentage}%"
    
    def create_loading_animation(self, chat_id: int, steps: List[Dict[str, Any]], 
                               delay: float = 1.0) -> List[int]:
        """–°–æ–∑–¥–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —à–∞–≥–∞–º–∏"""
        if not self.bot:
            logger.warning("–ë–æ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∞–Ω–∏–º–∞—Ü–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
            return []
        
        message_ids = []
        
        try:
            for i, step in enumerate(steps):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
                if step.get('sticker'):
                    self.send_sticker(chat_id, step['sticker'])
                    time.sleep(0.5)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                text = step.get('text', '')
                if step.get('progress'):
                    progress = self.create_progress_bar(
                        step['progress']['current'], 
                        step['progress']['total']
                    )
                    text = f"{text}\n\n{progress}"
                
                message = self.bot.send_message(chat_id, text, parse_mode='HTML')
                message_ids.append(message.message_id)
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
                if i < len(steps) - 1:  # –ù–µ –∂–¥–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —à–∞–≥–∞
                    time.sleep(delay)
            
            return message_ids
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return []
    
    def animate_creation_process(self, chat_id: int, username: str) -> List[int]:
        """–ê–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        steps = [
            {
                'sticker': 'loading',
                'text': f"üîÑ <b>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</b>\n\n{self.create_progress_bar(1, 5)}"
            },
            {
                'sticker': 'server',
                'text': f"üñ•Ô∏è <b>–ì–æ—Ç–æ–≤–∏–º –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É</b>\n\n–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä–∞–º...\n{self.create_progress_bar(2, 5)}"
            },
            {
                'sticker': 'security',
                'text': f"üîê <b>–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª</b>\n\n–°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...\n{self.create_progress_bar(3, 5)}"
            },
            {
                'sticker': 'network',
                'text': f"üåê <b>–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏</b>\n\n–°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞...\n{self.create_progress_bar(4, 5)}"
            },
            {
                'sticker': 'success',
                'text': f"‚úÖ <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω\n{self.create_progress_bar(5, 5)}"
            }
        ]
        
        return self.create_loading_animation(chat_id, steps, delay=1.5)
    
    def animate_payment_process(self, chat_id: int, amount: float) -> List[int]:
        """–ê–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–ª–∞—Ç–µ–∂–∞"""
        steps = [
            {
                'sticker': 'loading',
                'text': f"üí≥ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞</b>\n\n–°—É–º–º–∞: {amount} ‚ÇΩ\n{self.create_progress_bar(1, 3)}"
            },
            {
                'sticker': 'security',
                'text': f"üîí <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</b>\n\n–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...\n{self.create_progress_bar(2, 3)}"
            },
            {
                'sticker': 'success',
                'text': f"‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω!</b>\n\n–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å\n{self.create_progress_bar(3, 3)}"
            }
        ]
        
        return self.create_loading_animation(chat_id, steps, delay=1.0)
    
    def animate_subscription_activation(self, chat_id: int, days: int) -> List[int]:
        """–ê–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø–æ–¥–ø–∏—Å–∫–∏"""
        steps = [
            {
                'sticker': 'loading',
                'text': f"üîÑ <b>–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n–ü–µ—Ä–∏–æ–¥: {days} –¥–Ω–µ–π\n{self.create_progress_bar(1, 3)}"
            },
            {
                'sticker': 'network',
                'text': f"üåê <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞</b>\n\n–ü–æ–¥–∫–ª—é—á–∞–µ–º –∫ VPN —Å–µ—Ä–≤–µ—Ä–∞–º...\n{self.create_progress_bar(2, 3)}"
            },
            {
                'sticker': 'celebration',
                'text': f"üéâ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n–î–æ—Å—Ç—É–ø –∫ VPN –∞–∫—Ç–∏–≤–µ–Ω –Ω–∞ {days} –¥–Ω–µ–π\n{self.create_progress_bar(3, 3)}"
            }
        ]
        
        return self.create_loading_animation(chat_id, steps, delay=1.2)
    
    def send_celebration(self, chat_id: int, message: str = "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∏–∫–µ—Ä–∞–º–∏"""
        if not self.bot:
            return False
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤
            for i in range(3):
                self.send_sticker(chat_id, 'celebration', i % 2)
                time.sleep(0.3)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.bot.send_message(chat_id, message, parse_mode='HTML')
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏—è: {e}")
            return False
    
    def send_error_animation(self, chat_id: int, error_message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –æ—à–∏–±–∫–∏"""
        if not self.bot:
            return False
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –æ—à–∏–±–∫–∏
            self.send_sticker(chat_id, 'error')
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            self.bot.send_message(
                chat_id, 
                f"‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n{error_message}", 
                parse_mode='HTML'
            )
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –æ—à–∏–±–∫–∏: {e}")
            return False