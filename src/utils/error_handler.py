#!/usr/bin/env python3
"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
"""

import logging
import traceback
from typing import Optional, Callable, Any
from functools import wraps
import telebot
from telebot import types

logger = logging.getLogger(__name__)

class ErrorHandler:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    
    def __init__(self, bot: telebot.TeleBot):
        self.bot = bot
        self.admin_chat_id = None  # ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    
    def set_admin_chat_id(self, chat_id: int):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö"""
        self.admin_chat_id = chat_id
    
    def handle_error(self, error: Exception, context: str = "", user_id: Optional[int] = None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º"""
        error_msg = f"–û—à–∏–±–∫–∞ –≤ {context}: {str(error)}"
        logger.error(error_msg)
        logger.error(traceback.format_exc())
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        if self.admin_chat_id:
            try:
                admin_message = f"üö® <b>–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ</b>\n\n"
                admin_message += f"<b>–ö–æ–Ω—Ç–µ–∫—Å—Ç:</b> {context}\n"
                admin_message += f"<b>–û—à–∏–±–∫–∞:</b> {str(error)}\n"
                if user_id:
                    admin_message += f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_id}\n"
                admin_message += f"<b>–í—Ä–µ–º—è:</b> {traceback.format_exc()}"
                
                self.bot.send_message(
                    self.admin_chat_id,
                    admin_message,
                    parse_mode='HTML'
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
    
    def send_user_error(self, chat_id: int, error_type: str = "general"):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–Ω—è—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        error_messages = {
            "general": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            "api": "‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
            "network": "üåê –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.",
            "auth": "üîê –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            "data": "üìä –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            "marzban": "üîß –ü—Ä–æ–±–ª–µ–º–∞ —Å VPN —Å–µ—Ä–≤–∏—Å–æ–º. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        }
        
        message = error_messages.get(error_type, error_messages["general"])
        
        try:
            self.bot.send_message(chat_id, message)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
    
    def error_decorator(self, context: str = "", user_friendly_error: str = "general"):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö"""
        def decorator(func: Callable) -> Callable:
            @wraps(func)
            def wrapper(*args, **kwargs):
                try:
                    return func(*args, **kwargs)
                except Exception as e:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º user_id –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                    user_id = None
                    if args and hasattr(args[0], 'from_user'):
                        user_id = args[0].from_user.id
                    elif args and hasattr(args[0], 'chat'):
                        user_id = args[0].chat.id
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                    self.handle_error(e, context, user_id)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    if user_id:
                        self.send_user_error(user_id, user_friendly_error)
                    
                    return None
            return wrapper
        return decorator
    
    def handle_marzban_error(self, error: Exception, username: str, user_id: Optional[int] = None):
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Marzban API"""
        error_msg = f"–û—à–∏–±–∫–∞ Marzban API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {str(error)}"
        logger.error(error_msg)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
        if "SSL" in str(error) or "certificate" in str(error).lower():
            error_type = "ssl"
        elif "timeout" in str(error).lower():
            error_type = "timeout"
        elif "connection" in str(error).lower():
            error_type = "connection"
        else:
            error_type = "marzban"
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        self.handle_error(error, f"Marzban API (user: {username})", user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        if self.admin_chat_id:
            try:
                admin_message = f"üîß <b>–û—à–∏–±–∫–∞ Marzban API</b>\n\n"
                admin_message += f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username} (ID: {user_id})\n"
                admin_message += f"<b>–¢–∏–ø –æ—à–∏–±–∫–∏:</b> {error_type}\n"
                admin_message += f"<b>–û—à–∏–±–∫–∞:</b> {str(error)}"
                
                self.bot.send_message(
                    self.admin_chat_id,
                    admin_message,
                    parse_mode='HTML'
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ Marzban: {e}")
    
    def handle_user_data_error(self, error: Exception, user_id: int, operation: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        error_msg = f"–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–∏ {operation}: {str(error)}"
        logger.error(error_msg)
        
        self.handle_error(error, f"User Data ({operation})", user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        self.send_user_error(user_id, "data")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ main)
error_handler: Optional[ErrorHandler] = None

def get_error_handler() -> ErrorHandler:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    global error_handler
    if error_handler is None:
        raise RuntimeError("ErrorHandler –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    return error_handler

def init_error_handler(bot: telebot.TeleBot, admin_chat_id: Optional[int] = None):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫"""
    global error_handler
    error_handler = ErrorHandler(bot)
    if admin_chat_id:
        error_handler.set_admin_chat_id(admin_chat_id)