#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
"""

import os
import sys
import subprocess

def check_all_env():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("=" * 60)
    print("–ü–†–û–í–ï–†–ö–ê –í–°–ï–• –ò–°–¢–û–ß–ù–ò–ö–û–í –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø")
    print("=" * 60)
    
    # 1. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    print("1. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞:")
    env_vars = ['USERBOT_TOKEN', 'MARZBAN_API_URL', 'MARZBAN_ADMIN_TOKEN', 'DB_PASSWORD']
    for var in env_vars:
        value = os.getenv(var, '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê')
        if 'TOKEN' in var or 'PASSWORD' in var:
            print(f"   {var}: {value[:20]}..." if value != '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê' else f"   {var}: {value}")
        else:
            print(f"   {var}: {value}")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã .env
    print("\n2. –§–∞–π–ª—ã .env:")
    env_files = ['.env', '.env.local', '.env.production', '.env.development']
    for env_file in env_files:
        if os.path.exists(env_file):
            print(f"   ‚úÖ {env_file} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            try:
                with open(env_file, 'r') as f:
                    content = f.read()
                    print(f"      –°–æ–¥–µ—Ä–∂–∏–º–æ–µ:")
                    for line in content.strip().split('\n'):
                        if line.strip() and '=' in line:
                            key, value = line.split('=', 1)
                            if 'TOKEN' in key or 'PASSWORD' in key:
                                print(f"        {key}={value[:20]}..." if len(value) > 20 else f"        {key}={value}")
                            else:
                                print(f"        {key}={value}")
            except Exception as e:
                print(f"      –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
        else:
            print(f"   ‚ùå {env_file} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ env –∫–æ–º–∞–Ω–¥—É
    print("\n3. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ env –∫–æ–º–∞–Ω–¥—É:")
    try:
        result = subprocess.run(['env'], capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            env_output = result.stdout
            for var in env_vars:
                lines = [line for line in env_output.split('\n') if line.startswith(f"{var}=")]
                if lines:
                    for line in lines:
                        key, value = line.split('=', 1)
                        if 'TOKEN' in key or 'PASSWORD' in key:
                            print(f"   {key}={value[:20]}..." if len(value) > 20 else f"   {key}={value}")
                        else:
                            print(f"   {key}={value}")
                else:
                    print(f"   {var}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê")
        else:
            print(f"   –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è env: {result.stderr}")
    except Exception as e:
        print(f"   –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è env: {e}")
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ printenv
    print("\n4. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ printenv:")
    try:
        for var in env_vars:
            result = subprocess.run(['printenv', var], capture_output=True, text=True, timeout=5)
            if result.returncode == 0:
                value = result.stdout.strip()
                if 'TOKEN' in var or 'PASSWORD' in var:
                    print(f"   {var}: {value[:20]}..." if len(value) > 20 else f"   {var}: {value}")
                else:
                    print(f"   {var}: {value}")
            else:
                print(f"   {var}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê")
    except Exception as e:
        print(f"   –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è printenv: {e}")
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ getenv
    print("\n5. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ os.getenv:")
    for var in env_vars:
        value = os.getenv(var, '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê')
        if 'TOKEN' in var or 'PASSWORD' in var:
            print(f"   {var}: {value[:20]}..." if value != '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê' else f"   {var}: {value}")
        else:
            print(f"   {var}: {value}")
    
    # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ environ
    print("\n6. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ os.environ:")
    for var in env_vars:
        if var in os.environ:
            value = os.environ[var]
            if 'TOKEN' in var or 'PASSWORD' in var:
                print(f"   {var}: {value[:20]}..." if len(value) > 20 else f"   {var}: {value}")
            else:
                print(f"   {var}: {value}")
        else:
            print(f"   {var}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê")
    
    print("\n" + "=" * 60)
    print("–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    print("=" * 60)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    real_values_found = False
    for var in env_vars:
        value = os.getenv(var, '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê')
        if value != '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê' and value not in ['test_token', 'https://test.com/api', 'test_password']:
            real_values_found = True
            break
    
    if real_values_found:
        print("‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞")
    else:
        print("‚ùå –†–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ .env —Ñ–∞–π–ª")
    
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö")
    print("2. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ .env —Ñ–∞–π–ª —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")

if __name__ == "__main__":
    check_all_env()