#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ .env —Ñ–∞–π–ª–µ
"""

import os
import sys

def update_token():
    """–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –≤ .env —Ñ–∞–π–ª–µ"""
    print("=" * 60)
    print("–û–ë–ù–û–í–õ–ï–ù–ò–ï –¢–û–ö–ï–ù–ê –í .ENV –§–ê–ô–õ–ï")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
    if not os.path.exists('.env'):
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π .env —Ñ–∞–π–ª
    try:
        with open('.env', 'r') as f:
            lines = f.readlines()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .env: {e}")
        return False
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    print("–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ .env:")
    for line in lines:
        if line.strip() and '=' in line:
            key, value = line.split('=', 1)
            if 'TOKEN' in key or 'PASSWORD' in key:
                print(f"  {key}={value[:20]}..." if len(value.strip()) > 20 else f"  {key}={value.strip()}")
            else:
                print(f"  {key}={value.strip()}")
    
    print("\n" + "=" * 40)
    print("–í–í–ï–î–ò–¢–ï –ù–û–í–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø")
    print("=" * 40)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    new_values = {}
    
    # Telegram Bot Token
    current_bot_token = None
    for line in lines:
        if line.startswith('USERBOT_TOKEN='):
            current_bot_token = line.split('=', 1)[1].strip()
            break
    
    if current_bot_token and current_bot_token != 'test_token':
        print(f"–¢–µ–∫—É—â–∏–π BOT_TOKEN: {current_bot_token[:20]}...")
        keep_bot = input("–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π BOT_TOKEN? (y/n): ").strip().lower()
        if keep_bot == 'y':
            new_values['USERBOT_TOKEN'] = current_bot_token
        else:
            new_values['USERBOT_TOKEN'] = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π USERBOT_TOKEN: ").strip()
    else:
        new_values['USERBOT_TOKEN'] = input("–í–≤–µ–¥–∏—Ç–µ USERBOT_TOKEN: ").strip()
    
    # Marzban API URL
    new_values['MARZBAN_API_URL'] = input("–í–≤–µ–¥–∏—Ç–µ MARZBAN_API_URL (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: https://alb-vpnprimex.duckdns.org/api): ").strip()
    if not new_values['MARZBAN_API_URL']:
        new_values['MARZBAN_API_URL'] = 'https://alb-vpnprimex.duckdns.org/api'
    
    # Marzban Admin Token
    new_values['MARZBAN_ADMIN_TOKEN'] = input("–í–≤–µ–¥–∏—Ç–µ MARZBAN_ADMIN_TOKEN: ").strip()
    
    # Database Password
    current_db_password = None
    for line in lines:
        if line.startswith('DB_PASSWORD='):
            current_db_password = line.split('=', 1)[1].strip()
            break
    
    if current_db_password and current_db_password != 'test_password':
        print(f"–¢–µ–∫—É—â–∏–π DB_PASSWORD: {current_db_password[:10]}...")
        keep_db = input("–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π DB_PASSWORD? (y/n): ").strip().lower()
        if keep_db == 'y':
            new_values['DB_PASSWORD'] = current_db_password
        else:
            new_values['DB_PASSWORD'] = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π DB_PASSWORD: ").strip()
    else:
        new_values['DB_PASSWORD'] = input("–í–≤–µ–¥–∏—Ç–µ DB_PASSWORD: ").strip()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª
    print(f"\n–û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
        new_lines = []
        for line in lines:
            if line.strip() and '=' in line:
                key = line.split('=', 1)[0]
                if key in new_values:
                    new_lines.append(f"{key}={new_values[key]}\n")
                else:
                    new_lines.append(line)
            else:
                new_lines.append(line)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open('.env', 'w') as f:
            f.writelines(new_lines)
        
        print("‚úÖ .env —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        print("\n–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
        for key, value in new_values.items():
            if 'TOKEN' in key or 'PASSWORD' in key:
                print(f"  {key}={value[:20]}..." if len(value) > 20 else f"  {key}={value}")
            else:
                print(f"  {key}={value}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è .env: {e}")
        return False

if __name__ == "__main__":
    if update_token():
        print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω:")
        print(f"   python3 check_marzban_token.py")
        print(f"\n–ò –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞:")
        print(f"   python3 main_improved.py")
    else:
        print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω")
        print(f"üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å .env —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é:")
        print(f"   nano .env")